{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/baidu_verify_aX3upgcPux.html","path":"baidu_verify_aX3upgcPux.html","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/linear_space.eddx","path":"images/linear_space.eddx","modified":0,"renderable":0},{"_id":"source/uploads/me.jpeg","path":"uploads/me.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"876c607060f4a864761fd1d8cc982edba012f251","modified":1626699811695},{"_id":"source/CNAME","hash":"685ff10641d5fffd71eec3979dab6fd0f10c9ea7","modified":1626699811695},{"_id":"source/baidu_verify_aX3upgcPux.html","hash":"344502cc0cb9646f0643ff932d5c7adb1438cd5f","modified":1626699811699},{"_id":"source/robots.txt","hash":"7858025995a22727d626cdda854f061df5ba8fb9","modified":1626699811699},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1626699811721},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1626699811721},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1626699811722},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1626699811721},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1626699811722},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1626699811723},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1626699811723},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1626699811723},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1626699811723},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1626699811723},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1626699811723},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1626699811724},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1626699811724},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1626699811740},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1626699811724},{"_id":"themes/next/_config.yml","hash":"a42a99eb9d8a522e19e9eac34e15109f1a4162f1","modified":1638608678975},{"_id":"source/_posts/5-steps-for-asking-good-questions.md","hash":"efa55e28d49e4fdf225049831531d2d8c0b74b1a","modified":1626699811695},{"_id":"source/_posts/GAN-01.md","hash":"0e85b1c8c4c1ee9252b919c46446de5926c22535","modified":1626699811695},{"_id":"source/_posts/GAN-02.md","hash":"dcae32a27b5391dc22a6b24f17e9db14b291cfe7","modified":1626699811695},{"_id":"source/_posts/GD-Series.md","hash":"ea008fd53dff233ccbf385e91796d273525679a9","modified":1626699811695},{"_id":"source/_posts/about-kernel-01.md","hash":"2661ad052f1bc224bb37a3bdcc48db3caddfa4f9","modified":1626699811696},{"_id":"source/_posts/alterable-vs-permanent.md","hash":"eabae0c31231edc870b3a7a2cb0e5e2b07a784bb","modified":1626699811696},{"_id":"source/_posts/common-ground-of-mse-and-cee-in-nn.md","hash":"49be8210766564efa21a4943cf3ed6c27cf391c5","modified":1626699811696},{"_id":"source/_posts/compare-between-PCA-and-LFM.md","hash":"9fc369ce6dcbee1c3277392a2a44b53168cc878e","modified":1626699811696},{"_id":"source/_posts/discriminative-or-generative-model.md","hash":"d46e0751660e31f94e5471485fef2b0512f72395","modified":1626699811696},{"_id":"source/_posts/from-boost-to-Adaboost-to-GBT.md","hash":"b5eed46a2eac5907759b948534af50b227c0ed77","modified":1626699811697},{"_id":"source/_posts/init-blog.md","hash":"a601cdb073a44c5a819e5e9670641223ff4c07cd","modified":1626699811697},{"_id":"source/_posts/kmeans-is-a-gmm.md","hash":"badb8938705da8a504e13bbcebdc24cc25db6367","modified":1626699811697},{"_id":"source/_posts/norm-regularization-01.md","hash":"568be0ec8bcc3a353a03eeb1b9d2e09182c74d4c","modified":1626699811697},{"_id":"source/_posts/baby-gc.md","hash":"9b4868378ccafd9c6e5da48f88543014af696bc3","modified":1626791353794},{"_id":"source/_posts/norm-regularization-appendix.md","hash":"d5e2422500ffdf93bec04b4e55169a173ab60637","modified":1626699811697},{"_id":"source/_posts/about-kernel-02.md","hash":"fc0685b7b1bb5ca11efa1208387b3490e7bf20eb","modified":1626871199772},{"_id":"source/_posts/rating-model-considering-user-count.md","hash":"d6bc256e093c6f25312ff67d0e3821e3efaa0e30","modified":1626699811698},{"_id":"source/_posts/statistical-formulars-for-programmers.md","hash":"dbb6411bf38d79a79fffc99eeeae1474a94098db","modified":1626699811698},{"_id":"source/_posts/thinking-from-softmax-01.md","hash":"a29c7daef5bc9d2fba01ce29e79347d3713d008f","modified":1626699811698},{"_id":"source/_posts/norm-regularization-02.md","hash":"1a5c45319762c05f6feef23f6a4d03463f2534f3","modified":1626793654647},{"_id":"source/_posts/thinking-from-softmax-03.md","hash":"eb3cde57768cb935b36ac3b32dee386d5d7fdc81","modified":1626699811699},{"_id":"source/_posts/thinking-from-softmax-02.md","hash":"3794abddf3e8846af140b3f48da3d19058c69174","modified":1626871157075},{"_id":"source/tags/index.md","hash":"2cf9b26cbef3a6bbdf6a70647fe3974a83615d82","modified":1626699811699},{"_id":"source/categories/index.md","hash":"e0146dd9fb3b393359217a035341b8f26423420a","modified":1626699811699},{"_id":"source/images/linear_space.eddx","hash":"8910cfe98f066b604fbbb11ddc2b972c17164796","modified":1626699811699},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1626788335818},{"_id":"source/uploads/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1626700446399},{"_id":"source/uploads/me.jpeg","hash":"38ab8de612b4c83a8be656af7ca2b87b670c4c57","modified":1610246127375},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1626699811722},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1626699811722},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1626699811721},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1626699811727},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1626699811738},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1626699811739},{"_id":"themes/next/layout/index.swig","hash":"c3762a6028d8ca79f9a07e9520ef9c612e7e193c","modified":1626699811739},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1626699811739},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1626699811739},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1626699811739},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1626699811740},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1626699811740},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1626699811740},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1626699811725},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1626699811725},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1626699811725},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1626699811725},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1626699811726},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1626699811725},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1626699811726},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1626699811726},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1626699811726},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1626699811726},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1626699811726},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1626699811726},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1626699811726},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1626699811795},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1626699811796},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1626699811796},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626699811762},{"_id":"source/_posts/about-kernel-02/linear_space.png","hash":"3fba384aa3bb9b905e3e70d11013dc4a0cfeb0a9","modified":1626699811696},{"_id":"source/_posts/thinking-from-softmax-02/subgradient.png","hash":"62fddffc69ca5fb2184acbbf60771a666e5e8514","modified":1626699811698},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1626699811727},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1626699811727},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1626699811728},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1626699811727},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1626699811727},{"_id":"themes/next/layout/_partials/footer.swig","hash":"51d1dd1258e0525da5d846f7827e5ae942d02ab3","modified":1626699811728},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1626699811728},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1626699811728},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1626699811729},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"98962d59c744ea6b0bbac9be0b02033ed39964aa","modified":1626699811728},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1626699811729},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1626699811729},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1626699811729},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1626699811736},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1626699811736},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1626699811737},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1626699811736},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1626699811737},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1626699811737},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1626699811731},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1626699811727},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1626699811731},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1626699811727},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1626699811732},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1626699811741},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1626699811741},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1626699811741},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1626699811741},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1626699811742},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1626699811741},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1626699811742},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1626699811742},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1626699811742},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1626699811762},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1626699811762},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1626699811763},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1626699811763},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1626699811763},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1626699811763},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1626699811764},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1626699811764},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626699811764},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1626699811764},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1626699811764},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1626699811765},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1626699811764},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1626699811765},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1626699811765},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626699811732},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626699811732},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626699811756},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626699811756},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626699811757},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626699811761},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1626699811762},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"bd07518060a73795d1250d93a74186444b292a9f","modified":1626699811729},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1626699811729},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1626699811730},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1626699811730},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1626699811730},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1626699811730},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1626699811730},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1626699811730},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1638607850611},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1626699811731},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1626699811733},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1626699811733},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1626699811733},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1626699811733},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1626699811733},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1626699811734},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1626699811734},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1626699811733},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1626699811734},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1626699811735},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1626699811734},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1626699811735},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1626699811735},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1626699811735},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1626699811735},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1626699811736},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1626699811736},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1626699811738},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1626699811738},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1626699811738},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1626699811738},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1626699811731},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1626699811732},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1626699811732},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1626699811756},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1626699811756},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1626699811757},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1626699811756},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1626699811761},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1626699811761},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1626699811762},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1626699811762},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1626699811766},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1626699811766},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1626699811765},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1626699811765},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1626699811766},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1626699811767},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1626699811766},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1626699811766},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1626699811767},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1626699811767},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1626699811774},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1626699811767},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1626699811771},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1626699811778},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1626699811774},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1626699811777},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1626699811778},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1626699811777},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1626699811779},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1626699811779},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1626699811779},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1626699811779},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1626699811779},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1626699811784},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1626699811786},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1626699811786},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1626699811785},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1626699811786},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1626699811786},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1626699811786},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1626699811787},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1626699811787},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1626699811787},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1626699811787},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1626699811787},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1626699811787},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1626699811787},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1626699811788},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1626699811788},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1626699811788},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1626699811788},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1626699811788},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1626699811789},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1626699811788},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1626699811789},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1626699811789},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1626699811789},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1626699811793},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1626699811793},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1626699811795},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1626699811795},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1626699811795},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1626699811785},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1626699811737},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1626699811737},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1626699811743},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1626699811743},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1626699811743},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1626699811743},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1626699811743},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1626699811746},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1626699811754},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1626699811755},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1626699811755},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1626699811751},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1626699811755},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1626699811755},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1626699811755},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1626699811756},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1626699811757},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1626699811758},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1626699811757},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1626699811758},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1626699811758},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1626699811758},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1626699811758},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1626699811758},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1626699811760},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1626699811760},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1626699811760},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1626699811761},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1626699811759},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1626699811761},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1626699811761},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1626699811759},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1626699811759},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1626699811759},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1626699811760},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1626699811767},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1626699811774},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1626699811774},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1626699811775},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1626699811775},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1626699811775},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1626699811775},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1626699811777},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1626699811777},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1626699811777},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1626699811769},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1626699811778},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1626699811778},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1626699811770},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1626699811771},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1626699811780},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1626699811780},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1626699811780},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1626699811793},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1626699811793},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1626699811770},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1626699811784},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1626699811784},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1626699811744},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1626699811744},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1626699811744},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1626699811744},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1626699811745},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1626699811744},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1626699811746},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1626699811746},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1626699811745},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1626699811745},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1626699811746},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1626699811745},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1626699811745},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1626699811745},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1626699811746},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1626699811747},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1626699811746},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1626699811747},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1626699811747},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1626699811747},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1626699811748},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1626699811747},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1626699811747},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1626699811747},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1626699811748},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1626699811748},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1626699811748},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1626699811748},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1626699811748},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1626699811749},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1626699811749},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1626699811749},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1626699811749},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1626699811750},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1626699811750},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1626699811750},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1626699811750},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1626699811750},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1626699811750},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1626699811751},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1626699811751},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1626699811751},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1626699811750},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1626699811752},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1626699811752},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1626699811752},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1626699811752},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1626699811752},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1626699811752},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1626699811753},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1626699811753},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1626699811753},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1626699811753},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1626699811754},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1626699811754},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1626699811754},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1626699811754},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1626699811759},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1626699811759},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1626699811760},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1626699811776},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1626699811776},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1626699811776},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1626699811776},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1626699811768},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1626699811776},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1626699811776},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1626699811768},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1626699811769},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1626699811769},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1626699811780},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1626699811794},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1626699811781},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1626699811783},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1626699811773},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1626699811792},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1626699811782},{"_id":"public/baidusitemap.xml","hash":"0544658f64dde790b72d9e80e748a95dd411dcd6","modified":1638607877001},{"_id":"public/search.xml","hash":"436a85059384c143e18ca450d375ea9cdf023fcf","modified":1638607877004},{"_id":"public/sitemap.xml","hash":"f8d35988432c28a160a038817c4307e84f16c2d1","modified":1638607877005},{"_id":"public/tags/index.html","hash":"9c4c4d5496065799dcaeb315b7768c3285db616b","modified":1638608719118},{"_id":"public/categories/index.html","hash":"9436f48b50f1776d4498c4555bfe583494765754","modified":1638608719118},{"_id":"public/2021/07/20/baby-gc/index.html","hash":"1241c27fafda47d9b33ea159e40649d939ac1f71","modified":1638608719118},{"_id":"public/2020/01/12/alterable-vs-permanent/index.html","hash":"bc64b02dfc04093e27b2b9608ff59b656acfdd7a","modified":1638608719118},{"_id":"public/2019/09/10/5-steps-for-asking-good-questions/index.html","hash":"cedd7042f80d1691fb42444d7374b02f8fd72e45","modified":1638608719118},{"_id":"public/2017/12/27/rating-model-considering-user-count/index.html","hash":"168180b781b6e91cbf50285a3f0b925f1ac6ce71","modified":1638608719118},{"_id":"public/2018/02/04/discriminative-or-generative-model/index.html","hash":"0b10eedb25b82af37d4cf26ea2fc838b4245767a","modified":1638608719118},{"_id":"public/2017/12/23/GD-Series/index.html","hash":"60409b5541c0f89ed922796a22eda14bbd47b4d9","modified":1638608719119},{"_id":"public/2017/12/03/common-ground-of-mse-and-cee-in-nn/index.html","hash":"4853e0ef7788bab126b6bf4848f65c08c367975e","modified":1638608719119},{"_id":"public/2017/11/04/GAN-02/index.html","hash":"f44ce8c24354797dad0c930d3a64c3fe21d7f55e","modified":1638608719119},{"_id":"public/2017/11/01/GAN-01/index.html","hash":"afe85e4f966333f19f1a099cc8b3b0dcf5b39ac0","modified":1638608719119},{"_id":"public/2017/10/12/statistical-formulars-for-programmers/index.html","hash":"90df1e82a42c84f228dd57ce4086611cd808fdb8","modified":1638608719119},{"_id":"public/2017/10/15/from-boost-to-Adaboost-to-GBT/index.html","hash":"642996adbf9faee8f922c4627fdca9fce14450be","modified":1638608719119},{"_id":"public/2017/10/23/kmeans-is-a-gmm/index.html","hash":"ccf303e9d7b76a339f1967f11e9c9ea8073e0181","modified":1638608719119},{"_id":"public/2017/09/09/norm-regularization-02/index.html","hash":"73d8ad560eacb5189ab1220e52e09da149a74de5","modified":1638608719119},{"_id":"public/2017/09/13/norm-regularization-appendix/index.html","hash":"e4c65ae5bba56bd746404fe9e9c6961d6e80437e","modified":1638608719119},{"_id":"public/2017/09/07/norm-regularization-01/index.html","hash":"83ef88eda3f76c9d19920206578afb6ba8d89cd2","modified":1638608719119},{"_id":"public/2017/08/13/about-kernel-02/index.html","hash":"4f065289fd7d638ec653f84c4affd98f080734c3","modified":1638608719120},{"_id":"public/2017/08/13/about-kernel-01/index.html","hash":"30ba9ec5ce9ae2421e259eac9b5f5646e4538492","modified":1638608719120},{"_id":"public/2017/08/10/thinking-from-softmax-02/index.html","hash":"7b48b67d8cfbe68580b1cc6674391ca547d2f4da","modified":1638608719120},{"_id":"public/2017/08/11/thinking-from-softmax-03/index.html","hash":"ecc2d538f1255e2faab6b8ad509be9b2f6460c9b","modified":1638608719120},{"_id":"public/categories/Life/index.html","hash":"bfd6fccd14a122990917362d037c195958c8ad5b","modified":1638608719125},{"_id":"public/2017/08/08/compare-between-PCA-and-LFM/index.html","hash":"159870938cb3b7afc8127e2553a236f4cd4a67e4","modified":1638608719120},{"_id":"public/2017/08/10/thinking-from-softmax-01/index.html","hash":"56acea9408d7db14535778b01f3a9ddd0560b822","modified":1638608719120},{"_id":"public/2017/08/07/init-blog/index.html","hash":"0922a42bafa85734dc6559d6bc38cd31a52bbc62","modified":1638608719120},{"_id":"public/categories/ML/index.html","hash":"9a2f92cfcf45b06e2d39290405779d0ec3396963","modified":1638608719125},{"_id":"public/categories/Mathematics/index.html","hash":"3aef56d54e716e4edebf50e6cef309ecf0967261","modified":1638608719126},{"_id":"public/archives/index.html","hash":"2347e1d62f4c50e5e5b80175c42de51a0138575d","modified":1638608719121},{"_id":"public/categories/Develop/index.html","hash":"1013eea672b7a06f0d82c27c923a34942e794fb0","modified":1638608719126},{"_id":"public/categories/ML/page/2/index.html","hash":"957b8fe3c1fee75e5ee478a8e8f68cb2c2a6f901","modified":1638608719125},{"_id":"public/archives/page/3/index.html","hash":"ae34b7065d3e579e1ea6a55a300a0924bd8c6d00","modified":1638608719121},{"_id":"public/archives/page/2/index.html","hash":"01e75babf9298313f2bcba122f6152a3ef320342","modified":1638608719120},{"_id":"public/archives/2017/index.html","hash":"422fb12569726975ad49e2024bf2c12517a3a645","modified":1638608719120},{"_id":"public/archives/2017/page/2/index.html","hash":"422b30aca20d96abfb19b7c10b3e506e11d1d5e1","modified":1638608719120},{"_id":"public/archives/2017/09/index.html","hash":"7baee6d20c411cb8be6682eb176920b907c0ccfd","modified":1638608719121},{"_id":"public/archives/2017/08/index.html","hash":"42c71db06b855023be9267324c8c5eb9edb4d2ae","modified":1638608719121},{"_id":"public/archives/2017/10/index.html","hash":"c3858b8d35621214f6b1d43b44bc8adf626daaa8","modified":1638608719121},{"_id":"public/archives/2017/11/index.html","hash":"14df0d222f33e5a844fcee1f35d87716c8d004ea","modified":1638608719121},{"_id":"public/archives/2018/index.html","hash":"bef2d76843204ebd7abf281a8e1dbf2ba7418a0c","modified":1638608719121},{"_id":"public/archives/2017/12/index.html","hash":"0bc4011519738aedb43a584540608a2d5619328a","modified":1638608719121},{"_id":"public/archives/2019/index.html","hash":"21b904d5bb235f7bd8e74cf7eace3e11bddbf3dd","modified":1638608719121},{"_id":"public/archives/2018/02/index.html","hash":"58855649ebd6bab57646abcfb9f30a3280d0697e","modified":1638608719121},{"_id":"public/archives/2020/index.html","hash":"1659dc5027e55ff683047a34979dbfa1e0148aa6","modified":1638608719122},{"_id":"public/archives/2020/01/index.html","hash":"eaf6cd610e018a6b630d34b7c31fc4f980c4dd19","modified":1638608719122},{"_id":"public/archives/2019/09/index.html","hash":"46ebc75fdd767b116ee0c309e2f4f41a93cf0a9d","modified":1638608719121},{"_id":"public/archives/2021/index.html","hash":"8f02ae9502f5988a4a462c06d211ca2a6577dcd5","modified":1638608719122},{"_id":"public/index.html","hash":"edc28cc78049093c5712e324b09ad1ef84b26710","modified":1638608719122},{"_id":"public/archives/2021/07/index.html","hash":"f6796a0f3762a4ac1c8d667749486319245bd7e3","modified":1638608719122},{"_id":"public/page/2/index.html","hash":"9e59ee20ceb061439ab62d7680a2d64c9a247ed3","modified":1638608719122},{"_id":"public/tags/Tips/index.html","hash":"800b47b1fccb650cdc57aee8fff159bba3d34441","modified":1638608719123},{"_id":"public/page/3/index.html","hash":"a1e967a2f1a872c91d2d70c06faf383c6a8ff1b9","modified":1638608719122},{"_id":"public/tags/Deep-learning/index.html","hash":"0d57b5f33240dcadedfd9ab52ff96ac1142f53fc","modified":1638608719123},{"_id":"public/tags/GAN/index.html","hash":"bbb6f4616befa5bb505a6079fa2cc1b1e59669da","modified":1638608719123},{"_id":"public/tags/GD/index.html","hash":"09a3d257f154efc0778093fff3fcfe03718241c3","modified":1638608719123},{"_id":"public/tags/SVM/index.html","hash":"026803d33124f880ca44726e030f63939a4c3fab","modified":1638608719123},{"_id":"public/tags/Kernel/index.html","hash":"e801087148b024de443bc9822ea208a69cd8b267","modified":1638608719123},{"_id":"public/tags/Momentum/index.html","hash":"274fd5282256f5d4968c561785b7505aa8efc109","modified":1638608719123},{"_id":"public/tags/RKHS/index.html","hash":"fa69e8441866ba4eeb5fb88652d3cbb94f562885","modified":1638608719123},{"_id":"public/tags/Loss-function/index.html","hash":"573a0e5c566c9497a63b33a444b789df1ee03c5a","modified":1638608719123},{"_id":"public/tags/PCA/index.html","hash":"4e77eb7c9bfb02711c78b394b4a00e4885ccbc71","modified":1638608719124},{"_id":"public/tags/Generative-model/index.html","hash":"362f1bbc7635023bc6d9de3b988fc2b2ed577793","modified":1638608719124},{"_id":"public/tags/LFM/index.html","hash":"31bd2efecd6c2f761035913f939a3da285715daf","modified":1638608719124},{"_id":"public/tags/Discriminative-model/index.html","hash":"0d169f59a9cc364243abc1185b7ace60051e4512","modified":1638608719124},{"_id":"public/tags/Boost/index.html","hash":"225a055455718c967b5fe7737c97cf370a8cab06","modified":1638608719124},{"_id":"public/tags/Ensemble/index.html","hash":"59afdce7ec0440658bf6bc7491684ff6ebb6e492","modified":1638608719124},{"_id":"public/tags/GBDT-GBRT/index.html","hash":"cda916e36e6b5fcb47f2bbca7777ef68cab00dcc","modified":1638608719124},{"_id":"public/tags/GMM/index.html","hash":"93ff4c2b1953bc939ee552b6d6eadbaeab5f85f2","modified":1638608719124},{"_id":"public/tags/EM-Algorithm/index.html","hash":"3c6bccb9f45fce7fb1ad28659f71a19d0edf99a8","modified":1638608719124},{"_id":"public/tags/Norm-regularization/index.html","hash":"d8b3eb877ce132fc3e237e253f5fdcc6e831a26b","modified":1638608719124},{"_id":"public/tags/GC/index.html","hash":"574cde346816c9841ebed9231ae95c957a92efa9","modified":1638608719125},{"_id":"public/tags/K-means/index.html","hash":"5681c97f5a2bd4513780e68d782054611b23a0ac","modified":1638608719124},{"_id":"public/tags/Matrix-theory/index.html","hash":"c16814d860bf736ed7ee934f245e467af15978ce","modified":1638608719125},{"_id":"public/tags/Convex-optimization/index.html","hash":"ba9224a8c1982c33b6a55fd5ed81c502814d79f0","modified":1638608719124},{"_id":"public/tags/Functional-analysis/index.html","hash":"ae4dfdc96776a949799ea7108ca93b8942d858cc","modified":1638608719125},{"_id":"public/tags/Generalized-Linear-Model/index.html","hash":"3e7cb71bca261fd583b3de58c2b2ef85cbd8b9d5","modified":1638608719125},{"_id":"public/tags/Exponential-family-distribution/index.html","hash":"f29ec8b9dea51224d61675e603ed7b947a25fc36","modified":1638608719125},{"_id":"public/tags/Rating/index.html","hash":"3b750c3a8d17c7edb465b7cdef64127863962d5d","modified":1638608719125},{"_id":"public/tags/Statistics/index.html","hash":"8e2c04364f22b7dd81a6331d6b3a05f18357f935","modified":1638608719125},{"_id":"public/tags/Softmax/index.html","hash":"e266c260979d3b48877a6e66aff1115f3ad3c6da","modified":1638608719125},{"_id":"public/tags/Activation-function/index.html","hash":"1151a83038ba0f123d71753f840601209bb331f6","modified":1638608719125},{"_id":"public/tags/Logistic/index.html","hash":"2b0a9a50c29e363a31980706b37de15b265cc968","modified":1638608719125},{"_id":"public/tags/Gradient/index.html","hash":"4eb69ed2bccf429e85f238a4d3231f0fe6258162","modified":1638608719125},{"_id":"public/tags/Subgradient/index.html","hash":"a1783496ebda807f38d41d9637fc29ae11fe0ccd","modified":1638608719125},{"_id":"public/baidu_verify_aX3upgcPux.html","hash":"344502cc0cb9646f0643ff932d5c7adb1438cd5f","modified":1638607877222},{"_id":"public/README.md","hash":"876c607060f4a864761fd1d8cc982edba012f251","modified":1638607877222},{"_id":"public/CNAME","hash":"685ff10641d5fffd71eec3979dab6fd0f10c9ea7","modified":1638607877222},{"_id":"public/robots.txt","hash":"7858025995a22727d626cdda854f061df5ba8fb9","modified":1638607877223},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1638607877223},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1638607877223},{"_id":"public/images/linear_space.eddx","hash":"8910cfe98f066b604fbbb11ddc2b972c17164796","modified":1638607877223},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1638607877223},{"_id":"public/uploads/me.jpeg","hash":"38ab8de612b4c83a8be656af7ca2b87b670c4c57","modified":1638607877223},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1638607877223},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1638607877223},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1638607877223},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1638607877223},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1638607877223},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1638607877223},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1638607877224},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1638607877224},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1638607877224},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1638607877224},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1638607877224},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1638607877224},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1638607877224},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1638607877224},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1638607877224},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1638607877224},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1638607877224},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1638607877224},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1638607877224},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1638607877224},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1638607877224},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1638607877225},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1638607877225},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1638607877225},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1638607877225},{"_id":"public/2017/08/13/about-kernel-02/linear_space.png","hash":"3fba384aa3bb9b905e3e70d11013dc4a0cfeb0a9","modified":1638607877225},{"_id":"public/2017/08/10/thinking-from-softmax-02/subgradient.png","hash":"62fddffc69ca5fb2184acbbf60771a666e5e8514","modified":1638607877225},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1638607877665},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1638607877665},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1638607877668},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1638607877668},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1638607877668},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1638607877668},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1638607877668},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1638607877668},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1638607877668},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1638607877668},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1638607877668},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1638607877668},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1638607877668},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1638607877668},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1638607877668},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1638607877669},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1638607877669},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1638607877669},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1638607877669},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1638607877669},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1638607877669},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1638607877670},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1638607877670},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1638607877670},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1638607877670},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1638607877670},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1638607877670},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1638607877670},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1638607877670},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1638607877670},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1638607877670},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1638607877670},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1638607877670},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1638607877671},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1638607877671},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1638607877671},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1638607877671},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1638607877671},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1638607877671},{"_id":"public/lib/fastclick/README.html","hash":"d6e90449a2c09f3033f7e43d68b0cc8208e22e09","modified":1638607877671},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a08fccd381c8fdb70ba8974b208254c5ba23a95f","modified":1638607877672},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"06811ca2f722dead021493457f27cdc264ef928d","modified":1638607877672},{"_id":"public/css/main.css","hash":"db546f069d3f97dfd2005ee383eedee7a49d7d13","modified":1638607877672},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1638607877672},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1638607877672},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1638607877672},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1638607877672},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1638607877672},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1638607877672},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1638607877672},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1638607877672},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1638607877672},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1638607877673},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1638607877673},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1638607877673},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1638607877673},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1638607877673},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1638607877673},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1638607877673},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1638607877674},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1638607877674},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1638607877674},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1638607877674},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1638607877779},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1638607878071}],"Category":[{"name":"Life","_id":"ckwrktiyx000oqxt67y30h1ok"},{"name":"ML","_id":"ckwrktiz4000qqxt6lt5mcuhc"},{"name":"Develop","_id":"ckwrktizc001eqxt6kmyi94x1"},{"name":"Mathematics","_id":"ckwrktize001nqxt6j88gtts3"}],"Data":[],"Page":[{"title":"标签","date":"2017-08-07T14:12:32.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-08-07 22:12:32\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-07-19T13:03:31.699Z","path":"tags/index.html","layout":"page","_id":"ckwrktiv20000qxt6ghykemn7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-08-07T14:13:45.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-08-07 22:13:45\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-07-19T13:03:31.699Z","path":"categories/index.html","layout":"page","_id":"ckwrktiv60002qxt6ki8vqqf3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"提出好问题的 5 个步骤","date":"2019-09-10T12:05:04.000Z","description":"提出好问题的 5 个步骤，以及一些引导性的问题。","_content":"\n学会提出好的问题与提高自主学习的能力息息相关。而在此之前，我们要明白一件事情，那就是在多数情况下，期待被提问者能够自主明白提问者的想法是非常不切实际的幻想。因此提问的方式需要提问者依靠自身的认知进行思考并改良。\n\n以下就有 5 个步骤帮助你审视自己即将要提出的问题。（每个步骤均含有一些指导性问题可以帮助提问者考虑如何提出好问题。）\n\n1. **重点：**我想知道什么特定信息？我丢失了什么信息？这个问题能比只停留在回答“是或否”的问题得到更多信息吗？此问题会将我引导至更深的知识领域吗？\n2. **目的：**我为什么要问这个？我想收集事实还是见解？我需要做简单的解释吗？我想提供一个不同的观点吗？\n3. **意图：**我希望让别人如何回答我？我是否希望答案同样对他人有所帮助？我问这个问题是希望开始一场辩论还是一次讨论？问题是不是肤浅的，而不是真的有用或重要吗？我是出于沮丧还是出于好奇心才问这个问题的？我真的关心答案是什么吗？我是否愿意对询问的对象表示尊敬或尊重？\n4. **表达：**我是否使用了易于理解的术语和措辞？我的问题是中立的，还是包含见解或偏见？我的问题是否太长或太短？我的问题是否包含了我想知道的重点？我的问题是否一次只专注一件事？我的问题是否与其它毫无关系的提问有所混淆？\n5. **补充：**我还有更具体的问题要补充吗？如果有需要，我所询问的人是否能解决我的其它问题？如果我依然没有得到我需要的答案，接下来该怎么做？如果我仍然不明白，接下来该怎么做？\n\n最后，记得不要打断对方，记得尊重对方的时间、意愿和思想。\n\n","source":"_posts/5-steps-for-asking-good-questions.md","raw":"---\ntitle: 提出好问题的 5 个步骤\ndate: 2019-09-10 20:05:04\ncategories: Life\ntags:\n- Tips\ndescription: 提出好问题的 5 个步骤，以及一些引导性的问题。\n---\n\n学会提出好的问题与提高自主学习的能力息息相关。而在此之前，我们要明白一件事情，那就是在多数情况下，期待被提问者能够自主明白提问者的想法是非常不切实际的幻想。因此提问的方式需要提问者依靠自身的认知进行思考并改良。\n\n以下就有 5 个步骤帮助你审视自己即将要提出的问题。（每个步骤均含有一些指导性问题可以帮助提问者考虑如何提出好问题。）\n\n1. **重点：**我想知道什么特定信息？我丢失了什么信息？这个问题能比只停留在回答“是或否”的问题得到更多信息吗？此问题会将我引导至更深的知识领域吗？\n2. **目的：**我为什么要问这个？我想收集事实还是见解？我需要做简单的解释吗？我想提供一个不同的观点吗？\n3. **意图：**我希望让别人如何回答我？我是否希望答案同样对他人有所帮助？我问这个问题是希望开始一场辩论还是一次讨论？问题是不是肤浅的，而不是真的有用或重要吗？我是出于沮丧还是出于好奇心才问这个问题的？我真的关心答案是什么吗？我是否愿意对询问的对象表示尊敬或尊重？\n4. **表达：**我是否使用了易于理解的术语和措辞？我的问题是中立的，还是包含见解或偏见？我的问题是否太长或太短？我的问题是否包含了我想知道的重点？我的问题是否一次只专注一件事？我的问题是否与其它毫无关系的提问有所混淆？\n5. **补充：**我还有更具体的问题要补充吗？如果有需要，我所询问的人是否能解决我的其它问题？如果我依然没有得到我需要的答案，接下来该怎么做？如果我仍然不明白，接下来该怎么做？\n\n最后，记得不要打断对方，记得尊重对方的时间、意愿和思想。\n\n","slug":"5-steps-for-asking-good-questions","published":1,"updated":"2021-07-19T13:03:31.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktiv30001qxt6wl19k31f","content":"<p>学会提出好的问题与提高自主学习的能力息息相关。而在此之前，我们要明白一件事情，那就是在多数情况下，期待被提问者能够自主明白提问者的想法是非常不切实际的幻想。因此提问的方式需要提问者依靠自身的认知进行思考并改良。</p>\n<p>以下就有 5 个步骤帮助你审视自己即将要提出的问题。（每个步骤均含有一些指导性问题可以帮助提问者考虑如何提出好问题。）</p>\n<ol>\n<li><strong>重点：</strong>我想知道什么特定信息？我丢失了什么信息？这个问题能比只停留在回答“是或否”的问题得到更多信息吗？此问题会将我引导至更深的知识领域吗？</li>\n<li><strong>目的：</strong>我为什么要问这个？我想收集事实还是见解？我需要做简单的解释吗？我想提供一个不同的观点吗？</li>\n<li><strong>意图：</strong>我希望让别人如何回答我？我是否希望答案同样对他人有所帮助？我问这个问题是希望开始一场辩论还是一次讨论？问题是不是肤浅的，而不是真的有用或重要吗？我是出于沮丧还是出于好奇心才问这个问题的？我真的关心答案是什么吗？我是否愿意对询问的对象表示尊敬或尊重？</li>\n<li><strong>表达：</strong>我是否使用了易于理解的术语和措辞？我的问题是中立的，还是包含见解或偏见？我的问题是否太长或太短？我的问题是否包含了我想知道的重点？我的问题是否一次只专注一件事？我的问题是否与其它毫无关系的提问有所混淆？</li>\n<li><strong>补充：</strong>我还有更具体的问题要补充吗？如果有需要，我所询问的人是否能解决我的其它问题？如果我依然没有得到我需要的答案，接下来该怎么做？如果我仍然不明白，接下来该怎么做？</li>\n</ol>\n<p>最后，记得不要打断对方，记得尊重对方的时间、意愿和思想。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>学会提出好的问题与提高自主学习的能力息息相关。而在此之前，我们要明白一件事情，那就是在多数情况下，期待被提问者能够自主明白提问者的想法是非常不切实际的幻想。因此提问的方式需要提问者依靠自身的认知进行思考并改良。</p>\n<p>以下就有 5 个步骤帮助你审视自己即将要提出的问题。（每个步骤均含有一些指导性问题可以帮助提问者考虑如何提出好问题。）</p>\n<ol>\n<li><strong>重点：</strong>我想知道什么特定信息？我丢失了什么信息？这个问题能比只停留在回答“是或否”的问题得到更多信息吗？此问题会将我引导至更深的知识领域吗？</li>\n<li><strong>目的：</strong>我为什么要问这个？我想收集事实还是见解？我需要做简单的解释吗？我想提供一个不同的观点吗？</li>\n<li><strong>意图：</strong>我希望让别人如何回答我？我是否希望答案同样对他人有所帮助？我问这个问题是希望开始一场辩论还是一次讨论？问题是不是肤浅的，而不是真的有用或重要吗？我是出于沮丧还是出于好奇心才问这个问题的？我真的关心答案是什么吗？我是否愿意对询问的对象表示尊敬或尊重？</li>\n<li><strong>表达：</strong>我是否使用了易于理解的术语和措辞？我的问题是中立的，还是包含见解或偏见？我的问题是否太长或太短？我的问题是否包含了我想知道的重点？我的问题是否一次只专注一件事？我的问题是否与其它毫无关系的提问有所混淆？</li>\n<li><strong>补充：</strong>我还有更具体的问题要补充吗？如果有需要，我所询问的人是否能解决我的其它问题？如果我依然没有得到我需要的答案，接下来该怎么做？如果我仍然不明白，接下来该怎么做？</li>\n</ol>\n<p>最后，记得不要打断对方，记得尊重对方的时间、意愿和思想。</p>\n"},{"title":"生成对抗网络（一）—— GAN 原理简述及一个 TensorFlow 示例","date":"2017-11-01T08:09:01.000Z","description":"对比较火爆的生成对抗网络（GAN）进行了简介，并提供了一个 TensorFlow 示例。","_content":"\n# 生成对抗网络（GAN）的基本概念\n\n2014年 Goodfellow 等人提出了一个**生成对抗网络（GAN）**的概念后一直火爆至今，相比于其它生成模型，它有以下几个优点：\n\n- 模型只用到了反向传播，而不需要马尔科夫链。\n- 训练时不需要对隐变量做推断。\n- 理论上，只要是可微分函数都可以用于构建 D（判别模型）和 G（生成模型），因为能够与深度神经网络结合做深度生成式模型。\n- G 的参数更新不是直接来自数据样本，而是使用来自 D 的反向传播。\n\n它的主要思想来源于博弈论中的零和游戏。简单描述起来就是我们有一些真实的数据，也有一些随机生成的假数据。G 负责把这些数据拿过来拼命地模仿成真实数据并把它们藏在真实数据中，而 D 就拼命地要把伪造数据和真实数据分开。经过二者的博弈以后，G 的伪造技术越来越厉害，D 的鉴别技术也越来越厉害。直到 D 再也分不出数据是真实的还是 G 生成的数据的时候（D 判断正确的概率为 $1/2$ ，即随机猜测），我们就达到了目的。此时 G 可以用来模仿生成所谓的“真实数据”了。\n\n为了学习到生成器在数据 $x$ 生的分布 $p_g(x)$ ，我们先定义一个先验的输入噪声变量 $p_z(z)$ ，然后根据 $G(z;\\theta_g)$ 将其映射到数据空间中，其中 $G$ 为多层感知机所表征的可微函数。然后利用第二个多层感知机 $D(x;\\theta_d)$ ，它的输出为单个标量，表示 $x$ 来源于真实数据的概率。我们训练 $D$ 来最大化正确分配真实样本和生成样本的概率，因此我们就可以通过最小化 $\\log (1-D(G(z)))$ （G 生成的数据被分错的损失函数）而同时训练 $G$ 。即：\n$$\n\\min_G \\max_D V(D,G) = \\mathbb{E}_{x \\sim p_{\\text{data}}(x)}[\\log D(x)] + \\mathbb{E}_{z \\sim p_{z}(z)}[\\log (1-D(G(z)))]\n$$\n\n# 最优判别器\n\n考虑到\n$$\n\\mathbb{E}_{z \\sim p_{z}(z)}[\\log (1-D(G(z)))] = \\mathbb{E}_{x \\sim p_{g}(x)}[\\log (1-D(x)]\n$$\n我们可以将价值函数 $V(D,G)$ 展开为在全体 $x$ 上的积分形式\n$$\nV(G, D) = \\int_{x} p_{\\text{data}}(x) \\log (D(x)) + p_g(x) \\log (1-D(x)) \\, dx\n$$\n因为求积分最大值可以转化为求被积函数最大值，且 $p_{\\text{data}}(x)$ 和 $p_g(x)$ 均为标量，因此我们讨论如下形式的式子的最大值：\n$$\nf(y) = a \\log y + b \\log (1-y)\n$$\n考虑到\n$$\nf'(y) = 0 \\Rightarrow \\frac{a}{y}-\\frac{b}{1-y}=0 \\Rightarrow y=\\frac{a}{a+b}\n$$\n且\n$$\nf''(y) \\Big|_{y=\\frac{a}{a+b}} = -\\frac{a}{\\left( \\frac{a}{a+b} \\right)^{2}}-\\frac{b}{1-\\left( \\frac{a}{a+b} \\right)^{2}}<0\n$$\n我们得到极大值在 $\\frac{a}{a+b}$ 处取到，令 $a=p_{\\text{data}}(x), b=p_g(x), y=D(x)$ ，则容易对比出最优判别器\n$$\nD(x) = \\frac{p_{\\text{data}}(x)}{p_{\\text{data}}(x) + p_g(x)}\n$$\n\n# 最优生成器\n\n显然，GAN 的目的是让 $p_{\\text{data}}=p_g$ 。此时判别器已经完全分辨不出真实数据和生成数据的区别了。即\n$$\nD_G^{\\ast}=\\frac{p_{\\text{data}}(x)}{p_{\\text{data}}(x) + p_g(x)}=\\frac{1}{2}\n$$\nGoodfellow 等人证明，这个最优生成器就是上面那个 min max 的式子。\n\n# 一个 TensorFlow 示例（基于 MNIST 数据库）\n\n简单起见，没有用 CNN。主要是展示 G 与 D 的博弈过程。\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.examples.tutorials.mnist import input_data\n# from PIL import Image\n\nmnist = input_data.read_data_sets(\"MNIST_data/\")\nimages = mnist.train.images\n\n\ndef xavier_initializer(shape):\n    return tf.random_normal(shape=shape, stddev=1.0 / shape[0])\n\n\n# Generator\nz_size = 100  # maybe larger\ng_w1_size = 400\ng_out_size = 28 * 28\n\n# Discriminator\nx_size = 28 * 28\nd_w1_size = 400\nd_out_size = 1\n\nz = tf.placeholder('float', shape=(None, z_size))\nX = tf.placeholder('float', shape=(None, x_size))\n\n# use dict to share variables\ng_weights = {\n    'w1': tf.Variable(xavier_initializer(shape=(z_size, g_w1_size))),\n    'b1': tf.Variable(tf.zeros(shape=[g_w1_size])),\n    'out': tf.Variable(xavier_initializer(shape=(g_w1_size, g_out_size))),\n    'b2': tf.Variable(tf.zeros(shape=[g_out_size])),\n}\n\nd_weights = {\n    'w1': tf.Variable(xavier_initializer(shape=(x_size, d_w1_size))),\n    'b1': tf.Variable(tf.zeros(shape=[d_w1_size])),\n    'out': tf.Variable(xavier_initializer(shape=(d_w1_size, d_out_size))),\n    'b2': tf.Variable(tf.zeros(shape=[d_out_size])),\n}\n\n\ndef G(z, w=g_weights):\n    # here tanh is better than relu\n    h1 = tf.tanh(tf.matmul(z, w['w1']) + w['b1'])\n    # pixel output is in range [0, 255]\n    return tf.sigmoid(tf.matmul(h1, w['out']) + w['b2']) * 255\n\n\ndef D(x, w=d_weights):\n    # here tanh is better than relu\n    h1 = tf.tanh(tf.matmul(x, w['w1']) + w['b1'])\n    h2 = tf.matmul(h1, w['out']) + w['b2']\n    return h2  # use h2 to calculate logits loss\n\n\ndef generate_z(n=1):\n    return np.random.normal(size=(n, z_size))\n\n\nsample = G(z)\n\ndout_real = D(X)\ndout_fake = D(G(z))\n\nG_obj = tf.reduce_mean(\n    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_fake, labels=tf.ones_like(dout_fake)))\nD_obj_real = tf.reduce_mean(  # use single side smoothing\n    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_real, labels=(tf.ones_like(dout_real) - 0.1)))\nD_obj_fake = tf.reduce_mean(\n    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_fake, labels=tf.zeros_like(dout_fake)))\nD_obj = D_obj_real + D_obj_fake\n\nG_opt = tf.train.AdamOptimizer().minimize(G_obj, var_list=g_weights.values())\nD_opt = tf.train.AdamOptimizer().minimize(D_obj, var_list=d_weights.values())\n\n# Training\nbatch_size = 128\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    for i in range(200):\n        sess.run(D_opt, feed_dict={\n            X: images[np.random.choice(range(len(images)), batch_size)].reshape(batch_size, x_size),\n            z: generate_z(batch_size),\n        })\n        # run two phases of generator\n        sess.run(G_opt, feed_dict={\n            z: generate_z(batch_size)\n        })\n        sess.run(G_opt, feed_dict={\n            z: generate_z(batch_size)\n        })\n\n        g_cost = sess.run(G_obj, feed_dict={z: generate_z(batch_size)})\n        d_cost = sess.run(D_obj, feed_dict={\n            X: images[np.random.choice(range(len(images)), batch_size)].reshape(batch_size, x_size),\n            z: generate_z(batch_size),\n        })\n        image = sess.run(G(z), feed_dict={z: generate_z()})\n        df = sess.run(tf.sigmoid(dout_fake), feed_dict={z: generate_z()})\n        # print i, G cost, D cost, image max pixel, D output of fake\n        print(i, g_cost, d_cost, image.max(), df[0][0])\n\n    # You may wish to save or plot the image generated\n    # to see how it looks like\n    image = sess.run(G(z), feed_dict={z: generate_z()})\n    image1 = image[0].reshape([28, 28])\n    # print(image1)\n    # im = Image.fromarray(image1)\n    # im.show()\n```\n\n","source":"_posts/GAN-01.md","raw":"---\ntitle: 生成对抗网络（一）—— GAN 原理简述及一个 TensorFlow 示例\ndate: 2017-11-01 16:09:01\ncategories: ML\ntags:\n     - Deep learning\n     - GAN\ndescription: 对比较火爆的生成对抗网络（GAN）进行了简介，并提供了一个 TensorFlow 示例。\n---\n\n# 生成对抗网络（GAN）的基本概念\n\n2014年 Goodfellow 等人提出了一个**生成对抗网络（GAN）**的概念后一直火爆至今，相比于其它生成模型，它有以下几个优点：\n\n- 模型只用到了反向传播，而不需要马尔科夫链。\n- 训练时不需要对隐变量做推断。\n- 理论上，只要是可微分函数都可以用于构建 D（判别模型）和 G（生成模型），因为能够与深度神经网络结合做深度生成式模型。\n- G 的参数更新不是直接来自数据样本，而是使用来自 D 的反向传播。\n\n它的主要思想来源于博弈论中的零和游戏。简单描述起来就是我们有一些真实的数据，也有一些随机生成的假数据。G 负责把这些数据拿过来拼命地模仿成真实数据并把它们藏在真实数据中，而 D 就拼命地要把伪造数据和真实数据分开。经过二者的博弈以后，G 的伪造技术越来越厉害，D 的鉴别技术也越来越厉害。直到 D 再也分不出数据是真实的还是 G 生成的数据的时候（D 判断正确的概率为 $1/2$ ，即随机猜测），我们就达到了目的。此时 G 可以用来模仿生成所谓的“真实数据”了。\n\n为了学习到生成器在数据 $x$ 生的分布 $p_g(x)$ ，我们先定义一个先验的输入噪声变量 $p_z(z)$ ，然后根据 $G(z;\\theta_g)$ 将其映射到数据空间中，其中 $G$ 为多层感知机所表征的可微函数。然后利用第二个多层感知机 $D(x;\\theta_d)$ ，它的输出为单个标量，表示 $x$ 来源于真实数据的概率。我们训练 $D$ 来最大化正确分配真实样本和生成样本的概率，因此我们就可以通过最小化 $\\log (1-D(G(z)))$ （G 生成的数据被分错的损失函数）而同时训练 $G$ 。即：\n$$\n\\min_G \\max_D V(D,G) = \\mathbb{E}_{x \\sim p_{\\text{data}}(x)}[\\log D(x)] + \\mathbb{E}_{z \\sim p_{z}(z)}[\\log (1-D(G(z)))]\n$$\n\n# 最优判别器\n\n考虑到\n$$\n\\mathbb{E}_{z \\sim p_{z}(z)}[\\log (1-D(G(z)))] = \\mathbb{E}_{x \\sim p_{g}(x)}[\\log (1-D(x)]\n$$\n我们可以将价值函数 $V(D,G)$ 展开为在全体 $x$ 上的积分形式\n$$\nV(G, D) = \\int_{x} p_{\\text{data}}(x) \\log (D(x)) + p_g(x) \\log (1-D(x)) \\, dx\n$$\n因为求积分最大值可以转化为求被积函数最大值，且 $p_{\\text{data}}(x)$ 和 $p_g(x)$ 均为标量，因此我们讨论如下形式的式子的最大值：\n$$\nf(y) = a \\log y + b \\log (1-y)\n$$\n考虑到\n$$\nf'(y) = 0 \\Rightarrow \\frac{a}{y}-\\frac{b}{1-y}=0 \\Rightarrow y=\\frac{a}{a+b}\n$$\n且\n$$\nf''(y) \\Big|_{y=\\frac{a}{a+b}} = -\\frac{a}{\\left( \\frac{a}{a+b} \\right)^{2}}-\\frac{b}{1-\\left( \\frac{a}{a+b} \\right)^{2}}<0\n$$\n我们得到极大值在 $\\frac{a}{a+b}$ 处取到，令 $a=p_{\\text{data}}(x), b=p_g(x), y=D(x)$ ，则容易对比出最优判别器\n$$\nD(x) = \\frac{p_{\\text{data}}(x)}{p_{\\text{data}}(x) + p_g(x)}\n$$\n\n# 最优生成器\n\n显然，GAN 的目的是让 $p_{\\text{data}}=p_g$ 。此时判别器已经完全分辨不出真实数据和生成数据的区别了。即\n$$\nD_G^{\\ast}=\\frac{p_{\\text{data}}(x)}{p_{\\text{data}}(x) + p_g(x)}=\\frac{1}{2}\n$$\nGoodfellow 等人证明，这个最优生成器就是上面那个 min max 的式子。\n\n# 一个 TensorFlow 示例（基于 MNIST 数据库）\n\n简单起见，没有用 CNN。主要是展示 G 与 D 的博弈过程。\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.examples.tutorials.mnist import input_data\n# from PIL import Image\n\nmnist = input_data.read_data_sets(\"MNIST_data/\")\nimages = mnist.train.images\n\n\ndef xavier_initializer(shape):\n    return tf.random_normal(shape=shape, stddev=1.0 / shape[0])\n\n\n# Generator\nz_size = 100  # maybe larger\ng_w1_size = 400\ng_out_size = 28 * 28\n\n# Discriminator\nx_size = 28 * 28\nd_w1_size = 400\nd_out_size = 1\n\nz = tf.placeholder('float', shape=(None, z_size))\nX = tf.placeholder('float', shape=(None, x_size))\n\n# use dict to share variables\ng_weights = {\n    'w1': tf.Variable(xavier_initializer(shape=(z_size, g_w1_size))),\n    'b1': tf.Variable(tf.zeros(shape=[g_w1_size])),\n    'out': tf.Variable(xavier_initializer(shape=(g_w1_size, g_out_size))),\n    'b2': tf.Variable(tf.zeros(shape=[g_out_size])),\n}\n\nd_weights = {\n    'w1': tf.Variable(xavier_initializer(shape=(x_size, d_w1_size))),\n    'b1': tf.Variable(tf.zeros(shape=[d_w1_size])),\n    'out': tf.Variable(xavier_initializer(shape=(d_w1_size, d_out_size))),\n    'b2': tf.Variable(tf.zeros(shape=[d_out_size])),\n}\n\n\ndef G(z, w=g_weights):\n    # here tanh is better than relu\n    h1 = tf.tanh(tf.matmul(z, w['w1']) + w['b1'])\n    # pixel output is in range [0, 255]\n    return tf.sigmoid(tf.matmul(h1, w['out']) + w['b2']) * 255\n\n\ndef D(x, w=d_weights):\n    # here tanh is better than relu\n    h1 = tf.tanh(tf.matmul(x, w['w1']) + w['b1'])\n    h2 = tf.matmul(h1, w['out']) + w['b2']\n    return h2  # use h2 to calculate logits loss\n\n\ndef generate_z(n=1):\n    return np.random.normal(size=(n, z_size))\n\n\nsample = G(z)\n\ndout_real = D(X)\ndout_fake = D(G(z))\n\nG_obj = tf.reduce_mean(\n    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_fake, labels=tf.ones_like(dout_fake)))\nD_obj_real = tf.reduce_mean(  # use single side smoothing\n    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_real, labels=(tf.ones_like(dout_real) - 0.1)))\nD_obj_fake = tf.reduce_mean(\n    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_fake, labels=tf.zeros_like(dout_fake)))\nD_obj = D_obj_real + D_obj_fake\n\nG_opt = tf.train.AdamOptimizer().minimize(G_obj, var_list=g_weights.values())\nD_opt = tf.train.AdamOptimizer().minimize(D_obj, var_list=d_weights.values())\n\n# Training\nbatch_size = 128\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    for i in range(200):\n        sess.run(D_opt, feed_dict={\n            X: images[np.random.choice(range(len(images)), batch_size)].reshape(batch_size, x_size),\n            z: generate_z(batch_size),\n        })\n        # run two phases of generator\n        sess.run(G_opt, feed_dict={\n            z: generate_z(batch_size)\n        })\n        sess.run(G_opt, feed_dict={\n            z: generate_z(batch_size)\n        })\n\n        g_cost = sess.run(G_obj, feed_dict={z: generate_z(batch_size)})\n        d_cost = sess.run(D_obj, feed_dict={\n            X: images[np.random.choice(range(len(images)), batch_size)].reshape(batch_size, x_size),\n            z: generate_z(batch_size),\n        })\n        image = sess.run(G(z), feed_dict={z: generate_z()})\n        df = sess.run(tf.sigmoid(dout_fake), feed_dict={z: generate_z()})\n        # print i, G cost, D cost, image max pixel, D output of fake\n        print(i, g_cost, d_cost, image.max(), df[0][0])\n\n    # You may wish to save or plot the image generated\n    # to see how it looks like\n    image = sess.run(G(z), feed_dict={z: generate_z()})\n    image1 = image[0].reshape([28, 28])\n    # print(image1)\n    # im = Image.fromarray(image1)\n    # im.show()\n```\n\n","slug":"GAN-01","published":1,"updated":"2021-07-19T13:03:31.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktiv60003qxt6hkkafdl8","content":"<h1 id=\"生成对抗网络（GAN）的基本概念\"><a href=\"#生成对抗网络（GAN）的基本概念\" class=\"headerlink\" title=\"生成对抗网络（GAN）的基本概念\"></a>生成对抗网络（GAN）的基本概念</h1><p>2014年 Goodfellow 等人提出了一个<strong>生成对抗网络（GAN）</strong>的概念后一直火爆至今，相比于其它生成模型，它有以下几个优点：</p>\n<ul>\n<li>模型只用到了反向传播，而不需要马尔科夫链。</li>\n<li>训练时不需要对隐变量做推断。</li>\n<li>理论上，只要是可微分函数都可以用于构建 D（判别模型）和 G（生成模型），因为能够与深度神经网络结合做深度生成式模型。</li>\n<li>G 的参数更新不是直接来自数据样本，而是使用来自 D 的反向传播。</li>\n</ul>\n<p>它的主要思想来源于博弈论中的零和游戏。简单描述起来就是我们有一些真实的数据，也有一些随机生成的假数据。G 负责把这些数据拿过来拼命地模仿成真实数据并把它们藏在真实数据中，而 D 就拼命地要把伪造数据和真实数据分开。经过二者的博弈以后，G 的伪造技术越来越厉害，D 的鉴别技术也越来越厉害。直到 D 再也分不出数据是真实的还是 G 生成的数据的时候（D 判断正确的概率为 $1/2$ ，即随机猜测），我们就达到了目的。此时 G 可以用来模仿生成所谓的“真实数据”了。</p>\n<p>为了学习到生成器在数据 $x$ 生的分布 $p_g(x)$ ，我们先定义一个先验的输入噪声变量 $p_z(z)$ ，然后根据 $G(z;\\theta_g)$ 将其映射到数据空间中，其中 $G$ 为多层感知机所表征的可微函数。然后利用第二个多层感知机 $D(x;\\theta_d)$ ，它的输出为单个标量，表示 $x$ 来源于真实数据的概率。我们训练 $D$ 来最大化正确分配真实样本和生成样本的概率，因此我们就可以通过最小化 $\\log (1-D(G(z)))$ （G 生成的数据被分错的损失函数）而同时训练 $G$ 。即：</p>\n<script type=\"math/tex; mode=display\">\n\\min_G \\max_D V(D,G) = \\mathbb{E}_{x \\sim p_{\\text{data}}(x)}[\\log D(x)] + \\mathbb{E}_{z \\sim p_{z}(z)}[\\log (1-D(G(z)))]</script><h1 id=\"最优判别器\"><a href=\"#最优判别器\" class=\"headerlink\" title=\"最优判别器\"></a>最优判别器</h1><p>考虑到</p>\n<script type=\"math/tex; mode=display\">\n\\mathbb{E}_{z \\sim p_{z}(z)}[\\log (1-D(G(z)))] = \\mathbb{E}_{x \\sim p_{g}(x)}[\\log (1-D(x)]</script><p>我们可以将价值函数 $V(D,G)$ 展开为在全体 $x$ 上的积分形式</p>\n<script type=\"math/tex; mode=display\">\nV(G, D) = \\int_{x} p_{\\text{data}}(x) \\log (D(x)) + p_g(x) \\log (1-D(x)) \\, dx</script><p>因为求积分最大值可以转化为求被积函数最大值，且 $p_{\\text{data}}(x)$ 和 $p_g(x)$ 均为标量，因此我们讨论如下形式的式子的最大值：</p>\n<script type=\"math/tex; mode=display\">\nf(y) = a \\log y + b \\log (1-y)</script><p>考虑到</p>\n<script type=\"math/tex; mode=display\">\nf'(y) = 0 \\Rightarrow \\frac{a}{y}-\\frac{b}{1-y}=0 \\Rightarrow y=\\frac{a}{a+b}</script><p>且</p>\n<script type=\"math/tex; mode=display\">\nf''(y) \\Big|_{y=\\frac{a}{a+b}} = -\\frac{a}{\\left( \\frac{a}{a+b} \\right)^{2}}-\\frac{b}{1-\\left( \\frac{a}{a+b} \\right)^{2}}<0</script><p>我们得到极大值在 $\\frac{a}{a+b}$ 处取到，令 $a=p_{\\text{data}}(x), b=p_g(x), y=D(x)$ ，则容易对比出最优判别器</p>\n<script type=\"math/tex; mode=display\">\nD(x) = \\frac{p_{\\text{data}}(x)}{p_{\\text{data}}(x) + p_g(x)}</script><h1 id=\"最优生成器\"><a href=\"#最优生成器\" class=\"headerlink\" title=\"最优生成器\"></a>最优生成器</h1><p>显然，GAN 的目的是让 $p_{\\text{data}}=p_g$ 。此时判别器已经完全分辨不出真实数据和生成数据的区别了。即</p>\n<script type=\"math/tex; mode=display\">\nD_G^{\\ast}=\\frac{p_{\\text{data}}(x)}{p_{\\text{data}}(x) + p_g(x)}=\\frac{1}{2}</script><p>Goodfellow 等人证明，这个最优生成器就是上面那个 min max 的式子。</p>\n<h1 id=\"一个-TensorFlow-示例（基于-MNIST-数据库）\"><a href=\"#一个-TensorFlow-示例（基于-MNIST-数据库）\" class=\"headerlink\" title=\"一个 TensorFlow 示例（基于 MNIST 数据库）\"></a>一个 TensorFlow 示例（基于 MNIST 数据库）</h1><p>简单起见，没有用 CNN。主要是展示 G 与 D 的博弈过程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.examples.tutorials.mnist <span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"><span class=\"comment\"># from PIL import Image</span></span><br><span class=\"line\"></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">\"MNIST_data/\"</span>)</span><br><span class=\"line\">images = mnist.train.images</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xavier_initializer</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.random_normal(shape=shape, stddev=<span class=\"number\">1.0</span> / shape[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generator</span></span><br><span class=\"line\">z_size = <span class=\"number\">100</span>  <span class=\"comment\"># maybe larger</span></span><br><span class=\"line\">g_w1_size = <span class=\"number\">400</span></span><br><span class=\"line\">g_out_size = <span class=\"number\">28</span> * <span class=\"number\">28</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Discriminator</span></span><br><span class=\"line\">x_size = <span class=\"number\">28</span> * <span class=\"number\">28</span></span><br><span class=\"line\">d_w1_size = <span class=\"number\">400</span></span><br><span class=\"line\">d_out_size = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">z = tf.placeholder(<span class=\"string\">'float'</span>, shape=(<span class=\"keyword\">None</span>, z_size))</span><br><span class=\"line\">X = tf.placeholder(<span class=\"string\">'float'</span>, shape=(<span class=\"keyword\">None</span>, x_size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use dict to share variables</span></span><br><span class=\"line\">g_weights = &#123;</span><br><span class=\"line\">    <span class=\"string\">'w1'</span>: tf.Variable(xavier_initializer(shape=(z_size, g_w1_size))),</span><br><span class=\"line\">    <span class=\"string\">'b1'</span>: tf.Variable(tf.zeros(shape=[g_w1_size])),</span><br><span class=\"line\">    <span class=\"string\">'out'</span>: tf.Variable(xavier_initializer(shape=(g_w1_size, g_out_size))),</span><br><span class=\"line\">    <span class=\"string\">'b2'</span>: tf.Variable(tf.zeros(shape=[g_out_size])),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">d_weights = &#123;</span><br><span class=\"line\">    <span class=\"string\">'w1'</span>: tf.Variable(xavier_initializer(shape=(x_size, d_w1_size))),</span><br><span class=\"line\">    <span class=\"string\">'b1'</span>: tf.Variable(tf.zeros(shape=[d_w1_size])),</span><br><span class=\"line\">    <span class=\"string\">'out'</span>: tf.Variable(xavier_initializer(shape=(d_w1_size, d_out_size))),</span><br><span class=\"line\">    <span class=\"string\">'b2'</span>: tf.Variable(tf.zeros(shape=[d_out_size])),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">G</span><span class=\"params\">(z, w=g_weights)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># here tanh is better than relu</span></span><br><span class=\"line\">    h1 = tf.tanh(tf.matmul(z, w[<span class=\"string\">'w1'</span>]) + w[<span class=\"string\">'b1'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># pixel output is in range [0, 255]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.sigmoid(tf.matmul(h1, w[<span class=\"string\">'out'</span>]) + w[<span class=\"string\">'b2'</span>]) * <span class=\"number\">255</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">D</span><span class=\"params\">(x, w=d_weights)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># here tanh is better than relu</span></span><br><span class=\"line\">    h1 = tf.tanh(tf.matmul(x, w[<span class=\"string\">'w1'</span>]) + w[<span class=\"string\">'b1'</span>])</span><br><span class=\"line\">    h2 = tf.matmul(h1, w[<span class=\"string\">'out'</span>]) + w[<span class=\"string\">'b2'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h2  <span class=\"comment\"># use h2 to calculate logits loss</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_z</span><span class=\"params\">(n=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.random.normal(size=(n, z_size))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sample = G(z)</span><br><span class=\"line\"></span><br><span class=\"line\">dout_real = D(X)</span><br><span class=\"line\">dout_fake = D(G(z))</span><br><span class=\"line\"></span><br><span class=\"line\">G_obj = tf.reduce_mean(</span><br><span class=\"line\">    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_fake, labels=tf.ones_like(dout_fake)))</span><br><span class=\"line\">D_obj_real = tf.reduce_mean(  <span class=\"comment\"># use single side smoothing</span></span><br><span class=\"line\">    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_real, labels=(tf.ones_like(dout_real) - <span class=\"number\">0.1</span>)))</span><br><span class=\"line\">D_obj_fake = tf.reduce_mean(</span><br><span class=\"line\">    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_fake, labels=tf.zeros_like(dout_fake)))</span><br><span class=\"line\">D_obj = D_obj_real + D_obj_fake</span><br><span class=\"line\"></span><br><span class=\"line\">G_opt = tf.train.AdamOptimizer().minimize(G_obj, var_list=g_weights.values())</span><br><span class=\"line\">D_opt = tf.train.AdamOptimizer().minimize(D_obj, var_list=d_weights.values())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Training</span></span><br><span class=\"line\">batch_size = <span class=\"number\">128</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">200</span>):</span><br><span class=\"line\">        sess.run(D_opt, feed_dict=&#123;</span><br><span class=\"line\">            X: images[np.random.choice(range(len(images)), batch_size)].reshape(batch_size, x_size),</span><br><span class=\"line\">            z: generate_z(batch_size),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\"># run two phases of generator</span></span><br><span class=\"line\">        sess.run(G_opt, feed_dict=&#123;</span><br><span class=\"line\">            z: generate_z(batch_size)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        sess.run(G_opt, feed_dict=&#123;</span><br><span class=\"line\">            z: generate_z(batch_size)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        g_cost = sess.run(G_obj, feed_dict=&#123;z: generate_z(batch_size)&#125;)</span><br><span class=\"line\">        d_cost = sess.run(D_obj, feed_dict=&#123;</span><br><span class=\"line\">            X: images[np.random.choice(range(len(images)), batch_size)].reshape(batch_size, x_size),</span><br><span class=\"line\">            z: generate_z(batch_size),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        image = sess.run(G(z), feed_dict=&#123;z: generate_z()&#125;)</span><br><span class=\"line\">        df = sess.run(tf.sigmoid(dout_fake), feed_dict=&#123;z: generate_z()&#125;)</span><br><span class=\"line\">        <span class=\"comment\"># print i, G cost, D cost, image max pixel, D output of fake</span></span><br><span class=\"line\">        print(i, g_cost, d_cost, image.max(), df[<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># You may wish to save or plot the image generated</span></span><br><span class=\"line\">    <span class=\"comment\"># to see how it looks like</span></span><br><span class=\"line\">    image = sess.run(G(z), feed_dict=&#123;z: generate_z()&#125;)</span><br><span class=\"line\">    image1 = image[<span class=\"number\">0</span>].reshape([<span class=\"number\">28</span>, <span class=\"number\">28</span>])</span><br><span class=\"line\">    <span class=\"comment\"># print(image1)</span></span><br><span class=\"line\">    <span class=\"comment\"># im = Image.fromarray(image1)</span></span><br><span class=\"line\">    <span class=\"comment\"># im.show()</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"生成对抗网络（GAN）的基本概念\"><a href=\"#生成对抗网络（GAN）的基本概念\" class=\"headerlink\" title=\"生成对抗网络（GAN）的基本概念\"></a>生成对抗网络（GAN）的基本概念</h1><p>2014年 Goodfellow 等人提出了一个<strong>生成对抗网络（GAN）</strong>的概念后一直火爆至今，相比于其它生成模型，它有以下几个优点：</p>\n<ul>\n<li>模型只用到了反向传播，而不需要马尔科夫链。</li>\n<li>训练时不需要对隐变量做推断。</li>\n<li>理论上，只要是可微分函数都可以用于构建 D（判别模型）和 G（生成模型），因为能够与深度神经网络结合做深度生成式模型。</li>\n<li>G 的参数更新不是直接来自数据样本，而是使用来自 D 的反向传播。</li>\n</ul>\n<p>它的主要思想来源于博弈论中的零和游戏。简单描述起来就是我们有一些真实的数据，也有一些随机生成的假数据。G 负责把这些数据拿过来拼命地模仿成真实数据并把它们藏在真实数据中，而 D 就拼命地要把伪造数据和真实数据分开。经过二者的博弈以后，G 的伪造技术越来越厉害，D 的鉴别技术也越来越厉害。直到 D 再也分不出数据是真实的还是 G 生成的数据的时候（D 判断正确的概率为 $1/2$ ，即随机猜测），我们就达到了目的。此时 G 可以用来模仿生成所谓的“真实数据”了。</p>\n<p>为了学习到生成器在数据 $x$ 生的分布 $p_g(x)$ ，我们先定义一个先验的输入噪声变量 $p_z(z)$ ，然后根据 $G(z;\\theta_g)$ 将其映射到数据空间中，其中 $G$ 为多层感知机所表征的可微函数。然后利用第二个多层感知机 $D(x;\\theta_d)$ ，它的输出为单个标量，表示 $x$ 来源于真实数据的概率。我们训练 $D$ 来最大化正确分配真实样本和生成样本的概率，因此我们就可以通过最小化 $\\log (1-D(G(z)))$ （G 生成的数据被分错的损失函数）而同时训练 $G$ 。即：</p>\n<script type=\"math/tex; mode=display\">\n\\min_G \\max_D V(D,G) = \\mathbb{E}_{x \\sim p_{\\text{data}}(x)}[\\log D(x)] + \\mathbb{E}_{z \\sim p_{z}(z)}[\\log (1-D(G(z)))]</script><h1 id=\"最优判别器\"><a href=\"#最优判别器\" class=\"headerlink\" title=\"最优判别器\"></a>最优判别器</h1><p>考虑到</p>\n<script type=\"math/tex; mode=display\">\n\\mathbb{E}_{z \\sim p_{z}(z)}[\\log (1-D(G(z)))] = \\mathbb{E}_{x \\sim p_{g}(x)}[\\log (1-D(x)]</script><p>我们可以将价值函数 $V(D,G)$ 展开为在全体 $x$ 上的积分形式</p>\n<script type=\"math/tex; mode=display\">\nV(G, D) = \\int_{x} p_{\\text{data}}(x) \\log (D(x)) + p_g(x) \\log (1-D(x)) \\, dx</script><p>因为求积分最大值可以转化为求被积函数最大值，且 $p_{\\text{data}}(x)$ 和 $p_g(x)$ 均为标量，因此我们讨论如下形式的式子的最大值：</p>\n<script type=\"math/tex; mode=display\">\nf(y) = a \\log y + b \\log (1-y)</script><p>考虑到</p>\n<script type=\"math/tex; mode=display\">\nf'(y) = 0 \\Rightarrow \\frac{a}{y}-\\frac{b}{1-y}=0 \\Rightarrow y=\\frac{a}{a+b}</script><p>且</p>\n<script type=\"math/tex; mode=display\">\nf''(y) \\Big|_{y=\\frac{a}{a+b}} = -\\frac{a}{\\left( \\frac{a}{a+b} \\right)^{2}}-\\frac{b}{1-\\left( \\frac{a}{a+b} \\right)^{2}}<0</script><p>我们得到极大值在 $\\frac{a}{a+b}$ 处取到，令 $a=p_{\\text{data}}(x), b=p_g(x), y=D(x)$ ，则容易对比出最优判别器</p>\n<script type=\"math/tex; mode=display\">\nD(x) = \\frac{p_{\\text{data}}(x)}{p_{\\text{data}}(x) + p_g(x)}</script><h1 id=\"最优生成器\"><a href=\"#最优生成器\" class=\"headerlink\" title=\"最优生成器\"></a>最优生成器</h1><p>显然，GAN 的目的是让 $p_{\\text{data}}=p_g$ 。此时判别器已经完全分辨不出真实数据和生成数据的区别了。即</p>\n<script type=\"math/tex; mode=display\">\nD_G^{\\ast}=\\frac{p_{\\text{data}}(x)}{p_{\\text{data}}(x) + p_g(x)}=\\frac{1}{2}</script><p>Goodfellow 等人证明，这个最优生成器就是上面那个 min max 的式子。</p>\n<h1 id=\"一个-TensorFlow-示例（基于-MNIST-数据库）\"><a href=\"#一个-TensorFlow-示例（基于-MNIST-数据库）\" class=\"headerlink\" title=\"一个 TensorFlow 示例（基于 MNIST 数据库）\"></a>一个 TensorFlow 示例（基于 MNIST 数据库）</h1><p>简单起见，没有用 CNN。主要是展示 G 与 D 的博弈过程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.examples.tutorials.mnist <span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"><span class=\"comment\"># from PIL import Image</span></span><br><span class=\"line\"></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">\"MNIST_data/\"</span>)</span><br><span class=\"line\">images = mnist.train.images</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xavier_initializer</span><span class=\"params\">(shape)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.random_normal(shape=shape, stddev=<span class=\"number\">1.0</span> / shape[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generator</span></span><br><span class=\"line\">z_size = <span class=\"number\">100</span>  <span class=\"comment\"># maybe larger</span></span><br><span class=\"line\">g_w1_size = <span class=\"number\">400</span></span><br><span class=\"line\">g_out_size = <span class=\"number\">28</span> * <span class=\"number\">28</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Discriminator</span></span><br><span class=\"line\">x_size = <span class=\"number\">28</span> * <span class=\"number\">28</span></span><br><span class=\"line\">d_w1_size = <span class=\"number\">400</span></span><br><span class=\"line\">d_out_size = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">z = tf.placeholder(<span class=\"string\">'float'</span>, shape=(<span class=\"keyword\">None</span>, z_size))</span><br><span class=\"line\">X = tf.placeholder(<span class=\"string\">'float'</span>, shape=(<span class=\"keyword\">None</span>, x_size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use dict to share variables</span></span><br><span class=\"line\">g_weights = &#123;</span><br><span class=\"line\">    <span class=\"string\">'w1'</span>: tf.Variable(xavier_initializer(shape=(z_size, g_w1_size))),</span><br><span class=\"line\">    <span class=\"string\">'b1'</span>: tf.Variable(tf.zeros(shape=[g_w1_size])),</span><br><span class=\"line\">    <span class=\"string\">'out'</span>: tf.Variable(xavier_initializer(shape=(g_w1_size, g_out_size))),</span><br><span class=\"line\">    <span class=\"string\">'b2'</span>: tf.Variable(tf.zeros(shape=[g_out_size])),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">d_weights = &#123;</span><br><span class=\"line\">    <span class=\"string\">'w1'</span>: tf.Variable(xavier_initializer(shape=(x_size, d_w1_size))),</span><br><span class=\"line\">    <span class=\"string\">'b1'</span>: tf.Variable(tf.zeros(shape=[d_w1_size])),</span><br><span class=\"line\">    <span class=\"string\">'out'</span>: tf.Variable(xavier_initializer(shape=(d_w1_size, d_out_size))),</span><br><span class=\"line\">    <span class=\"string\">'b2'</span>: tf.Variable(tf.zeros(shape=[d_out_size])),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">G</span><span class=\"params\">(z, w=g_weights)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># here tanh is better than relu</span></span><br><span class=\"line\">    h1 = tf.tanh(tf.matmul(z, w[<span class=\"string\">'w1'</span>]) + w[<span class=\"string\">'b1'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># pixel output is in range [0, 255]</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.sigmoid(tf.matmul(h1, w[<span class=\"string\">'out'</span>]) + w[<span class=\"string\">'b2'</span>]) * <span class=\"number\">255</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">D</span><span class=\"params\">(x, w=d_weights)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># here tanh is better than relu</span></span><br><span class=\"line\">    h1 = tf.tanh(tf.matmul(x, w[<span class=\"string\">'w1'</span>]) + w[<span class=\"string\">'b1'</span>])</span><br><span class=\"line\">    h2 = tf.matmul(h1, w[<span class=\"string\">'out'</span>]) + w[<span class=\"string\">'b2'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h2  <span class=\"comment\"># use h2 to calculate logits loss</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_z</span><span class=\"params\">(n=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.random.normal(size=(n, z_size))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sample = G(z)</span><br><span class=\"line\"></span><br><span class=\"line\">dout_real = D(X)</span><br><span class=\"line\">dout_fake = D(G(z))</span><br><span class=\"line\"></span><br><span class=\"line\">G_obj = tf.reduce_mean(</span><br><span class=\"line\">    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_fake, labels=tf.ones_like(dout_fake)))</span><br><span class=\"line\">D_obj_real = tf.reduce_mean(  <span class=\"comment\"># use single side smoothing</span></span><br><span class=\"line\">    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_real, labels=(tf.ones_like(dout_real) - <span class=\"number\">0.1</span>)))</span><br><span class=\"line\">D_obj_fake = tf.reduce_mean(</span><br><span class=\"line\">    tf.nn.sigmoid_cross_entropy_with_logits(logits=dout_fake, labels=tf.zeros_like(dout_fake)))</span><br><span class=\"line\">D_obj = D_obj_real + D_obj_fake</span><br><span class=\"line\"></span><br><span class=\"line\">G_opt = tf.train.AdamOptimizer().minimize(G_obj, var_list=g_weights.values())</span><br><span class=\"line\">D_opt = tf.train.AdamOptimizer().minimize(D_obj, var_list=d_weights.values())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Training</span></span><br><span class=\"line\">batch_size = <span class=\"number\">128</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> tf.Session() <span class=\"keyword\">as</span> sess:</span><br><span class=\"line\">    sess.run(tf.global_variables_initializer())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">200</span>):</span><br><span class=\"line\">        sess.run(D_opt, feed_dict=&#123;</span><br><span class=\"line\">            X: images[np.random.choice(range(len(images)), batch_size)].reshape(batch_size, x_size),</span><br><span class=\"line\">            z: generate_z(batch_size),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\"># run two phases of generator</span></span><br><span class=\"line\">        sess.run(G_opt, feed_dict=&#123;</span><br><span class=\"line\">            z: generate_z(batch_size)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        sess.run(G_opt, feed_dict=&#123;</span><br><span class=\"line\">            z: generate_z(batch_size)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        g_cost = sess.run(G_obj, feed_dict=&#123;z: generate_z(batch_size)&#125;)</span><br><span class=\"line\">        d_cost = sess.run(D_obj, feed_dict=&#123;</span><br><span class=\"line\">            X: images[np.random.choice(range(len(images)), batch_size)].reshape(batch_size, x_size),</span><br><span class=\"line\">            z: generate_z(batch_size),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        image = sess.run(G(z), feed_dict=&#123;z: generate_z()&#125;)</span><br><span class=\"line\">        df = sess.run(tf.sigmoid(dout_fake), feed_dict=&#123;z: generate_z()&#125;)</span><br><span class=\"line\">        <span class=\"comment\"># print i, G cost, D cost, image max pixel, D output of fake</span></span><br><span class=\"line\">        print(i, g_cost, d_cost, image.max(), df[<span class=\"number\">0</span>][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># You may wish to save or plot the image generated</span></span><br><span class=\"line\">    <span class=\"comment\"># to see how it looks like</span></span><br><span class=\"line\">    image = sess.run(G(z), feed_dict=&#123;z: generate_z()&#125;)</span><br><span class=\"line\">    image1 = image[<span class=\"number\">0</span>].reshape([<span class=\"number\">28</span>, <span class=\"number\">28</span>])</span><br><span class=\"line\">    <span class=\"comment\"># print(image1)</span></span><br><span class=\"line\">    <span class=\"comment\"># im = Image.fromarray(image1)</span></span><br><span class=\"line\">    <span class=\"comment\"># im.show()</span></span><br></pre></td></tr></table></figure>\n"},{"title":"生成对抗网络（二）—— Wasserstein GAN 简述及一个 TensorFlow 示例","date":"2017-11-04T03:21:51.000Z","description":"对 Wasserstein GAN 进行了简介，并提供了一个 TensorFlow 示例。","_content":"\n# 原始 GAN 到底出了什么问题\n\n在近似最优判别器下，最小化生成器的 loss 等价于最小化 $P_{\\text{data}}$ 和 $P_g$ 之间的 JS 散度，而由于 $P_{\\text{data}}$ 和 $P_g$ 几乎不可能有不可忽略的重叠，所以无论它们相距多远，JS 散度都是常数 $\\log 2$ ，最终导致生成器的梯度近似为 $0$ ，梯度消失。\n\n又因为最小化目标等价于最小化\n$$\nKL(P_{g} \\Vert P_{\\text{data}}) - 2 JS(P_{\\text{data}} \\Vert P_{g})\n$$\n这个目标要求同时最小化生成分布和真是分布的 KL 散度，并且最大化两者的 JS 散度。产生了数值上的不稳定。最终造成生成器宁可多生成一些重复但是很“安全”的样本，也不愿意去生成多样性的样本。就发生了所谓的 collapse mode。\n\n# Wasserstein GAN 改动了什么\n\nWasserstein GAN 与 GAN 相比，只改了四点：\n\n- 判别器最后一层去掉 sigmoid\n- 生成器和判别器的 loss 不取 log\n- 每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数 c\n- 不要用基于动量的优化方法（包括 momentum 和 Adam），推荐使用 RMSProp，SGD 也行。\n\nPS：第四点是论文作者从实验中用玄学得到的。因为如果使用 Adam，判别器的 loss 有时候会崩掉，然后 Adam 给出的更新方向与梯度方向夹角的 cos 值就会变成负数，判别器的 loss 梯度就变得不稳定了。但是改用 RMSProp 以后就解决了上述问题。\n\nPPS：推荐使用比较小的 learning rate，论文中使用的是 $\\alpha=0.00005$ 。\n\n# 一个 TensorFlow 示例（基于 MNIST 数据库）\n\n```python\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport os\n\n\nmb_size = 32\nX_dim = 784\nz_dim = 10\nh_dim = 128\n\nmnist = input_data.read_data_sets('MNIST_data/', one_hot=True)\n\n\ndef plot(samples):\n    fig = plt.figure(figsize=(4, 4))\n    gs = gridspec.GridSpec(4, 4)\n    gs.update(wspace=0.05, hspace=0.05)\n\n    for i, sample in enumerate(samples):\n        ax = plt.subplot(gs[i])\n        plt.axis('off')\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.set_aspect('equal')\n        plt.imshow(sample.reshape(28, 28), cmap='Greys_r')\n\n    return fig\n\n\ndef xavier_init(size):\n    in_dim = size[0]\n    xavier_stddev = 1. / tf.sqrt(in_dim / 2.)\n    return tf.random_normal(shape=size, stddev=xavier_stddev)\n\n\nX = tf.placeholder(tf.float32, shape=[None, X_dim])\n\nD_W1 = tf.Variable(xavier_init([X_dim, h_dim]))\nD_b1 = tf.Variable(tf.zeros(shape=[h_dim]))\n\nD_W2 = tf.Variable(xavier_init([h_dim, 1]))\nD_b2 = tf.Variable(tf.zeros(shape=[1]))\n\ntheta_D = [D_W1, D_W2, D_b1, D_b2]\n\n\nz = tf.placeholder(tf.float32, shape=[None, z_dim])\n\nG_W1 = tf.Variable(xavier_init([z_dim, h_dim]))\nG_b1 = tf.Variable(tf.zeros(shape=[h_dim]))\n\nG_W2 = tf.Variable(xavier_init([h_dim, X_dim]))\nG_b2 = tf.Variable(tf.zeros(shape=[X_dim]))\n\ntheta_G = [G_W1, G_W2, G_b1, G_b2]\n\n\ndef sample_z(m, n):\n    return np.random.uniform(-1., 1., size=[m, n])\n\n\ndef generator(z):\n    G_h1 = tf.nn.relu(tf.matmul(z, G_W1) + G_b1)\n    G_log_prob = tf.matmul(G_h1, G_W2) + G_b2\n    G_prob = tf.nn.sigmoid(G_log_prob)\n    return G_prob\n\n\ndef discriminator(x):\n    D_h1 = tf.nn.relu(tf.matmul(x, D_W1) + D_b1)\n    out = tf.matmul(D_h1, D_W2) + D_b2\n    return out\n\n\nG_sample = generator(z)\nD_real = discriminator(X)\nD_fake = discriminator(G_sample)\n\nD_loss = tf.reduce_mean(D_real) - tf.reduce_mean(D_fake)\nG_loss = -tf.reduce_mean(D_fake)\n\nD_solver = (tf.train.RMSPropOptimizer(learning_rate=1e-4)\n            .minimize(-D_loss, var_list=theta_D))\nG_solver = (tf.train.RMSPropOptimizer(learning_rate=1e-4)\n            .minimize(G_loss, var_list=theta_G))\n\nclip_D = [p.assign(tf.clip_by_value(p, -0.01, 0.01)) for p in theta_D]\n\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n\nif not os.path.exists('out/'):\n    os.makedirs('out/')\n\ni = 0\n\nfor it in range(1000000):\n    for _ in range(5):\n        X_mb, _ = mnist.train.next_batch(mb_size)\n\n        _, D_loss_curr, _ = sess.run(\n            [D_solver, D_loss, clip_D],\n            feed_dict={X: X_mb, z: sample_z(mb_size, z_dim)}\n        )\n\n    _, G_loss_curr = sess.run(\n        [G_solver, G_loss],\n        feed_dict={z: sample_z(mb_size, z_dim)}\n    )\n\n    if it % 100 == 0:\n        print('Iter: {}; D loss: {:.4}; G_loss: {:.4}'.format(it, D_loss_curr, G_loss_curr))\n\n        if it % 1000 == 0:\n            samples = sess.run(G_sample, feed_dict={z: sample_z(16, z_dim)})\n\n            fig = plot(samples)\n            plt.savefig('out/{}.png'.format(str(i).zfill(3)), bbox_inches='tight')\n            i += 1\n            plt.close(fig)\n```\n\n","source":"_posts/GAN-02.md","raw":"---\ntitle: 生成对抗网络（二）—— Wasserstein GAN 简述及一个 TensorFlow 示例\ndate: 2017-11-04 11:21:51\ncategories: ML\ntags:\n     - Deep learning\n     - GAN\ndescription: 对 Wasserstein GAN 进行了简介，并提供了一个 TensorFlow 示例。\n---\n\n# 原始 GAN 到底出了什么问题\n\n在近似最优判别器下，最小化生成器的 loss 等价于最小化 $P_{\\text{data}}$ 和 $P_g$ 之间的 JS 散度，而由于 $P_{\\text{data}}$ 和 $P_g$ 几乎不可能有不可忽略的重叠，所以无论它们相距多远，JS 散度都是常数 $\\log 2$ ，最终导致生成器的梯度近似为 $0$ ，梯度消失。\n\n又因为最小化目标等价于最小化\n$$\nKL(P_{g} \\Vert P_{\\text{data}}) - 2 JS(P_{\\text{data}} \\Vert P_{g})\n$$\n这个目标要求同时最小化生成分布和真是分布的 KL 散度，并且最大化两者的 JS 散度。产生了数值上的不稳定。最终造成生成器宁可多生成一些重复但是很“安全”的样本，也不愿意去生成多样性的样本。就发生了所谓的 collapse mode。\n\n# Wasserstein GAN 改动了什么\n\nWasserstein GAN 与 GAN 相比，只改了四点：\n\n- 判别器最后一层去掉 sigmoid\n- 生成器和判别器的 loss 不取 log\n- 每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数 c\n- 不要用基于动量的优化方法（包括 momentum 和 Adam），推荐使用 RMSProp，SGD 也行。\n\nPS：第四点是论文作者从实验中用玄学得到的。因为如果使用 Adam，判别器的 loss 有时候会崩掉，然后 Adam 给出的更新方向与梯度方向夹角的 cos 值就会变成负数，判别器的 loss 梯度就变得不稳定了。但是改用 RMSProp 以后就解决了上述问题。\n\nPPS：推荐使用比较小的 learning rate，论文中使用的是 $\\alpha=0.00005$ 。\n\n# 一个 TensorFlow 示例（基于 MNIST 数据库）\n\n```python\nimport tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport os\n\n\nmb_size = 32\nX_dim = 784\nz_dim = 10\nh_dim = 128\n\nmnist = input_data.read_data_sets('MNIST_data/', one_hot=True)\n\n\ndef plot(samples):\n    fig = plt.figure(figsize=(4, 4))\n    gs = gridspec.GridSpec(4, 4)\n    gs.update(wspace=0.05, hspace=0.05)\n\n    for i, sample in enumerate(samples):\n        ax = plt.subplot(gs[i])\n        plt.axis('off')\n        ax.set_xticklabels([])\n        ax.set_yticklabels([])\n        ax.set_aspect('equal')\n        plt.imshow(sample.reshape(28, 28), cmap='Greys_r')\n\n    return fig\n\n\ndef xavier_init(size):\n    in_dim = size[0]\n    xavier_stddev = 1. / tf.sqrt(in_dim / 2.)\n    return tf.random_normal(shape=size, stddev=xavier_stddev)\n\n\nX = tf.placeholder(tf.float32, shape=[None, X_dim])\n\nD_W1 = tf.Variable(xavier_init([X_dim, h_dim]))\nD_b1 = tf.Variable(tf.zeros(shape=[h_dim]))\n\nD_W2 = tf.Variable(xavier_init([h_dim, 1]))\nD_b2 = tf.Variable(tf.zeros(shape=[1]))\n\ntheta_D = [D_W1, D_W2, D_b1, D_b2]\n\n\nz = tf.placeholder(tf.float32, shape=[None, z_dim])\n\nG_W1 = tf.Variable(xavier_init([z_dim, h_dim]))\nG_b1 = tf.Variable(tf.zeros(shape=[h_dim]))\n\nG_W2 = tf.Variable(xavier_init([h_dim, X_dim]))\nG_b2 = tf.Variable(tf.zeros(shape=[X_dim]))\n\ntheta_G = [G_W1, G_W2, G_b1, G_b2]\n\n\ndef sample_z(m, n):\n    return np.random.uniform(-1., 1., size=[m, n])\n\n\ndef generator(z):\n    G_h1 = tf.nn.relu(tf.matmul(z, G_W1) + G_b1)\n    G_log_prob = tf.matmul(G_h1, G_W2) + G_b2\n    G_prob = tf.nn.sigmoid(G_log_prob)\n    return G_prob\n\n\ndef discriminator(x):\n    D_h1 = tf.nn.relu(tf.matmul(x, D_W1) + D_b1)\n    out = tf.matmul(D_h1, D_W2) + D_b2\n    return out\n\n\nG_sample = generator(z)\nD_real = discriminator(X)\nD_fake = discriminator(G_sample)\n\nD_loss = tf.reduce_mean(D_real) - tf.reduce_mean(D_fake)\nG_loss = -tf.reduce_mean(D_fake)\n\nD_solver = (tf.train.RMSPropOptimizer(learning_rate=1e-4)\n            .minimize(-D_loss, var_list=theta_D))\nG_solver = (tf.train.RMSPropOptimizer(learning_rate=1e-4)\n            .minimize(G_loss, var_list=theta_G))\n\nclip_D = [p.assign(tf.clip_by_value(p, -0.01, 0.01)) for p in theta_D]\n\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n\nif not os.path.exists('out/'):\n    os.makedirs('out/')\n\ni = 0\n\nfor it in range(1000000):\n    for _ in range(5):\n        X_mb, _ = mnist.train.next_batch(mb_size)\n\n        _, D_loss_curr, _ = sess.run(\n            [D_solver, D_loss, clip_D],\n            feed_dict={X: X_mb, z: sample_z(mb_size, z_dim)}\n        )\n\n    _, G_loss_curr = sess.run(\n        [G_solver, G_loss],\n        feed_dict={z: sample_z(mb_size, z_dim)}\n    )\n\n    if it % 100 == 0:\n        print('Iter: {}; D loss: {:.4}; G_loss: {:.4}'.format(it, D_loss_curr, G_loss_curr))\n\n        if it % 1000 == 0:\n            samples = sess.run(G_sample, feed_dict={z: sample_z(16, z_dim)})\n\n            fig = plot(samples)\n            plt.savefig('out/{}.png'.format(str(i).zfill(3)), bbox_inches='tight')\n            i += 1\n            plt.close(fig)\n```\n\n","slug":"GAN-02","published":1,"updated":"2021-07-19T13:03:31.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktiv70004qxt6ceoapanx","content":"<h1 id=\"原始-GAN-到底出了什么问题\"><a href=\"#原始-GAN-到底出了什么问题\" class=\"headerlink\" title=\"原始 GAN 到底出了什么问题\"></a>原始 GAN 到底出了什么问题</h1><p>在近似最优判别器下，最小化生成器的 loss 等价于最小化 $P_{\\text{data}}$ 和 $P_g$ 之间的 JS 散度，而由于 $P_{\\text{data}}$ 和 $P_g$ 几乎不可能有不可忽略的重叠，所以无论它们相距多远，JS 散度都是常数 $\\log 2$ ，最终导致生成器的梯度近似为 $0$ ，梯度消失。</p>\n<p>又因为最小化目标等价于最小化</p>\n<script type=\"math/tex; mode=display\">\nKL(P_{g} \\Vert P_{\\text{data}}) - 2 JS(P_{\\text{data}} \\Vert P_{g})</script><p>这个目标要求同时最小化生成分布和真是分布的 KL 散度，并且最大化两者的 JS 散度。产生了数值上的不稳定。最终造成生成器宁可多生成一些重复但是很“安全”的样本，也不愿意去生成多样性的样本。就发生了所谓的 collapse mode。</p>\n<h1 id=\"Wasserstein-GAN-改动了什么\"><a href=\"#Wasserstein-GAN-改动了什么\" class=\"headerlink\" title=\"Wasserstein GAN 改动了什么\"></a>Wasserstein GAN 改动了什么</h1><p>Wasserstein GAN 与 GAN 相比，只改了四点：</p>\n<ul>\n<li>判别器最后一层去掉 sigmoid</li>\n<li>生成器和判别器的 loss 不取 log</li>\n<li>每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数 c</li>\n<li>不要用基于动量的优化方法（包括 momentum 和 Adam），推荐使用 RMSProp，SGD 也行。</li>\n</ul>\n<p>PS：第四点是论文作者从实验中用玄学得到的。因为如果使用 Adam，判别器的 loss 有时候会崩掉，然后 Adam 给出的更新方向与梯度方向夹角的 cos 值就会变成负数，判别器的 loss 梯度就变得不稳定了。但是改用 RMSProp 以后就解决了上述问题。</p>\n<p>PPS：推荐使用比较小的 learning rate，论文中使用的是 $\\alpha=0.00005$ 。</p>\n<h1 id=\"一个-TensorFlow-示例（基于-MNIST-数据库）\"><a href=\"#一个-TensorFlow-示例（基于-MNIST-数据库）\" class=\"headerlink\" title=\"一个 TensorFlow 示例（基于 MNIST 数据库）\"></a>一个 TensorFlow 示例（基于 MNIST 数据库）</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.examples.tutorials.mnist <span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.gridspec <span class=\"keyword\">as</span> gridspec</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mb_size = <span class=\"number\">32</span></span><br><span class=\"line\">X_dim = <span class=\"number\">784</span></span><br><span class=\"line\">z_dim = <span class=\"number\">10</span></span><br><span class=\"line\">h_dim = <span class=\"number\">128</span></span><br><span class=\"line\"></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">'MNIST_data/'</span>, one_hot=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot</span><span class=\"params\">(samples)</span>:</span></span><br><span class=\"line\">    fig = plt.figure(figsize=(<span class=\"number\">4</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    gs = gridspec.GridSpec(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    gs.update(wspace=<span class=\"number\">0.05</span>, hspace=<span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> enumerate(samples):</span><br><span class=\"line\">        ax = plt.subplot(gs[i])</span><br><span class=\"line\">        plt.axis(<span class=\"string\">'off'</span>)</span><br><span class=\"line\">        ax.set_xticklabels([])</span><br><span class=\"line\">        ax.set_yticklabels([])</span><br><span class=\"line\">        ax.set_aspect(<span class=\"string\">'equal'</span>)</span><br><span class=\"line\">        plt.imshow(sample.reshape(<span class=\"number\">28</span>, <span class=\"number\">28</span>), cmap=<span class=\"string\">'Greys_r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fig</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xavier_init</span><span class=\"params\">(size)</span>:</span></span><br><span class=\"line\">    in_dim = size[<span class=\"number\">0</span>]</span><br><span class=\"line\">    xavier_stddev = <span class=\"number\">1.</span> / tf.sqrt(in_dim / <span class=\"number\">2.</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.random_normal(shape=size, stddev=xavier_stddev)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">X = tf.placeholder(tf.float32, shape=[<span class=\"keyword\">None</span>, X_dim])</span><br><span class=\"line\"></span><br><span class=\"line\">D_W1 = tf.Variable(xavier_init([X_dim, h_dim]))</span><br><span class=\"line\">D_b1 = tf.Variable(tf.zeros(shape=[h_dim]))</span><br><span class=\"line\"></span><br><span class=\"line\">D_W2 = tf.Variable(xavier_init([h_dim, <span class=\"number\">1</span>]))</span><br><span class=\"line\">D_b2 = tf.Variable(tf.zeros(shape=[<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">theta_D = [D_W1, D_W2, D_b1, D_b2]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">z = tf.placeholder(tf.float32, shape=[<span class=\"keyword\">None</span>, z_dim])</span><br><span class=\"line\"></span><br><span class=\"line\">G_W1 = tf.Variable(xavier_init([z_dim, h_dim]))</span><br><span class=\"line\">G_b1 = tf.Variable(tf.zeros(shape=[h_dim]))</span><br><span class=\"line\"></span><br><span class=\"line\">G_W2 = tf.Variable(xavier_init([h_dim, X_dim]))</span><br><span class=\"line\">G_b2 = tf.Variable(tf.zeros(shape=[X_dim]))</span><br><span class=\"line\"></span><br><span class=\"line\">theta_G = [G_W1, G_W2, G_b1, G_b2]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sample_z</span><span class=\"params\">(m, n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.random.uniform(<span class=\"number\">-1.</span>, <span class=\"number\">1.</span>, size=[m, n])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generator</span><span class=\"params\">(z)</span>:</span></span><br><span class=\"line\">    G_h1 = tf.nn.relu(tf.matmul(z, G_W1) + G_b1)</span><br><span class=\"line\">    G_log_prob = tf.matmul(G_h1, G_W2) + G_b2</span><br><span class=\"line\">    G_prob = tf.nn.sigmoid(G_log_prob)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> G_prob</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discriminator</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    D_h1 = tf.nn.relu(tf.matmul(x, D_W1) + D_b1)</span><br><span class=\"line\">    out = tf.matmul(D_h1, D_W2) + D_b2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">G_sample = generator(z)</span><br><span class=\"line\">D_real = discriminator(X)</span><br><span class=\"line\">D_fake = discriminator(G_sample)</span><br><span class=\"line\"></span><br><span class=\"line\">D_loss = tf.reduce_mean(D_real) - tf.reduce_mean(D_fake)</span><br><span class=\"line\">G_loss = -tf.reduce_mean(D_fake)</span><br><span class=\"line\"></span><br><span class=\"line\">D_solver = (tf.train.RMSPropOptimizer(learning_rate=<span class=\"number\">1e-4</span>)</span><br><span class=\"line\">            .minimize(-D_loss, var_list=theta_D))</span><br><span class=\"line\">G_solver = (tf.train.RMSPropOptimizer(learning_rate=<span class=\"number\">1e-4</span>)</span><br><span class=\"line\">            .minimize(G_loss, var_list=theta_G))</span><br><span class=\"line\"></span><br><span class=\"line\">clip_D = [p.assign(tf.clip_by_value(p, <span class=\"number\">-0.01</span>, <span class=\"number\">0.01</span>)) <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> theta_D]</span><br><span class=\"line\"></span><br><span class=\"line\">sess = tf.Session()</span><br><span class=\"line\">sess.run(tf.global_variables_initializer())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">'out/'</span>):</span><br><span class=\"line\">    os.makedirs(<span class=\"string\">'out/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> range(<span class=\"number\">1000000</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        X_mb, _ = mnist.train.next_batch(mb_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        _, D_loss_curr, _ = sess.run(</span><br><span class=\"line\">            [D_solver, D_loss, clip_D],</span><br><span class=\"line\">            feed_dict=&#123;X: X_mb, z: sample_z(mb_size, z_dim)&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    _, G_loss_curr = sess.run(</span><br><span class=\"line\">        [G_solver, G_loss],</span><br><span class=\"line\">        feed_dict=&#123;z: sample_z(mb_size, z_dim)&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> it % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'Iter: &#123;&#125;; D loss: &#123;:.4&#125;; G_loss: &#123;:.4&#125;'</span>.format(it, D_loss_curr, G_loss_curr))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> it % <span class=\"number\">1000</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            samples = sess.run(G_sample, feed_dict=&#123;z: sample_z(<span class=\"number\">16</span>, z_dim)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            fig = plot(samples)</span><br><span class=\"line\">            plt.savefig(<span class=\"string\">'out/&#123;&#125;.png'</span>.format(str(i).zfill(<span class=\"number\">3</span>)), bbox_inches=<span class=\"string\">'tight'</span>)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            plt.close(fig)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原始-GAN-到底出了什么问题\"><a href=\"#原始-GAN-到底出了什么问题\" class=\"headerlink\" title=\"原始 GAN 到底出了什么问题\"></a>原始 GAN 到底出了什么问题</h1><p>在近似最优判别器下，最小化生成器的 loss 等价于最小化 $P_{\\text{data}}$ 和 $P_g$ 之间的 JS 散度，而由于 $P_{\\text{data}}$ 和 $P_g$ 几乎不可能有不可忽略的重叠，所以无论它们相距多远，JS 散度都是常数 $\\log 2$ ，最终导致生成器的梯度近似为 $0$ ，梯度消失。</p>\n<p>又因为最小化目标等价于最小化</p>\n<script type=\"math/tex; mode=display\">\nKL(P_{g} \\Vert P_{\\text{data}}) - 2 JS(P_{\\text{data}} \\Vert P_{g})</script><p>这个目标要求同时最小化生成分布和真是分布的 KL 散度，并且最大化两者的 JS 散度。产生了数值上的不稳定。最终造成生成器宁可多生成一些重复但是很“安全”的样本，也不愿意去生成多样性的样本。就发生了所谓的 collapse mode。</p>\n<h1 id=\"Wasserstein-GAN-改动了什么\"><a href=\"#Wasserstein-GAN-改动了什么\" class=\"headerlink\" title=\"Wasserstein GAN 改动了什么\"></a>Wasserstein GAN 改动了什么</h1><p>Wasserstein GAN 与 GAN 相比，只改了四点：</p>\n<ul>\n<li>判别器最后一层去掉 sigmoid</li>\n<li>生成器和判别器的 loss 不取 log</li>\n<li>每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数 c</li>\n<li>不要用基于动量的优化方法（包括 momentum 和 Adam），推荐使用 RMSProp，SGD 也行。</li>\n</ul>\n<p>PS：第四点是论文作者从实验中用玄学得到的。因为如果使用 Adam，判别器的 loss 有时候会崩掉，然后 Adam 给出的更新方向与梯度方向夹角的 cos 值就会变成负数，判别器的 loss 梯度就变得不稳定了。但是改用 RMSProp 以后就解决了上述问题。</p>\n<p>PPS：推荐使用比较小的 learning rate，论文中使用的是 $\\alpha=0.00005$ 。</p>\n<h1 id=\"一个-TensorFlow-示例（基于-MNIST-数据库）\"><a href=\"#一个-TensorFlow-示例（基于-MNIST-数据库）\" class=\"headerlink\" title=\"一个 TensorFlow 示例（基于 MNIST 数据库）\"></a>一个 TensorFlow 示例（基于 MNIST 数据库）</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow.examples.tutorials.mnist <span class=\"keyword\">import</span> input_data</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.gridspec <span class=\"keyword\">as</span> gridspec</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mb_size = <span class=\"number\">32</span></span><br><span class=\"line\">X_dim = <span class=\"number\">784</span></span><br><span class=\"line\">z_dim = <span class=\"number\">10</span></span><br><span class=\"line\">h_dim = <span class=\"number\">128</span></span><br><span class=\"line\"></span><br><span class=\"line\">mnist = input_data.read_data_sets(<span class=\"string\">'MNIST_data/'</span>, one_hot=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plot</span><span class=\"params\">(samples)</span>:</span></span><br><span class=\"line\">    fig = plt.figure(figsize=(<span class=\"number\">4</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    gs = gridspec.GridSpec(<span class=\"number\">4</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    gs.update(wspace=<span class=\"number\">0.05</span>, hspace=<span class=\"number\">0.05</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> enumerate(samples):</span><br><span class=\"line\">        ax = plt.subplot(gs[i])</span><br><span class=\"line\">        plt.axis(<span class=\"string\">'off'</span>)</span><br><span class=\"line\">        ax.set_xticklabels([])</span><br><span class=\"line\">        ax.set_yticklabels([])</span><br><span class=\"line\">        ax.set_aspect(<span class=\"string\">'equal'</span>)</span><br><span class=\"line\">        plt.imshow(sample.reshape(<span class=\"number\">28</span>, <span class=\"number\">28</span>), cmap=<span class=\"string\">'Greys_r'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fig</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xavier_init</span><span class=\"params\">(size)</span>:</span></span><br><span class=\"line\">    in_dim = size[<span class=\"number\">0</span>]</span><br><span class=\"line\">    xavier_stddev = <span class=\"number\">1.</span> / tf.sqrt(in_dim / <span class=\"number\">2.</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tf.random_normal(shape=size, stddev=xavier_stddev)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">X = tf.placeholder(tf.float32, shape=[<span class=\"keyword\">None</span>, X_dim])</span><br><span class=\"line\"></span><br><span class=\"line\">D_W1 = tf.Variable(xavier_init([X_dim, h_dim]))</span><br><span class=\"line\">D_b1 = tf.Variable(tf.zeros(shape=[h_dim]))</span><br><span class=\"line\"></span><br><span class=\"line\">D_W2 = tf.Variable(xavier_init([h_dim, <span class=\"number\">1</span>]))</span><br><span class=\"line\">D_b2 = tf.Variable(tf.zeros(shape=[<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">theta_D = [D_W1, D_W2, D_b1, D_b2]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">z = tf.placeholder(tf.float32, shape=[<span class=\"keyword\">None</span>, z_dim])</span><br><span class=\"line\"></span><br><span class=\"line\">G_W1 = tf.Variable(xavier_init([z_dim, h_dim]))</span><br><span class=\"line\">G_b1 = tf.Variable(tf.zeros(shape=[h_dim]))</span><br><span class=\"line\"></span><br><span class=\"line\">G_W2 = tf.Variable(xavier_init([h_dim, X_dim]))</span><br><span class=\"line\">G_b2 = tf.Variable(tf.zeros(shape=[X_dim]))</span><br><span class=\"line\"></span><br><span class=\"line\">theta_G = [G_W1, G_W2, G_b1, G_b2]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sample_z</span><span class=\"params\">(m, n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.random.uniform(<span class=\"number\">-1.</span>, <span class=\"number\">1.</span>, size=[m, n])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generator</span><span class=\"params\">(z)</span>:</span></span><br><span class=\"line\">    G_h1 = tf.nn.relu(tf.matmul(z, G_W1) + G_b1)</span><br><span class=\"line\">    G_log_prob = tf.matmul(G_h1, G_W2) + G_b2</span><br><span class=\"line\">    G_prob = tf.nn.sigmoid(G_log_prob)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> G_prob</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">discriminator</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    D_h1 = tf.nn.relu(tf.matmul(x, D_W1) + D_b1)</span><br><span class=\"line\">    out = tf.matmul(D_h1, D_W2) + D_b2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">G_sample = generator(z)</span><br><span class=\"line\">D_real = discriminator(X)</span><br><span class=\"line\">D_fake = discriminator(G_sample)</span><br><span class=\"line\"></span><br><span class=\"line\">D_loss = tf.reduce_mean(D_real) - tf.reduce_mean(D_fake)</span><br><span class=\"line\">G_loss = -tf.reduce_mean(D_fake)</span><br><span class=\"line\"></span><br><span class=\"line\">D_solver = (tf.train.RMSPropOptimizer(learning_rate=<span class=\"number\">1e-4</span>)</span><br><span class=\"line\">            .minimize(-D_loss, var_list=theta_D))</span><br><span class=\"line\">G_solver = (tf.train.RMSPropOptimizer(learning_rate=<span class=\"number\">1e-4</span>)</span><br><span class=\"line\">            .minimize(G_loss, var_list=theta_G))</span><br><span class=\"line\"></span><br><span class=\"line\">clip_D = [p.assign(tf.clip_by_value(p, <span class=\"number\">-0.01</span>, <span class=\"number\">0.01</span>)) <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> theta_D]</span><br><span class=\"line\"></span><br><span class=\"line\">sess = tf.Session()</span><br><span class=\"line\">sess.run(tf.global_variables_initializer())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">'out/'</span>):</span><br><span class=\"line\">    os.makedirs(<span class=\"string\">'out/'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> range(<span class=\"number\">1000000</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        X_mb, _ = mnist.train.next_batch(mb_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        _, D_loss_curr, _ = sess.run(</span><br><span class=\"line\">            [D_solver, D_loss, clip_D],</span><br><span class=\"line\">            feed_dict=&#123;X: X_mb, z: sample_z(mb_size, z_dim)&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    _, G_loss_curr = sess.run(</span><br><span class=\"line\">        [G_solver, G_loss],</span><br><span class=\"line\">        feed_dict=&#123;z: sample_z(mb_size, z_dim)&#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> it % <span class=\"number\">100</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'Iter: &#123;&#125;; D loss: &#123;:.4&#125;; G_loss: &#123;:.4&#125;'</span>.format(it, D_loss_curr, G_loss_curr))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> it % <span class=\"number\">1000</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            samples = sess.run(G_sample, feed_dict=&#123;z: sample_z(<span class=\"number\">16</span>, z_dim)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            fig = plot(samples)</span><br><span class=\"line\">            plt.savefig(<span class=\"string\">'out/&#123;&#125;.png'</span>.format(str(i).zfill(<span class=\"number\">3</span>)), bbox_inches=<span class=\"string\">'tight'</span>)</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            plt.close(fig)</span><br></pre></td></tr></table></figure>\n"},{"title":"梯度下降法家族","date":"2017-12-23T11:51:16.000Z","description":"根据一个通式说明梯度下降法全家族。","_content":"\n# 用一个通式说明梯度下降\n\n梯度下降优化法经历了 SGD→SGDM→NAG→AdaGrad→AdaDelta→Adam→Nadam 这样的发展历程。之所以会不断地提出更加优化的方法，究其原因，是引入了动量（Momentum）这个概念。最初，人们引入一阶动量来给梯度下降法加入惯性（即，越陡的坡可以允许跑得更快些）。后来，在引入二阶动量之后，才真正意味着“自适应学习率”优化算法时代的到来。\n\n我们用一个通式来描述梯度下降法，掌握了这个通式，你就也可以自己设计自己的优化算法了。\n\n首先定义：\n\n- 待优化参数：$w$\n- 目标函数：$f(w)$\n- 初始学习率：$\\alpha$\n\n然后进行迭代优化。在每个 epoch $t$ ：\n\n> 1. 计算目标函数关于当前参数的梯度：$g_{t} = \\nabla f(w_{t})$\n> 2. 根据历史梯度计算一阶动量和二阶动量：$m_{t} = \\phi(g_{1}, g_{2}, \\cdots , g_{t}); \\, V_{t} = \\psi(g_{1}, g_{2}, \\cdots , g_{t})$\n> 3. 计算当前时刻的下降梯度：$\\eta_{t} = \\alpha \\cdot m_{t} \\Big/ \\sqrt{V_{t}}$\n> 4. 根据下降梯度进行更新：$w_{t+1} = w_{t} - \\eta_{t}$\n\n## SGD\n\nSGD 没有动量的概念，即：$m_{t} = g_{t}; \\, V_{t} = I^{2}$\n\n此时，$\\eta_{t} = \\alpha \\cdot g_{t}$\n\nSGD 最大的缺点是下降速度慢，而且可能会在沟壑的两边持续震荡，停留在一个局部最优点。\n\n## SGD with Momentum\n\n为了抑制 SGD 的震荡，SGDM 引入了惯性，即一阶动量。如果发现是陡坡，就用惯性跑得快一些。此时：$m_{t} = \\beta_{1} \\cdot m_{t-1} + (1 - \\beta_{1}) \\cdot g_{t}$\n\n我们把这个式子递归一下就可以看出，一阶动量其实是各个时刻梯度方向的指数移动平均值，约等于最近 $1 / (1 - \\beta_{1})$ 个时刻的梯度向量和的平均值。\n\n$\\beta_{1}$ 的经验值为 0.9 ，也就是每次下降时更偏向于此前累积的下降方向，并稍微偏向于当前下降方向。（就像拐弯时刹不住车，或者说得好听点——漂移）。\n\n## SGD with Nesterov Acceleration\n\nSGD 还有一个问题是会被困在一个局部最优点里。就像被一个小盆地周围的矮山挡住了视野，看不到更远的更深的沟壑。\n\nNesterov 提出了一个方法是既然我们有了动量，那么我们可以在步骤 1 中先不考虑当前的梯度。每次决定下降方向的时候先按照一阶动量的方向走一步试试，然后在考虑这个新地方的梯度方向。此时的梯度就变成了：$g_{t} = \\nabla f(w_{t} - \\alpha \\cdot m_{t-1})$ 。\n\n我们用这个梯度带入 SGDM 中计算 $m_{t}$ 的式子里去，然后再计算当前时刻应有的梯度并更新这一次的参数。\n\n## AdaGrad\n\n终于引入了二阶动量。\n\n想法是这样：神经网络中有大量的参数，对于经常更新的参数，我们已经积累了大量关于它们的知识，不希望它们被单个样本影响太大，希望学习速率慢一些；而对于不经常更新的参数，我们对于它们了解的信息太少，希望能从每个偶然出现的样本身上多学一些，学习速率大一些。\n\n那么怎么样去度量历史更新频率呢？采用二阶动量——该维度上，所有梯度值的平方和：$V_{t} = \\sum_{\\tau = 1}^{t} g_{\\tau}^{2}$ 。\n\n回顾步骤 3 中的下降梯度：$\\eta_{t} = \\alpha \\cdot m_{t} \\Big/ \\sqrt{V_{t}}$ 。我们发现引入二阶动量的意义上给了学习率一个缩放比例，从而达到了自适应学习率的效果（Ada = Adaptive）。（一般为了防止分母为 0 ，会对二阶动量做一个平滑。）\n\n这个方法有一个问题是，因为二阶动量是单调递增的，所以学习率会很快减至 0 ，这样可能会使训练过程提前结束。\n\n## AdaDelta / RMSProp\n\n由于 AdaGrad 的学习率单调递减太快，我们考虑改变二阶动量的计算策略：不累计全部梯度，只关注过去某一窗口内的梯度。这个就是名字里 Delta 的来历。\n\n修改的思路很直接，前面我们说过，指数移动平均值大约是过去一段时间的平均值，因此我们用这个方法来计算二阶累积动量：$V_{t} = \\beta_{2} \\cdot V_{t-1} + (1 - \\beta_{2}) \\cdot g_{t}^{2}$ 。\n\n## Adam / Nadam\n\n讲到这个 Adam 和 Nadam 就自然而然的出现了，既然有了一阶动量和二阶动量，干嘛不都用起来呢？所以：\n\nAdam = Adaptive + Momentum。\n\nNadam = Nesterov + Adam\n\n※上文中提到的 $\\beta_{1}$ 和 $\\beta_{2}$ 就是在一些深度学习框架里提到一阶动量和二阶动量时要传递的两个系数。\n\n# 不忘初心，为什么还要使用 SGD？\n\n既然 Adam 和 Nadam 这么厉害，为什么学术界在发论文时还有很多大牛只使用 SGD ？\n\n理由很简单：应用是应用，学术是学术。\n\nSGD 虽然不那么“聪明”，但是它“单纯”。所有的控制都在你自己手中，用它才不会影响你对其它因素的研究。\n\n而其它的算法实在太“快”了，所以它们有时不收敛，有时不能达到最优解。\n\n# 最后的一句话\n\n算法没有好坏，最适合数据的才是最好的，永远记住：No free lunch theorem。","source":"_posts/GD-Series.md","raw":"---\ntitle: 梯度下降法家族\ndate: 2017-12-23 19:51:16\ncategories: ML\ntags:\n     - GD\n     - Momentum\ndescription: 根据一个通式说明梯度下降法全家族。\n---\n\n# 用一个通式说明梯度下降\n\n梯度下降优化法经历了 SGD→SGDM→NAG→AdaGrad→AdaDelta→Adam→Nadam 这样的发展历程。之所以会不断地提出更加优化的方法，究其原因，是引入了动量（Momentum）这个概念。最初，人们引入一阶动量来给梯度下降法加入惯性（即，越陡的坡可以允许跑得更快些）。后来，在引入二阶动量之后，才真正意味着“自适应学习率”优化算法时代的到来。\n\n我们用一个通式来描述梯度下降法，掌握了这个通式，你就也可以自己设计自己的优化算法了。\n\n首先定义：\n\n- 待优化参数：$w$\n- 目标函数：$f(w)$\n- 初始学习率：$\\alpha$\n\n然后进行迭代优化。在每个 epoch $t$ ：\n\n> 1. 计算目标函数关于当前参数的梯度：$g_{t} = \\nabla f(w_{t})$\n> 2. 根据历史梯度计算一阶动量和二阶动量：$m_{t} = \\phi(g_{1}, g_{2}, \\cdots , g_{t}); \\, V_{t} = \\psi(g_{1}, g_{2}, \\cdots , g_{t})$\n> 3. 计算当前时刻的下降梯度：$\\eta_{t} = \\alpha \\cdot m_{t} \\Big/ \\sqrt{V_{t}}$\n> 4. 根据下降梯度进行更新：$w_{t+1} = w_{t} - \\eta_{t}$\n\n## SGD\n\nSGD 没有动量的概念，即：$m_{t} = g_{t}; \\, V_{t} = I^{2}$\n\n此时，$\\eta_{t} = \\alpha \\cdot g_{t}$\n\nSGD 最大的缺点是下降速度慢，而且可能会在沟壑的两边持续震荡，停留在一个局部最优点。\n\n## SGD with Momentum\n\n为了抑制 SGD 的震荡，SGDM 引入了惯性，即一阶动量。如果发现是陡坡，就用惯性跑得快一些。此时：$m_{t} = \\beta_{1} \\cdot m_{t-1} + (1 - \\beta_{1}) \\cdot g_{t}$\n\n我们把这个式子递归一下就可以看出，一阶动量其实是各个时刻梯度方向的指数移动平均值，约等于最近 $1 / (1 - \\beta_{1})$ 个时刻的梯度向量和的平均值。\n\n$\\beta_{1}$ 的经验值为 0.9 ，也就是每次下降时更偏向于此前累积的下降方向，并稍微偏向于当前下降方向。（就像拐弯时刹不住车，或者说得好听点——漂移）。\n\n## SGD with Nesterov Acceleration\n\nSGD 还有一个问题是会被困在一个局部最优点里。就像被一个小盆地周围的矮山挡住了视野，看不到更远的更深的沟壑。\n\nNesterov 提出了一个方法是既然我们有了动量，那么我们可以在步骤 1 中先不考虑当前的梯度。每次决定下降方向的时候先按照一阶动量的方向走一步试试，然后在考虑这个新地方的梯度方向。此时的梯度就变成了：$g_{t} = \\nabla f(w_{t} - \\alpha \\cdot m_{t-1})$ 。\n\n我们用这个梯度带入 SGDM 中计算 $m_{t}$ 的式子里去，然后再计算当前时刻应有的梯度并更新这一次的参数。\n\n## AdaGrad\n\n终于引入了二阶动量。\n\n想法是这样：神经网络中有大量的参数，对于经常更新的参数，我们已经积累了大量关于它们的知识，不希望它们被单个样本影响太大，希望学习速率慢一些；而对于不经常更新的参数，我们对于它们了解的信息太少，希望能从每个偶然出现的样本身上多学一些，学习速率大一些。\n\n那么怎么样去度量历史更新频率呢？采用二阶动量——该维度上，所有梯度值的平方和：$V_{t} = \\sum_{\\tau = 1}^{t} g_{\\tau}^{2}$ 。\n\n回顾步骤 3 中的下降梯度：$\\eta_{t} = \\alpha \\cdot m_{t} \\Big/ \\sqrt{V_{t}}$ 。我们发现引入二阶动量的意义上给了学习率一个缩放比例，从而达到了自适应学习率的效果（Ada = Adaptive）。（一般为了防止分母为 0 ，会对二阶动量做一个平滑。）\n\n这个方法有一个问题是，因为二阶动量是单调递增的，所以学习率会很快减至 0 ，这样可能会使训练过程提前结束。\n\n## AdaDelta / RMSProp\n\n由于 AdaGrad 的学习率单调递减太快，我们考虑改变二阶动量的计算策略：不累计全部梯度，只关注过去某一窗口内的梯度。这个就是名字里 Delta 的来历。\n\n修改的思路很直接，前面我们说过，指数移动平均值大约是过去一段时间的平均值，因此我们用这个方法来计算二阶累积动量：$V_{t} = \\beta_{2} \\cdot V_{t-1} + (1 - \\beta_{2}) \\cdot g_{t}^{2}$ 。\n\n## Adam / Nadam\n\n讲到这个 Adam 和 Nadam 就自然而然的出现了，既然有了一阶动量和二阶动量，干嘛不都用起来呢？所以：\n\nAdam = Adaptive + Momentum。\n\nNadam = Nesterov + Adam\n\n※上文中提到的 $\\beta_{1}$ 和 $\\beta_{2}$ 就是在一些深度学习框架里提到一阶动量和二阶动量时要传递的两个系数。\n\n# 不忘初心，为什么还要使用 SGD？\n\n既然 Adam 和 Nadam 这么厉害，为什么学术界在发论文时还有很多大牛只使用 SGD ？\n\n理由很简单：应用是应用，学术是学术。\n\nSGD 虽然不那么“聪明”，但是它“单纯”。所有的控制都在你自己手中，用它才不会影响你对其它因素的研究。\n\n而其它的算法实在太“快”了，所以它们有时不收敛，有时不能达到最优解。\n\n# 最后的一句话\n\n算法没有好坏，最适合数据的才是最好的，永远记住：No free lunch theorem。","slug":"GD-Series","published":1,"updated":"2021-07-19T13:03:31.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktiv80005qxt6q11ojijw","content":"<h1 id=\"用一个通式说明梯度下降\"><a href=\"#用一个通式说明梯度下降\" class=\"headerlink\" title=\"用一个通式说明梯度下降\"></a>用一个通式说明梯度下降</h1><p>梯度下降优化法经历了 SGD→SGDM→NAG→AdaGrad→AdaDelta→Adam→Nadam 这样的发展历程。之所以会不断地提出更加优化的方法，究其原因，是引入了动量（Momentum）这个概念。最初，人们引入一阶动量来给梯度下降法加入惯性（即，越陡的坡可以允许跑得更快些）。后来，在引入二阶动量之后，才真正意味着“自适应学习率”优化算法时代的到来。</p>\n<p>我们用一个通式来描述梯度下降法，掌握了这个通式，你就也可以自己设计自己的优化算法了。</p>\n<p>首先定义：</p>\n<ul>\n<li>待优化参数：$w$</li>\n<li>目标函数：$f(w)$</li>\n<li>初始学习率：$\\alpha$</li>\n</ul>\n<p>然后进行迭代优化。在每个 epoch $t$ ：</p>\n<blockquote>\n<ol>\n<li>计算目标函数关于当前参数的梯度：$g_{t} = \\nabla f(w_{t})$</li>\n<li>根据历史梯度计算一阶动量和二阶动量：$m_{t} = \\phi(g_{1}, g_{2}, \\cdots , g_{t}); \\, V_{t} = \\psi(g_{1}, g_{2}, \\cdots , g_{t})$</li>\n<li>计算当前时刻的下降梯度：$\\eta_{t} = \\alpha \\cdot m_{t} \\Big/ \\sqrt{V_{t}}$</li>\n<li>根据下降梯度进行更新：$w_{t+1} = w_{t} - \\eta_{t}$</li>\n</ol>\n</blockquote>\n<h2 id=\"SGD\"><a href=\"#SGD\" class=\"headerlink\" title=\"SGD\"></a>SGD</h2><p>SGD 没有动量的概念，即：$m_{t} = g_{t}; \\, V_{t} = I^{2}$</p>\n<p>此时，$\\eta_{t} = \\alpha \\cdot g_{t}$</p>\n<p>SGD 最大的缺点是下降速度慢，而且可能会在沟壑的两边持续震荡，停留在一个局部最优点。</p>\n<h2 id=\"SGD-with-Momentum\"><a href=\"#SGD-with-Momentum\" class=\"headerlink\" title=\"SGD with Momentum\"></a>SGD with Momentum</h2><p>为了抑制 SGD 的震荡，SGDM 引入了惯性，即一阶动量。如果发现是陡坡，就用惯性跑得快一些。此时：$m_{t} = \\beta_{1} \\cdot m_{t-1} + (1 - \\beta_{1}) \\cdot g_{t}$</p>\n<p>我们把这个式子递归一下就可以看出，一阶动量其实是各个时刻梯度方向的指数移动平均值，约等于最近 $1 / (1 - \\beta_{1})$ 个时刻的梯度向量和的平均值。</p>\n<p>$\\beta_{1}$ 的经验值为 0.9 ，也就是每次下降时更偏向于此前累积的下降方向，并稍微偏向于当前下降方向。（就像拐弯时刹不住车，或者说得好听点——漂移）。</p>\n<h2 id=\"SGD-with-Nesterov-Acceleration\"><a href=\"#SGD-with-Nesterov-Acceleration\" class=\"headerlink\" title=\"SGD with Nesterov Acceleration\"></a>SGD with Nesterov Acceleration</h2><p>SGD 还有一个问题是会被困在一个局部最优点里。就像被一个小盆地周围的矮山挡住了视野，看不到更远的更深的沟壑。</p>\n<p>Nesterov 提出了一个方法是既然我们有了动量，那么我们可以在步骤 1 中先不考虑当前的梯度。每次决定下降方向的时候先按照一阶动量的方向走一步试试，然后在考虑这个新地方的梯度方向。此时的梯度就变成了：$g_{t} = \\nabla f(w_{t} - \\alpha \\cdot m_{t-1})$ 。</p>\n<p>我们用这个梯度带入 SGDM 中计算 $m_{t}$ 的式子里去，然后再计算当前时刻应有的梯度并更新这一次的参数。</p>\n<h2 id=\"AdaGrad\"><a href=\"#AdaGrad\" class=\"headerlink\" title=\"AdaGrad\"></a>AdaGrad</h2><p>终于引入了二阶动量。</p>\n<p>想法是这样：神经网络中有大量的参数，对于经常更新的参数，我们已经积累了大量关于它们的知识，不希望它们被单个样本影响太大，希望学习速率慢一些；而对于不经常更新的参数，我们对于它们了解的信息太少，希望能从每个偶然出现的样本身上多学一些，学习速率大一些。</p>\n<p>那么怎么样去度量历史更新频率呢？采用二阶动量——该维度上，所有梯度值的平方和：$V_{t} = \\sum_{\\tau = 1}^{t} g_{\\tau}^{2}$ 。</p>\n<p>回顾步骤 3 中的下降梯度：$\\eta_{t} = \\alpha \\cdot m_{t} \\Big/ \\sqrt{V_{t}}$ 。我们发现引入二阶动量的意义上给了学习率一个缩放比例，从而达到了自适应学习率的效果（Ada = Adaptive）。（一般为了防止分母为 0 ，会对二阶动量做一个平滑。）</p>\n<p>这个方法有一个问题是，因为二阶动量是单调递增的，所以学习率会很快减至 0 ，这样可能会使训练过程提前结束。</p>\n<h2 id=\"AdaDelta-RMSProp\"><a href=\"#AdaDelta-RMSProp\" class=\"headerlink\" title=\"AdaDelta / RMSProp\"></a>AdaDelta / RMSProp</h2><p>由于 AdaGrad 的学习率单调递减太快，我们考虑改变二阶动量的计算策略：不累计全部梯度，只关注过去某一窗口内的梯度。这个就是名字里 Delta 的来历。</p>\n<p>修改的思路很直接，前面我们说过，指数移动平均值大约是过去一段时间的平均值，因此我们用这个方法来计算二阶累积动量：$V_{t} = \\beta_{2} \\cdot V_{t-1} + (1 - \\beta_{2}) \\cdot g_{t}^{2}$ 。</p>\n<h2 id=\"Adam-Nadam\"><a href=\"#Adam-Nadam\" class=\"headerlink\" title=\"Adam / Nadam\"></a>Adam / Nadam</h2><p>讲到这个 Adam 和 Nadam 就自然而然的出现了，既然有了一阶动量和二阶动量，干嘛不都用起来呢？所以：</p>\n<p>Adam = Adaptive + Momentum。</p>\n<p>Nadam = Nesterov + Adam</p>\n<p>※上文中提到的 $\\beta_{1}$ 和 $\\beta_{2}$ 就是在一些深度学习框架里提到一阶动量和二阶动量时要传递的两个系数。</p>\n<h1 id=\"不忘初心，为什么还要使用-SGD？\"><a href=\"#不忘初心，为什么还要使用-SGD？\" class=\"headerlink\" title=\"不忘初心，为什么还要使用 SGD？\"></a>不忘初心，为什么还要使用 SGD？</h1><p>既然 Adam 和 Nadam 这么厉害，为什么学术界在发论文时还有很多大牛只使用 SGD ？</p>\n<p>理由很简单：应用是应用，学术是学术。</p>\n<p>SGD 虽然不那么“聪明”，但是它“单纯”。所有的控制都在你自己手中，用它才不会影响你对其它因素的研究。</p>\n<p>而其它的算法实在太“快”了，所以它们有时不收敛，有时不能达到最优解。</p>\n<h1 id=\"最后的一句话\"><a href=\"#最后的一句话\" class=\"headerlink\" title=\"最后的一句话\"></a>最后的一句话</h1><p>算法没有好坏，最适合数据的才是最好的，永远记住：No free lunch theorem。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用一个通式说明梯度下降\"><a href=\"#用一个通式说明梯度下降\" class=\"headerlink\" title=\"用一个通式说明梯度下降\"></a>用一个通式说明梯度下降</h1><p>梯度下降优化法经历了 SGD→SGDM→NAG→AdaGrad→AdaDelta→Adam→Nadam 这样的发展历程。之所以会不断地提出更加优化的方法，究其原因，是引入了动量（Momentum）这个概念。最初，人们引入一阶动量来给梯度下降法加入惯性（即，越陡的坡可以允许跑得更快些）。后来，在引入二阶动量之后，才真正意味着“自适应学习率”优化算法时代的到来。</p>\n<p>我们用一个通式来描述梯度下降法，掌握了这个通式，你就也可以自己设计自己的优化算法了。</p>\n<p>首先定义：</p>\n<ul>\n<li>待优化参数：$w$</li>\n<li>目标函数：$f(w)$</li>\n<li>初始学习率：$\\alpha$</li>\n</ul>\n<p>然后进行迭代优化。在每个 epoch $t$ ：</p>\n<blockquote>\n<ol>\n<li>计算目标函数关于当前参数的梯度：$g_{t} = \\nabla f(w_{t})$</li>\n<li>根据历史梯度计算一阶动量和二阶动量：$m_{t} = \\phi(g_{1}, g_{2}, \\cdots , g_{t}); \\, V_{t} = \\psi(g_{1}, g_{2}, \\cdots , g_{t})$</li>\n<li>计算当前时刻的下降梯度：$\\eta_{t} = \\alpha \\cdot m_{t} \\Big/ \\sqrt{V_{t}}$</li>\n<li>根据下降梯度进行更新：$w_{t+1} = w_{t} - \\eta_{t}$</li>\n</ol>\n</blockquote>\n<h2 id=\"SGD\"><a href=\"#SGD\" class=\"headerlink\" title=\"SGD\"></a>SGD</h2><p>SGD 没有动量的概念，即：$m_{t} = g_{t}; \\, V_{t} = I^{2}$</p>\n<p>此时，$\\eta_{t} = \\alpha \\cdot g_{t}$</p>\n<p>SGD 最大的缺点是下降速度慢，而且可能会在沟壑的两边持续震荡，停留在一个局部最优点。</p>\n<h2 id=\"SGD-with-Momentum\"><a href=\"#SGD-with-Momentum\" class=\"headerlink\" title=\"SGD with Momentum\"></a>SGD with Momentum</h2><p>为了抑制 SGD 的震荡，SGDM 引入了惯性，即一阶动量。如果发现是陡坡，就用惯性跑得快一些。此时：$m_{t} = \\beta_{1} \\cdot m_{t-1} + (1 - \\beta_{1}) \\cdot g_{t}$</p>\n<p>我们把这个式子递归一下就可以看出，一阶动量其实是各个时刻梯度方向的指数移动平均值，约等于最近 $1 / (1 - \\beta_{1})$ 个时刻的梯度向量和的平均值。</p>\n<p>$\\beta_{1}$ 的经验值为 0.9 ，也就是每次下降时更偏向于此前累积的下降方向，并稍微偏向于当前下降方向。（就像拐弯时刹不住车，或者说得好听点——漂移）。</p>\n<h2 id=\"SGD-with-Nesterov-Acceleration\"><a href=\"#SGD-with-Nesterov-Acceleration\" class=\"headerlink\" title=\"SGD with Nesterov Acceleration\"></a>SGD with Nesterov Acceleration</h2><p>SGD 还有一个问题是会被困在一个局部最优点里。就像被一个小盆地周围的矮山挡住了视野，看不到更远的更深的沟壑。</p>\n<p>Nesterov 提出了一个方法是既然我们有了动量，那么我们可以在步骤 1 中先不考虑当前的梯度。每次决定下降方向的时候先按照一阶动量的方向走一步试试，然后在考虑这个新地方的梯度方向。此时的梯度就变成了：$g_{t} = \\nabla f(w_{t} - \\alpha \\cdot m_{t-1})$ 。</p>\n<p>我们用这个梯度带入 SGDM 中计算 $m_{t}$ 的式子里去，然后再计算当前时刻应有的梯度并更新这一次的参数。</p>\n<h2 id=\"AdaGrad\"><a href=\"#AdaGrad\" class=\"headerlink\" title=\"AdaGrad\"></a>AdaGrad</h2><p>终于引入了二阶动量。</p>\n<p>想法是这样：神经网络中有大量的参数，对于经常更新的参数，我们已经积累了大量关于它们的知识，不希望它们被单个样本影响太大，希望学习速率慢一些；而对于不经常更新的参数，我们对于它们了解的信息太少，希望能从每个偶然出现的样本身上多学一些，学习速率大一些。</p>\n<p>那么怎么样去度量历史更新频率呢？采用二阶动量——该维度上，所有梯度值的平方和：$V_{t} = \\sum_{\\tau = 1}^{t} g_{\\tau}^{2}$ 。</p>\n<p>回顾步骤 3 中的下降梯度：$\\eta_{t} = \\alpha \\cdot m_{t} \\Big/ \\sqrt{V_{t}}$ 。我们发现引入二阶动量的意义上给了学习率一个缩放比例，从而达到了自适应学习率的效果（Ada = Adaptive）。（一般为了防止分母为 0 ，会对二阶动量做一个平滑。）</p>\n<p>这个方法有一个问题是，因为二阶动量是单调递增的，所以学习率会很快减至 0 ，这样可能会使训练过程提前结束。</p>\n<h2 id=\"AdaDelta-RMSProp\"><a href=\"#AdaDelta-RMSProp\" class=\"headerlink\" title=\"AdaDelta / RMSProp\"></a>AdaDelta / RMSProp</h2><p>由于 AdaGrad 的学习率单调递减太快，我们考虑改变二阶动量的计算策略：不累计全部梯度，只关注过去某一窗口内的梯度。这个就是名字里 Delta 的来历。</p>\n<p>修改的思路很直接，前面我们说过，指数移动平均值大约是过去一段时间的平均值，因此我们用这个方法来计算二阶累积动量：$V_{t} = \\beta_{2} \\cdot V_{t-1} + (1 - \\beta_{2}) \\cdot g_{t}^{2}$ 。</p>\n<h2 id=\"Adam-Nadam\"><a href=\"#Adam-Nadam\" class=\"headerlink\" title=\"Adam / Nadam\"></a>Adam / Nadam</h2><p>讲到这个 Adam 和 Nadam 就自然而然的出现了，既然有了一阶动量和二阶动量，干嘛不都用起来呢？所以：</p>\n<p>Adam = Adaptive + Momentum。</p>\n<p>Nadam = Nesterov + Adam</p>\n<p>※上文中提到的 $\\beta_{1}$ 和 $\\beta_{2}$ 就是在一些深度学习框架里提到一阶动量和二阶动量时要传递的两个系数。</p>\n<h1 id=\"不忘初心，为什么还要使用-SGD？\"><a href=\"#不忘初心，为什么还要使用-SGD？\" class=\"headerlink\" title=\"不忘初心，为什么还要使用 SGD？\"></a>不忘初心，为什么还要使用 SGD？</h1><p>既然 Adam 和 Nadam 这么厉害，为什么学术界在发论文时还有很多大牛只使用 SGD ？</p>\n<p>理由很简单：应用是应用，学术是学术。</p>\n<p>SGD 虽然不那么“聪明”，但是它“单纯”。所有的控制都在你自己手中，用它才不会影响你对其它因素的研究。</p>\n<p>而其它的算法实在太“快”了，所以它们有时不收敛，有时不能达到最优解。</p>\n<h1 id=\"最后的一句话\"><a href=\"#最后的一句话\" class=\"headerlink\" title=\"最后的一句话\"></a>最后的一句话</h1><p>算法没有好坏，最适合数据的才是最好的，永远记住：No free lunch theorem。</p>\n"},{"title":"说一说核方法（一）——核方法与核函数简介","date":"2017-08-13T08:38:35.000Z","description":"本文介绍了对核方法和核函数的一些理解。","_content":"\n本文由好友史博士点~~播~~写。\n\n昨日史博士忽然来问我博客可以点播主题吗？大家都知道我这个人一沾数学就是兴奋的，于是就同意了。\n因此史博士就提到了对于核函数（kernel function）这个东西不容易说明白的话题，还有关于核函数是否就是将一个低维映射到高维的问题。\n\n相信很多人都对这个存在一些问题，原因是很多大牛在讲课的时候都是只讲果不讲因的，所以让初学者吃了很多亏，不知道核（kernel）这个东西是一个独立概念。\n这个东西**大概的确**（这里使用了鲁迅体）也没法在机器学习课程中讲解，因为需要涉及到一些泛函知识。\n那么，这些知识将在本系列的第二篇——“掉粉”文中进行讲解（因为是纯数文）。\n\n这篇文章的话，说以下几个事情：\n\n1. kernel 这个东西在 SVM 中真的只是一少部分，为了面试的话大概了解一下就可以了，面试官也很少有懂的。并不是说大家不爱学习，而是做 kernel 的人根本不关心 SVM 是什么，做 SVM 的人也根本不用关心 kernel 是个什么鬼。\n\n2. **kernel 和 SVM 是两个完全没有关系的概念。**实际上在 SVM 提出以前，人们就提出了再生核希尔伯特空间（reproducing kernel Hilbert space，RKHS）这个概念，并且把它应用在信号处理中。如：在信号检测（signal detection）问题中，对于一条时间序列（time series），我如何知道它是一个随机步行（random walk）的噪音序列呢？还是有一个特定的模式（pattern）在里面呢？在这个情景下，RKHS 理论就给出了一个通过求解似然率（likelihood ratio）的假设检验方案，其中的 kernel 是某个随机过程在两个不同时间点的相关性（correlation）。\n\n   另外，核方法可以用在 逻辑斯谛回归（logistic regression）、最小二乘法（least square）、降维（dimension reduction）等多处地方，也不是只和 SVM 这个概念绑定的。\n\n3. **很多人觉得 kernel 定义了一个从低维到高维的映射，这是不准确的。**首先不是所有空间都有维度定义，比如高斯核（Gaussian kernel）——也称径向基函数（radial basis function，RBF 核）就把低维映射到了无穷维，无穷维实际上是不知道多少维的（虽然确实也是映射到了高维），所以如果强调不同的维度就是不同的空间的话，无穷维时就无法区分不同的 RKHS 之间有什么不同了。\n\n4. 那么这个映射是什么呢？它其实描述的是一个跟内积有关的东西。有点像是在说：如果我有一个维度很高的内积空间，那么我能找到一个映射 $\\Phi : X \\to \\mathcal{H}, \\Phi(x) = K(x, \\cdot)$ （其中 $\\mathcal{H}$ 是某个 RKHS 空间），它可以把这个空间中的点 $x$ 映射成为一个函数（请想象这个 RKHS 空间是由函数们组成的空间，里面的每一个点，或者说每一个元素，都是一个函数），这样，在计算高维内积时就有 $<\\Phi(x), \\Phi(y)>_{\\mathcal{H}} = K(x, y)$ ，就转变成了计算核函数的值了。（我仿佛已经听到了掉粉的声音，我本打算在第二篇再写数学的，可是不写不清楚。~~写了更不清楚。~~）\n\n5. 正确的想法是什么？\n   事实上，我们一开始要的不是核函数，而是一个简单的映射。这个映射负责把低维映射到高维，原因是我们的数据在低维上可能是不可分的，而到了高维中就可以。\n\n   但是我们在选这个映射时有一个条件就是“我不想算高维空间中很复杂的内积”。这个时候我们才看中了核函数，因为有一些核函数可以把低维映射到高维，并且高维的内积可以很简单的用低维的内积表示。","source":"_posts/about-kernel-01.md","raw":"---\ntitle: 说一说核方法（一）——核方法与核函数简介\ndate: 2017-08-13 16:38:35\ncategories: ML\ntags:\n     - Kernel\n     - SVM\n     - RKHS\ndescription: 本文介绍了对核方法和核函数的一些理解。\n---\n\n本文由好友史博士点~~播~~写。\n\n昨日史博士忽然来问我博客可以点播主题吗？大家都知道我这个人一沾数学就是兴奋的，于是就同意了。\n因此史博士就提到了对于核函数（kernel function）这个东西不容易说明白的话题，还有关于核函数是否就是将一个低维映射到高维的问题。\n\n相信很多人都对这个存在一些问题，原因是很多大牛在讲课的时候都是只讲果不讲因的，所以让初学者吃了很多亏，不知道核（kernel）这个东西是一个独立概念。\n这个东西**大概的确**（这里使用了鲁迅体）也没法在机器学习课程中讲解，因为需要涉及到一些泛函知识。\n那么，这些知识将在本系列的第二篇——“掉粉”文中进行讲解（因为是纯数文）。\n\n这篇文章的话，说以下几个事情：\n\n1. kernel 这个东西在 SVM 中真的只是一少部分，为了面试的话大概了解一下就可以了，面试官也很少有懂的。并不是说大家不爱学习，而是做 kernel 的人根本不关心 SVM 是什么，做 SVM 的人也根本不用关心 kernel 是个什么鬼。\n\n2. **kernel 和 SVM 是两个完全没有关系的概念。**实际上在 SVM 提出以前，人们就提出了再生核希尔伯特空间（reproducing kernel Hilbert space，RKHS）这个概念，并且把它应用在信号处理中。如：在信号检测（signal detection）问题中，对于一条时间序列（time series），我如何知道它是一个随机步行（random walk）的噪音序列呢？还是有一个特定的模式（pattern）在里面呢？在这个情景下，RKHS 理论就给出了一个通过求解似然率（likelihood ratio）的假设检验方案，其中的 kernel 是某个随机过程在两个不同时间点的相关性（correlation）。\n\n   另外，核方法可以用在 逻辑斯谛回归（logistic regression）、最小二乘法（least square）、降维（dimension reduction）等多处地方，也不是只和 SVM 这个概念绑定的。\n\n3. **很多人觉得 kernel 定义了一个从低维到高维的映射，这是不准确的。**首先不是所有空间都有维度定义，比如高斯核（Gaussian kernel）——也称径向基函数（radial basis function，RBF 核）就把低维映射到了无穷维，无穷维实际上是不知道多少维的（虽然确实也是映射到了高维），所以如果强调不同的维度就是不同的空间的话，无穷维时就无法区分不同的 RKHS 之间有什么不同了。\n\n4. 那么这个映射是什么呢？它其实描述的是一个跟内积有关的东西。有点像是在说：如果我有一个维度很高的内积空间，那么我能找到一个映射 $\\Phi : X \\to \\mathcal{H}, \\Phi(x) = K(x, \\cdot)$ （其中 $\\mathcal{H}$ 是某个 RKHS 空间），它可以把这个空间中的点 $x$ 映射成为一个函数（请想象这个 RKHS 空间是由函数们组成的空间，里面的每一个点，或者说每一个元素，都是一个函数），这样，在计算高维内积时就有 $<\\Phi(x), \\Phi(y)>_{\\mathcal{H}} = K(x, y)$ ，就转变成了计算核函数的值了。（我仿佛已经听到了掉粉的声音，我本打算在第二篇再写数学的，可是不写不清楚。~~写了更不清楚。~~）\n\n5. 正确的想法是什么？\n   事实上，我们一开始要的不是核函数，而是一个简单的映射。这个映射负责把低维映射到高维，原因是我们的数据在低维上可能是不可分的，而到了高维中就可以。\n\n   但是我们在选这个映射时有一个条件就是“我不想算高维空间中很复杂的内积”。这个时候我们才看中了核函数，因为有一些核函数可以把低维映射到高维，并且高维的内积可以很简单的用低维的内积表示。","slug":"about-kernel-01","published":1,"updated":"2021-07-19T13:03:31.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktiv80006qxt6bf7p7wb0","content":"<p>本文由好友史博士点<del>播</del>写。</p>\n<p>昨日史博士忽然来问我博客可以点播主题吗？大家都知道我这个人一沾数学就是兴奋的，于是就同意了。<br>因此史博士就提到了对于核函数（kernel function）这个东西不容易说明白的话题，还有关于核函数是否就是将一个低维映射到高维的问题。</p>\n<p>相信很多人都对这个存在一些问题，原因是很多大牛在讲课的时候都是只讲果不讲因的，所以让初学者吃了很多亏，不知道核（kernel）这个东西是一个独立概念。<br>这个东西<strong>大概的确</strong>（这里使用了鲁迅体）也没法在机器学习课程中讲解，因为需要涉及到一些泛函知识。<br>那么，这些知识将在本系列的第二篇——“掉粉”文中进行讲解（因为是纯数文）。</p>\n<p>这篇文章的话，说以下几个事情：</p>\n<ol>\n<li><p>kernel 这个东西在 SVM 中真的只是一少部分，为了面试的话大概了解一下就可以了，面试官也很少有懂的。并不是说大家不爱学习，而是做 kernel 的人根本不关心 SVM 是什么，做 SVM 的人也根本不用关心 kernel 是个什么鬼。</p>\n</li>\n<li><p><strong>kernel 和 SVM 是两个完全没有关系的概念。</strong>实际上在 SVM 提出以前，人们就提出了再生核希尔伯特空间（reproducing kernel Hilbert space，RKHS）这个概念，并且把它应用在信号处理中。如：在信号检测（signal detection）问题中，对于一条时间序列（time series），我如何知道它是一个随机步行（random walk）的噪音序列呢？还是有一个特定的模式（pattern）在里面呢？在这个情景下，RKHS 理论就给出了一个通过求解似然率（likelihood ratio）的假设检验方案，其中的 kernel 是某个随机过程在两个不同时间点的相关性（correlation）。</p>\n<p>另外，核方法可以用在 逻辑斯谛回归（logistic regression）、最小二乘法（least square）、降维（dimension reduction）等多处地方，也不是只和 SVM 这个概念绑定的。</p>\n</li>\n<li><p><strong>很多人觉得 kernel 定义了一个从低维到高维的映射，这是不准确的。</strong>首先不是所有空间都有维度定义，比如高斯核（Gaussian kernel）——也称径向基函数（radial basis function，RBF 核）就把低维映射到了无穷维，无穷维实际上是不知道多少维的（虽然确实也是映射到了高维），所以如果强调不同的维度就是不同的空间的话，无穷维时就无法区分不同的 RKHS 之间有什么不同了。</p>\n</li>\n<li><p>那么这个映射是什么呢？它其实描述的是一个跟内积有关的东西。有点像是在说：如果我有一个维度很高的内积空间，那么我能找到一个映射 $\\Phi : X \\to \\mathcal{H}, \\Phi(x) = K(x, \\cdot)$ （其中 $\\mathcal{H}$ 是某个 RKHS 空间），它可以把这个空间中的点 $x$ 映射成为一个函数（请想象这个 RKHS 空间是由函数们组成的空间，里面的每一个点，或者说每一个元素，都是一个函数），这样，在计算高维内积时就有 $&lt;\\Phi(x), \\Phi(y)&gt;_{\\mathcal{H}} = K(x, y)$ ，就转变成了计算核函数的值了。（我仿佛已经听到了掉粉的声音，我本打算在第二篇再写数学的，可是不写不清楚。<del>写了更不清楚。</del>）</p>\n</li>\n<li><p>正确的想法是什么？<br>事实上，我们一开始要的不是核函数，而是一个简单的映射。这个映射负责把低维映射到高维，原因是我们的数据在低维上可能是不可分的，而到了高维中就可以。</p>\n<p>但是我们在选这个映射时有一个条件就是“我不想算高维空间中很复杂的内积”。这个时候我们才看中了核函数，因为有一些核函数可以把低维映射到高维，并且高维的内积可以很简单的用低维的内积表示。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>本文由好友史博士点<del>播</del>写。</p>\n<p>昨日史博士忽然来问我博客可以点播主题吗？大家都知道我这个人一沾数学就是兴奋的，于是就同意了。<br>因此史博士就提到了对于核函数（kernel function）这个东西不容易说明白的话题，还有关于核函数是否就是将一个低维映射到高维的问题。</p>\n<p>相信很多人都对这个存在一些问题，原因是很多大牛在讲课的时候都是只讲果不讲因的，所以让初学者吃了很多亏，不知道核（kernel）这个东西是一个独立概念。<br>这个东西<strong>大概的确</strong>（这里使用了鲁迅体）也没法在机器学习课程中讲解，因为需要涉及到一些泛函知识。<br>那么，这些知识将在本系列的第二篇——“掉粉”文中进行讲解（因为是纯数文）。</p>\n<p>这篇文章的话，说以下几个事情：</p>\n<ol>\n<li><p>kernel 这个东西在 SVM 中真的只是一少部分，为了面试的话大概了解一下就可以了，面试官也很少有懂的。并不是说大家不爱学习，而是做 kernel 的人根本不关心 SVM 是什么，做 SVM 的人也根本不用关心 kernel 是个什么鬼。</p>\n</li>\n<li><p><strong>kernel 和 SVM 是两个完全没有关系的概念。</strong>实际上在 SVM 提出以前，人们就提出了再生核希尔伯特空间（reproducing kernel Hilbert space，RKHS）这个概念，并且把它应用在信号处理中。如：在信号检测（signal detection）问题中，对于一条时间序列（time series），我如何知道它是一个随机步行（random walk）的噪音序列呢？还是有一个特定的模式（pattern）在里面呢？在这个情景下，RKHS 理论就给出了一个通过求解似然率（likelihood ratio）的假设检验方案，其中的 kernel 是某个随机过程在两个不同时间点的相关性（correlation）。</p>\n<p>另外，核方法可以用在 逻辑斯谛回归（logistic regression）、最小二乘法（least square）、降维（dimension reduction）等多处地方，也不是只和 SVM 这个概念绑定的。</p>\n</li>\n<li><p><strong>很多人觉得 kernel 定义了一个从低维到高维的映射，这是不准确的。</strong>首先不是所有空间都有维度定义，比如高斯核（Gaussian kernel）——也称径向基函数（radial basis function，RBF 核）就把低维映射到了无穷维，无穷维实际上是不知道多少维的（虽然确实也是映射到了高维），所以如果强调不同的维度就是不同的空间的话，无穷维时就无法区分不同的 RKHS 之间有什么不同了。</p>\n</li>\n<li><p>那么这个映射是什么呢？它其实描述的是一个跟内积有关的东西。有点像是在说：如果我有一个维度很高的内积空间，那么我能找到一个映射 $\\Phi : X \\to \\mathcal{H}, \\Phi(x) = K(x, \\cdot)$ （其中 $\\mathcal{H}$ 是某个 RKHS 空间），它可以把这个空间中的点 $x$ 映射成为一个函数（请想象这个 RKHS 空间是由函数们组成的空间，里面的每一个点，或者说每一个元素，都是一个函数），这样，在计算高维内积时就有 $&lt;\\Phi(x), \\Phi(y)&gt;_{\\mathcal{H}} = K(x, y)$ ，就转变成了计算核函数的值了。（我仿佛已经听到了掉粉的声音，我本打算在第二篇再写数学的，可是不写不清楚。<del>写了更不清楚。</del>）</p>\n</li>\n<li><p>正确的想法是什么？<br>事实上，我们一开始要的不是核函数，而是一个简单的映射。这个映射负责把低维映射到高维，原因是我们的数据在低维上可能是不可分的，而到了高维中就可以。</p>\n<p>但是我们在选这个映射时有一个条件就是“我不想算高维空间中很复杂的内积”。这个时候我们才看中了核函数，因为有一些核函数可以把低维映射到高维，并且高维的内积可以很简单的用低维的内积表示。</p>\n</li>\n</ol>\n"},{"title":"变与不变","date":"2020-01-12T02:35:19.000Z","description":"谈一谈我在32岁时理解的“变与不变”。","_content":"\n# 序\n\n有人说：“世界上唯一不变的，就是变化本身。”<br />我敢说这个人不是一个现代哲学家，至少他不是数学家。<br />没有一种相对的概念，何谈另一种相对概念呢？不过是玩一点文字游戏，给人一碗励志鸡汤，让自己的书大卖罢了。\n\n我自己对于变和不变有一些自己的理解，于32岁时记于本文之中，只希望10年后心境有所变化时，回忆起此文多些笑料罢了。\n\n# 变化的市场 不变的本欲\n\n**市场的变是周期性的变。**\n\n周期性变化告诉我们，世界上有许多种不同的确定性。<br />四季交替、生老病死、服饰搭配、物价高低、经济顺逆都呈现出一定的周期性变化。<br />对于周期性变化，我们只能做出推测，而很难预料出现的时间。\n\n然而我们该如何把握这种周期性变化并做到不被时代的列车抛弃呢？<br />答案就是：掌握人性。\n\n巴菲特曾说过：“在别人贪婪时要恐惧，在别人恐惧时要贪婪。”<br />为什么一位投资大师会使用对人类情感的剖析来告诫他人，而不是单纯的说“在别人抛售时要购买，在别人购买时要抛售”这种蠢话呢？（当然了，大师也不会说出这样的蠢话。）<br />我们猜想其原因就是，市场是随人而动的，人的本欲是内因，不断试图满足自己的本欲并同时满足别人的本欲，就成为了推动市场发展的重要因素。\n\n因此我们总结，在市场上，很多东西都在变，但至少有两件事是不变的：\n\n- 第一，人性不变。\n- 第二，客户受益，自己才能受益。\n\n显然，第一点是第二点的基础，所以首先我们要了解什么是人性。\n\n**人性是人的欲望、贪婪、嫉妒、执着、恐惧……用佛教的话说，就是贪嗔痴慢疑。**\n\n当你了解了人性，就了解了人们内心中最柔软的那一部分，然后依据此设计出他们“不要不行”的产品、服务和定位。<br />人们想要的东西其实比你想象的要简单的多，并不是一些“我希望有一个机器人能代替我做完一切”这种不切实际的愿望。大多数时候，他们只是希望“我就要好看的”、“我只是不想一直站着”、“我就不想按两下”、“我的一定要比别人的好”、“别人都拥有它我不能没有”这样简单粗暴又直接的东西。\n\n**做产品，是做一种瘾品，一种能上瘾的东西，而不是合乎逻辑的东西。**\n\n根据这两个不变，我们就该站在用户角度思考商业问题、站在人性的角度做出判断，而不是迷恋于各种“自嗨”，想出很多刁钻的高级需求，却创造不出能一把掐住人性的弱点的东西。\n\n# 变化的方式 不变的能力\n\n**方式的变是直线性的变。**\n\n我们总在谈一个观点，那就是人要不断成长，不断提升自己的能力，顺应时代改变不同的方式。<br />这令人很迷茫，难道我要一直学习到老死？我一个人的力量又不可能赶得上世界整体的发展，我该怎么做？<br />因此我们在寻找，对于一个人来讲，有没有什么是不用变的呢。\n\n这就要提到一个概念：**可迁移能力。**\n\n可迁移能力，是指不管从哪个岗位转到哪个岗位，从哪个行业跨到哪个行业，那些依然能被不断重复使用、能无障碍迁移的能力。它包括三个层次：\n\n- 底层可迁移能力：思考能力（包括逻辑思维、本质思考力、升维思考力、结构化思考力、系统思考力、批判性思维、元认知等）。\n- 中层可迁移能力：其它非技能能力（学习力、理解力、沟通力、领导力等）。\n- 上层可迁移能力：技能（写作技能、外语听说读写技能、数据分析技能、计算机使用技能等）。\n\n当今社会不存在“铁饭碗”，而我们可以培养铁一般的可迁移能力，让它成为你的“金饭碗”。<br />掌握了可迁移能力，才能让你真正拥有了一些“不变”的东西，也就拥有了足够多、足够广泛的职业选择。\n\n也许大家注意到了，我没有提到“人脉”。<br />所谓人脉，有时候脆弱的很，古语“人以类聚，物以群分”，当你自身能力不足时，你结交的人脉也必定能力平平。所以你需要的，并不是人脉，并不是平台，而是随时随地能帮你长出人脉的能力。这种追随你能力而来的人脉必定也是与你相配的人脉，是能给予你辅助的人脉。\n\n# 变化的心境 不变的初心\n\n**心境的变是拉锯式的变。**\n\n时光荏苒，春秋更易。<br />致于学时，我们突然发现，世界充满了复杂的问题，前景似乎希望渺茫；而立之年，我们的身上又同时承担了太多的重担；知天命之年，我们又不堪回首，羡慕起新生代。\n\n然而在这不可阻挡的变中，我们偶尔又能体会到许多不变。<br />多年未见的朋友，变的是人情世故，不变的是亲近的情感和回忆；技术和商业，变的是内容和手段，不变的是服务大众的精神和发展生活的动力；社会现象、变的是大众舆论，不变的是以解决问题为目的，让社会变得更好的心情。\n\n由此，我们有时候会忽然意识到，自己最初的想法到底是什么呢？是喜欢一件物品？拥有一个梦想？爱上一个人？<br />面对这些问题，我们何尝不会萌生出在这个身不由己的社会中做回自己的冲动呢？<br />这种冲动让我们的心灵在这俗世中不断受到一种拉扯——对未来的希望和对过去的惋惜这二者的不断拉扯。\n\n要从这种痛苦中解脱出来，我们需要四个字：勿忘初心。<br />勿忘初心，并不是一个虚幻的概念，而是一个原则。<br />是一个能使人不被大众世俗的三观所绑架，从而摒弃利益的诱惑，踏下心来追求自己原初梦想的原则。<br />有了这个不变的原则，我们才能在心境的变化过程中一直坚守自己，只有有了坚守自己的前提，才有余闲让自己不出格地寻找发展和进步。\n\n一位前辈曾经告诫我，人总是要回到自己第一次萌发出“想做某事”的那件事情上去。<br />现在的我也想把这句话讲给别人。<br />这并非是什么“情怀”这种说起来很好听的东西，而是人都有追求自我的本能、都有对束缚的抗拒、都有对自由的向往。\n\n# 跋\n\n我又想到那句在一开篇就提到的话：“世界上唯一不变的，就是变化本身。”<br />老子也说：“道可道，非常道。名可名，非常名。”<br />但那已经是几千年前的哲学了，我对这种形而上的哲学也已经不以为然很久了。\n\n在我看来，变是连续的、整体的、长远发展的，不变是离散的、原子的、短期持续的。<br />我们不应提倡过分的追求不变的部分或变的部分，也不能因世界的瞬息万变就随波逐流而失去了属于自己不变的本心。<br />当我们既做到了在陌生的变化中恪守属于自己的底线，又能同时在变化中选择正确的道路不断提升自我时，我们就理解到这样一个道理——\n\n**一直在变化的是在各微小阶段中百试不爽的“术”，永恒不变的是窥探、连接万物本质的“道”。**\n\n理解了这个道理，便能达“以不变应万变，万变不离其宗”。","source":"_posts/alterable-vs-permanent.md","raw":"---\ntitle: 变与不变\ndate: 2020-01-12 10:35:19\ncategories: Life\ntags: Tips\ndescription: 谈一谈我在32岁时理解的“变与不变”。\n---\n\n# 序\n\n有人说：“世界上唯一不变的，就是变化本身。”<br />我敢说这个人不是一个现代哲学家，至少他不是数学家。<br />没有一种相对的概念，何谈另一种相对概念呢？不过是玩一点文字游戏，给人一碗励志鸡汤，让自己的书大卖罢了。\n\n我自己对于变和不变有一些自己的理解，于32岁时记于本文之中，只希望10年后心境有所变化时，回忆起此文多些笑料罢了。\n\n# 变化的市场 不变的本欲\n\n**市场的变是周期性的变。**\n\n周期性变化告诉我们，世界上有许多种不同的确定性。<br />四季交替、生老病死、服饰搭配、物价高低、经济顺逆都呈现出一定的周期性变化。<br />对于周期性变化，我们只能做出推测，而很难预料出现的时间。\n\n然而我们该如何把握这种周期性变化并做到不被时代的列车抛弃呢？<br />答案就是：掌握人性。\n\n巴菲特曾说过：“在别人贪婪时要恐惧，在别人恐惧时要贪婪。”<br />为什么一位投资大师会使用对人类情感的剖析来告诫他人，而不是单纯的说“在别人抛售时要购买，在别人购买时要抛售”这种蠢话呢？（当然了，大师也不会说出这样的蠢话。）<br />我们猜想其原因就是，市场是随人而动的，人的本欲是内因，不断试图满足自己的本欲并同时满足别人的本欲，就成为了推动市场发展的重要因素。\n\n因此我们总结，在市场上，很多东西都在变，但至少有两件事是不变的：\n\n- 第一，人性不变。\n- 第二，客户受益，自己才能受益。\n\n显然，第一点是第二点的基础，所以首先我们要了解什么是人性。\n\n**人性是人的欲望、贪婪、嫉妒、执着、恐惧……用佛教的话说，就是贪嗔痴慢疑。**\n\n当你了解了人性，就了解了人们内心中最柔软的那一部分，然后依据此设计出他们“不要不行”的产品、服务和定位。<br />人们想要的东西其实比你想象的要简单的多，并不是一些“我希望有一个机器人能代替我做完一切”这种不切实际的愿望。大多数时候，他们只是希望“我就要好看的”、“我只是不想一直站着”、“我就不想按两下”、“我的一定要比别人的好”、“别人都拥有它我不能没有”这样简单粗暴又直接的东西。\n\n**做产品，是做一种瘾品，一种能上瘾的东西，而不是合乎逻辑的东西。**\n\n根据这两个不变，我们就该站在用户角度思考商业问题、站在人性的角度做出判断，而不是迷恋于各种“自嗨”，想出很多刁钻的高级需求，却创造不出能一把掐住人性的弱点的东西。\n\n# 变化的方式 不变的能力\n\n**方式的变是直线性的变。**\n\n我们总在谈一个观点，那就是人要不断成长，不断提升自己的能力，顺应时代改变不同的方式。<br />这令人很迷茫，难道我要一直学习到老死？我一个人的力量又不可能赶得上世界整体的发展，我该怎么做？<br />因此我们在寻找，对于一个人来讲，有没有什么是不用变的呢。\n\n这就要提到一个概念：**可迁移能力。**\n\n可迁移能力，是指不管从哪个岗位转到哪个岗位，从哪个行业跨到哪个行业，那些依然能被不断重复使用、能无障碍迁移的能力。它包括三个层次：\n\n- 底层可迁移能力：思考能力（包括逻辑思维、本质思考力、升维思考力、结构化思考力、系统思考力、批判性思维、元认知等）。\n- 中层可迁移能力：其它非技能能力（学习力、理解力、沟通力、领导力等）。\n- 上层可迁移能力：技能（写作技能、外语听说读写技能、数据分析技能、计算机使用技能等）。\n\n当今社会不存在“铁饭碗”，而我们可以培养铁一般的可迁移能力，让它成为你的“金饭碗”。<br />掌握了可迁移能力，才能让你真正拥有了一些“不变”的东西，也就拥有了足够多、足够广泛的职业选择。\n\n也许大家注意到了，我没有提到“人脉”。<br />所谓人脉，有时候脆弱的很，古语“人以类聚，物以群分”，当你自身能力不足时，你结交的人脉也必定能力平平。所以你需要的，并不是人脉，并不是平台，而是随时随地能帮你长出人脉的能力。这种追随你能力而来的人脉必定也是与你相配的人脉，是能给予你辅助的人脉。\n\n# 变化的心境 不变的初心\n\n**心境的变是拉锯式的变。**\n\n时光荏苒，春秋更易。<br />致于学时，我们突然发现，世界充满了复杂的问题，前景似乎希望渺茫；而立之年，我们的身上又同时承担了太多的重担；知天命之年，我们又不堪回首，羡慕起新生代。\n\n然而在这不可阻挡的变中，我们偶尔又能体会到许多不变。<br />多年未见的朋友，变的是人情世故，不变的是亲近的情感和回忆；技术和商业，变的是内容和手段，不变的是服务大众的精神和发展生活的动力；社会现象、变的是大众舆论，不变的是以解决问题为目的，让社会变得更好的心情。\n\n由此，我们有时候会忽然意识到，自己最初的想法到底是什么呢？是喜欢一件物品？拥有一个梦想？爱上一个人？<br />面对这些问题，我们何尝不会萌生出在这个身不由己的社会中做回自己的冲动呢？<br />这种冲动让我们的心灵在这俗世中不断受到一种拉扯——对未来的希望和对过去的惋惜这二者的不断拉扯。\n\n要从这种痛苦中解脱出来，我们需要四个字：勿忘初心。<br />勿忘初心，并不是一个虚幻的概念，而是一个原则。<br />是一个能使人不被大众世俗的三观所绑架，从而摒弃利益的诱惑，踏下心来追求自己原初梦想的原则。<br />有了这个不变的原则，我们才能在心境的变化过程中一直坚守自己，只有有了坚守自己的前提，才有余闲让自己不出格地寻找发展和进步。\n\n一位前辈曾经告诫我，人总是要回到自己第一次萌发出“想做某事”的那件事情上去。<br />现在的我也想把这句话讲给别人。<br />这并非是什么“情怀”这种说起来很好听的东西，而是人都有追求自我的本能、都有对束缚的抗拒、都有对自由的向往。\n\n# 跋\n\n我又想到那句在一开篇就提到的话：“世界上唯一不变的，就是变化本身。”<br />老子也说：“道可道，非常道。名可名，非常名。”<br />但那已经是几千年前的哲学了，我对这种形而上的哲学也已经不以为然很久了。\n\n在我看来，变是连续的、整体的、长远发展的，不变是离散的、原子的、短期持续的。<br />我们不应提倡过分的追求不变的部分或变的部分，也不能因世界的瞬息万变就随波逐流而失去了属于自己不变的本心。<br />当我们既做到了在陌生的变化中恪守属于自己的底线，又能同时在变化中选择正确的道路不断提升自我时，我们就理解到这样一个道理——\n\n**一直在变化的是在各微小阶段中百试不爽的“术”，永恒不变的是窥探、连接万物本质的“道”。**\n\n理解了这个道理，便能达“以不变应万变，万变不离其宗”。","slug":"alterable-vs-permanent","published":1,"updated":"2021-07-19T13:03:31.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktiv90007qxt6yf4w573m","content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>有人说：“世界上唯一不变的，就是变化本身。”<br>我敢说这个人不是一个现代哲学家，至少他不是数学家。<br>没有一种相对的概念，何谈另一种相对概念呢？不过是玩一点文字游戏，给人一碗励志鸡汤，让自己的书大卖罢了。</p>\n<p>我自己对于变和不变有一些自己的理解，于32岁时记于本文之中，只希望10年后心境有所变化时，回忆起此文多些笑料罢了。</p>\n<h1 id=\"变化的市场-不变的本欲\"><a href=\"#变化的市场-不变的本欲\" class=\"headerlink\" title=\"变化的市场 不变的本欲\"></a>变化的市场 不变的本欲</h1><p><strong>市场的变是周期性的变。</strong></p>\n<p>周期性变化告诉我们，世界上有许多种不同的确定性。<br>四季交替、生老病死、服饰搭配、物价高低、经济顺逆都呈现出一定的周期性变化。<br>对于周期性变化，我们只能做出推测，而很难预料出现的时间。</p>\n<p>然而我们该如何把握这种周期性变化并做到不被时代的列车抛弃呢？<br>答案就是：掌握人性。</p>\n<p>巴菲特曾说过：“在别人贪婪时要恐惧，在别人恐惧时要贪婪。”<br>为什么一位投资大师会使用对人类情感的剖析来告诫他人，而不是单纯的说“在别人抛售时要购买，在别人购买时要抛售”这种蠢话呢？（当然了，大师也不会说出这样的蠢话。）<br>我们猜想其原因就是，市场是随人而动的，人的本欲是内因，不断试图满足自己的本欲并同时满足别人的本欲，就成为了推动市场发展的重要因素。</p>\n<p>因此我们总结，在市场上，很多东西都在变，但至少有两件事是不变的：</p>\n<ul>\n<li>第一，人性不变。</li>\n<li>第二，客户受益，自己才能受益。</li>\n</ul>\n<p>显然，第一点是第二点的基础，所以首先我们要了解什么是人性。</p>\n<p><strong>人性是人的欲望、贪婪、嫉妒、执着、恐惧……用佛教的话说，就是贪嗔痴慢疑。</strong></p>\n<p>当你了解了人性，就了解了人们内心中最柔软的那一部分，然后依据此设计出他们“不要不行”的产品、服务和定位。<br>人们想要的东西其实比你想象的要简单的多，并不是一些“我希望有一个机器人能代替我做完一切”这种不切实际的愿望。大多数时候，他们只是希望“我就要好看的”、“我只是不想一直站着”、“我就不想按两下”、“我的一定要比别人的好”、“别人都拥有它我不能没有”这样简单粗暴又直接的东西。</p>\n<p><strong>做产品，是做一种瘾品，一种能上瘾的东西，而不是合乎逻辑的东西。</strong></p>\n<p>根据这两个不变，我们就该站在用户角度思考商业问题、站在人性的角度做出判断，而不是迷恋于各种“自嗨”，想出很多刁钻的高级需求，却创造不出能一把掐住人性的弱点的东西。</p>\n<h1 id=\"变化的方式-不变的能力\"><a href=\"#变化的方式-不变的能力\" class=\"headerlink\" title=\"变化的方式 不变的能力\"></a>变化的方式 不变的能力</h1><p><strong>方式的变是直线性的变。</strong></p>\n<p>我们总在谈一个观点，那就是人要不断成长，不断提升自己的能力，顺应时代改变不同的方式。<br>这令人很迷茫，难道我要一直学习到老死？我一个人的力量又不可能赶得上世界整体的发展，我该怎么做？<br>因此我们在寻找，对于一个人来讲，有没有什么是不用变的呢。</p>\n<p>这就要提到一个概念：<strong>可迁移能力。</strong></p>\n<p>可迁移能力，是指不管从哪个岗位转到哪个岗位，从哪个行业跨到哪个行业，那些依然能被不断重复使用、能无障碍迁移的能力。它包括三个层次：</p>\n<ul>\n<li>底层可迁移能力：思考能力（包括逻辑思维、本质思考力、升维思考力、结构化思考力、系统思考力、批判性思维、元认知等）。</li>\n<li>中层可迁移能力：其它非技能能力（学习力、理解力、沟通力、领导力等）。</li>\n<li>上层可迁移能力：技能（写作技能、外语听说读写技能、数据分析技能、计算机使用技能等）。</li>\n</ul>\n<p>当今社会不存在“铁饭碗”，而我们可以培养铁一般的可迁移能力，让它成为你的“金饭碗”。<br>掌握了可迁移能力，才能让你真正拥有了一些“不变”的东西，也就拥有了足够多、足够广泛的职业选择。</p>\n<p>也许大家注意到了，我没有提到“人脉”。<br>所谓人脉，有时候脆弱的很，古语“人以类聚，物以群分”，当你自身能力不足时，你结交的人脉也必定能力平平。所以你需要的，并不是人脉，并不是平台，而是随时随地能帮你长出人脉的能力。这种追随你能力而来的人脉必定也是与你相配的人脉，是能给予你辅助的人脉。</p>\n<h1 id=\"变化的心境-不变的初心\"><a href=\"#变化的心境-不变的初心\" class=\"headerlink\" title=\"变化的心境 不变的初心\"></a>变化的心境 不变的初心</h1><p><strong>心境的变是拉锯式的变。</strong></p>\n<p>时光荏苒，春秋更易。<br>致于学时，我们突然发现，世界充满了复杂的问题，前景似乎希望渺茫；而立之年，我们的身上又同时承担了太多的重担；知天命之年，我们又不堪回首，羡慕起新生代。</p>\n<p>然而在这不可阻挡的变中，我们偶尔又能体会到许多不变。<br>多年未见的朋友，变的是人情世故，不变的是亲近的情感和回忆；技术和商业，变的是内容和手段，不变的是服务大众的精神和发展生活的动力；社会现象、变的是大众舆论，不变的是以解决问题为目的，让社会变得更好的心情。</p>\n<p>由此，我们有时候会忽然意识到，自己最初的想法到底是什么呢？是喜欢一件物品？拥有一个梦想？爱上一个人？<br>面对这些问题，我们何尝不会萌生出在这个身不由己的社会中做回自己的冲动呢？<br>这种冲动让我们的心灵在这俗世中不断受到一种拉扯——对未来的希望和对过去的惋惜这二者的不断拉扯。</p>\n<p>要从这种痛苦中解脱出来，我们需要四个字：勿忘初心。<br>勿忘初心，并不是一个虚幻的概念，而是一个原则。<br>是一个能使人不被大众世俗的三观所绑架，从而摒弃利益的诱惑，踏下心来追求自己原初梦想的原则。<br>有了这个不变的原则，我们才能在心境的变化过程中一直坚守自己，只有有了坚守自己的前提，才有余闲让自己不出格地寻找发展和进步。</p>\n<p>一位前辈曾经告诫我，人总是要回到自己第一次萌发出“想做某事”的那件事情上去。<br>现在的我也想把这句话讲给别人。<br>这并非是什么“情怀”这种说起来很好听的东西，而是人都有追求自我的本能、都有对束缚的抗拒、都有对自由的向往。</p>\n<h1 id=\"跋\"><a href=\"#跋\" class=\"headerlink\" title=\"跋\"></a>跋</h1><p>我又想到那句在一开篇就提到的话：“世界上唯一不变的，就是变化本身。”<br>老子也说：“道可道，非常道。名可名，非常名。”<br>但那已经是几千年前的哲学了，我对这种形而上的哲学也已经不以为然很久了。</p>\n<p>在我看来，变是连续的、整体的、长远发展的，不变是离散的、原子的、短期持续的。<br>我们不应提倡过分的追求不变的部分或变的部分，也不能因世界的瞬息万变就随波逐流而失去了属于自己不变的本心。<br>当我们既做到了在陌生的变化中恪守属于自己的底线，又能同时在变化中选择正确的道路不断提升自我时，我们就理解到这样一个道理——</p>\n<p><strong>一直在变化的是在各微小阶段中百试不爽的“术”，永恒不变的是窥探、连接万物本质的“道”。</strong></p>\n<p>理解了这个道理，便能达“以不变应万变，万变不离其宗”。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>有人说：“世界上唯一不变的，就是变化本身。”<br>我敢说这个人不是一个现代哲学家，至少他不是数学家。<br>没有一种相对的概念，何谈另一种相对概念呢？不过是玩一点文字游戏，给人一碗励志鸡汤，让自己的书大卖罢了。</p>\n<p>我自己对于变和不变有一些自己的理解，于32岁时记于本文之中，只希望10年后心境有所变化时，回忆起此文多些笑料罢了。</p>\n<h1 id=\"变化的市场-不变的本欲\"><a href=\"#变化的市场-不变的本欲\" class=\"headerlink\" title=\"变化的市场 不变的本欲\"></a>变化的市场 不变的本欲</h1><p><strong>市场的变是周期性的变。</strong></p>\n<p>周期性变化告诉我们，世界上有许多种不同的确定性。<br>四季交替、生老病死、服饰搭配、物价高低、经济顺逆都呈现出一定的周期性变化。<br>对于周期性变化，我们只能做出推测，而很难预料出现的时间。</p>\n<p>然而我们该如何把握这种周期性变化并做到不被时代的列车抛弃呢？<br>答案就是：掌握人性。</p>\n<p>巴菲特曾说过：“在别人贪婪时要恐惧，在别人恐惧时要贪婪。”<br>为什么一位投资大师会使用对人类情感的剖析来告诫他人，而不是单纯的说“在别人抛售时要购买，在别人购买时要抛售”这种蠢话呢？（当然了，大师也不会说出这样的蠢话。）<br>我们猜想其原因就是，市场是随人而动的，人的本欲是内因，不断试图满足自己的本欲并同时满足别人的本欲，就成为了推动市场发展的重要因素。</p>\n<p>因此我们总结，在市场上，很多东西都在变，但至少有两件事是不变的：</p>\n<ul>\n<li>第一，人性不变。</li>\n<li>第二，客户受益，自己才能受益。</li>\n</ul>\n<p>显然，第一点是第二点的基础，所以首先我们要了解什么是人性。</p>\n<p><strong>人性是人的欲望、贪婪、嫉妒、执着、恐惧……用佛教的话说，就是贪嗔痴慢疑。</strong></p>\n<p>当你了解了人性，就了解了人们内心中最柔软的那一部分，然后依据此设计出他们“不要不行”的产品、服务和定位。<br>人们想要的东西其实比你想象的要简单的多，并不是一些“我希望有一个机器人能代替我做完一切”这种不切实际的愿望。大多数时候，他们只是希望“我就要好看的”、“我只是不想一直站着”、“我就不想按两下”、“我的一定要比别人的好”、“别人都拥有它我不能没有”这样简单粗暴又直接的东西。</p>\n<p><strong>做产品，是做一种瘾品，一种能上瘾的东西，而不是合乎逻辑的东西。</strong></p>\n<p>根据这两个不变，我们就该站在用户角度思考商业问题、站在人性的角度做出判断，而不是迷恋于各种“自嗨”，想出很多刁钻的高级需求，却创造不出能一把掐住人性的弱点的东西。</p>\n<h1 id=\"变化的方式-不变的能力\"><a href=\"#变化的方式-不变的能力\" class=\"headerlink\" title=\"变化的方式 不变的能力\"></a>变化的方式 不变的能力</h1><p><strong>方式的变是直线性的变。</strong></p>\n<p>我们总在谈一个观点，那就是人要不断成长，不断提升自己的能力，顺应时代改变不同的方式。<br>这令人很迷茫，难道我要一直学习到老死？我一个人的力量又不可能赶得上世界整体的发展，我该怎么做？<br>因此我们在寻找，对于一个人来讲，有没有什么是不用变的呢。</p>\n<p>这就要提到一个概念：<strong>可迁移能力。</strong></p>\n<p>可迁移能力，是指不管从哪个岗位转到哪个岗位，从哪个行业跨到哪个行业，那些依然能被不断重复使用、能无障碍迁移的能力。它包括三个层次：</p>\n<ul>\n<li>底层可迁移能力：思考能力（包括逻辑思维、本质思考力、升维思考力、结构化思考力、系统思考力、批判性思维、元认知等）。</li>\n<li>中层可迁移能力：其它非技能能力（学习力、理解力、沟通力、领导力等）。</li>\n<li>上层可迁移能力：技能（写作技能、外语听说读写技能、数据分析技能、计算机使用技能等）。</li>\n</ul>\n<p>当今社会不存在“铁饭碗”，而我们可以培养铁一般的可迁移能力，让它成为你的“金饭碗”。<br>掌握了可迁移能力，才能让你真正拥有了一些“不变”的东西，也就拥有了足够多、足够广泛的职业选择。</p>\n<p>也许大家注意到了，我没有提到“人脉”。<br>所谓人脉，有时候脆弱的很，古语“人以类聚，物以群分”，当你自身能力不足时，你结交的人脉也必定能力平平。所以你需要的，并不是人脉，并不是平台，而是随时随地能帮你长出人脉的能力。这种追随你能力而来的人脉必定也是与你相配的人脉，是能给予你辅助的人脉。</p>\n<h1 id=\"变化的心境-不变的初心\"><a href=\"#变化的心境-不变的初心\" class=\"headerlink\" title=\"变化的心境 不变的初心\"></a>变化的心境 不变的初心</h1><p><strong>心境的变是拉锯式的变。</strong></p>\n<p>时光荏苒，春秋更易。<br>致于学时，我们突然发现，世界充满了复杂的问题，前景似乎希望渺茫；而立之年，我们的身上又同时承担了太多的重担；知天命之年，我们又不堪回首，羡慕起新生代。</p>\n<p>然而在这不可阻挡的变中，我们偶尔又能体会到许多不变。<br>多年未见的朋友，变的是人情世故，不变的是亲近的情感和回忆；技术和商业，变的是内容和手段，不变的是服务大众的精神和发展生活的动力；社会现象、变的是大众舆论，不变的是以解决问题为目的，让社会变得更好的心情。</p>\n<p>由此，我们有时候会忽然意识到，自己最初的想法到底是什么呢？是喜欢一件物品？拥有一个梦想？爱上一个人？<br>面对这些问题，我们何尝不会萌生出在这个身不由己的社会中做回自己的冲动呢？<br>这种冲动让我们的心灵在这俗世中不断受到一种拉扯——对未来的希望和对过去的惋惜这二者的不断拉扯。</p>\n<p>要从这种痛苦中解脱出来，我们需要四个字：勿忘初心。<br>勿忘初心，并不是一个虚幻的概念，而是一个原则。<br>是一个能使人不被大众世俗的三观所绑架，从而摒弃利益的诱惑，踏下心来追求自己原初梦想的原则。<br>有了这个不变的原则，我们才能在心境的变化过程中一直坚守自己，只有有了坚守自己的前提，才有余闲让自己不出格地寻找发展和进步。</p>\n<p>一位前辈曾经告诫我，人总是要回到自己第一次萌发出“想做某事”的那件事情上去。<br>现在的我也想把这句话讲给别人。<br>这并非是什么“情怀”这种说起来很好听的东西，而是人都有追求自我的本能、都有对束缚的抗拒、都有对自由的向往。</p>\n<h1 id=\"跋\"><a href=\"#跋\" class=\"headerlink\" title=\"跋\"></a>跋</h1><p>我又想到那句在一开篇就提到的话：“世界上唯一不变的，就是变化本身。”<br>老子也说：“道可道，非常道。名可名，非常名。”<br>但那已经是几千年前的哲学了，我对这种形而上的哲学也已经不以为然很久了。</p>\n<p>在我看来，变是连续的、整体的、长远发展的，不变是离散的、原子的、短期持续的。<br>我们不应提倡过分的追求不变的部分或变的部分，也不能因世界的瞬息万变就随波逐流而失去了属于自己不变的本心。<br>当我们既做到了在陌生的变化中恪守属于自己的底线，又能同时在变化中选择正确的道路不断提升自我时，我们就理解到这样一个道理——</p>\n<p><strong>一直在变化的是在各微小阶段中百试不爽的“术”，永恒不变的是窥探、连接万物本质的“道”。</strong></p>\n<p>理解了这个道理，便能达“以不变应万变，万变不离其宗”。</p>\n"},{"title":"神经网络中均方误差与交叉熵作为损失函数的共同点","date":"2017-12-03T04:39:14.000Z","description":"从数学角度推导了均方误差和交叉熵误差的敏感度的等价性。","_content":"\n# 先说结论\n\n在神经网络中有两种可以选择的损失函数，即均方误差和交叉熵误差。这两种损失函数在形式上很不一样，而且分别适用与不同的地方（回归或分类）。但是在适用梯度下降法学习最优参数时，它们是一致的。\n\n考虑神经网络的 BP 算法，其最核心的一步是计算敏感度 $\\delta$ ，采用不同损失函数和激活函数的神经网络在 BP 算法上的差异也主要存在于敏感度上。而下文中，我们就分别讨论了上述两种损失函数在不同场景下的情况，得到了它们的敏感度是相等的结论。\n\n用到的符号：\n\n- $net$ 或 $net_{i}$ ，净输出值，即 $net = w^{\\mathsf{T}}x$ 。\n- $a$ 或 $a_{i}$ ，神经元的激活函数输出值，即 $a=f(net)$ 。\n\n# 均方误差——线性回归\n\n线性回归使用均方误差作为损失函数。其激活函数为 identical ，即$a=net=w^{\\mathsf{T}}x$ 。\n其损失：\n$$\nJ(w) = \\frac{1}{2} (a-y)^{2}=\\frac{1}{2} (net-y)^{2}\n$$\n输出神经元的敏感度：\n$$\n\\delta = \\frac{\\partial J}{\\partial net} = net-y = a-y\n$$\n\n# 交叉熵——逻辑回归\n\n逻辑回归使用最大似然估计方法估计参数。\n\n## 二分类逻辑回归\n\n其激活函数为 sigmoid 函数 ，即$a=\\sigma(net)=\\sigma(w^{\\mathsf{T}}x)=\\frac{1}{1+\\exp(-w^{\\mathsf{T}}x)}$ 。\n其损失：\n$$\nJ(w) = -L(w) = -y \\ln a - (1-y) \\ln (1-a)\n$$\n其中：\n$$\nL(w) = y \\ln a + (1-y) \\ln (1-a)\n$$\n是所谓的 log-likelihood。\n\n输出神经元的敏感度：\n$$\n\\delta = \\frac{\\partial J}{\\partial net} = \\frac{\\partial J}{\\partial a} \\frac{\\partial a}{\\partial net} = \\frac{a-y}{(1-a)a}(1-a)a = a-y\n$$\n\n## 多分类逻辑回归\n\n其激活函数为 softmax 函数，即$a=\\mathrm{softmax}(net)=\\frac{\\exp(net_{i})}{\\sum_{j=1}^{N}\\exp(net_{j})}$ 。\n\n其损失：\n$$\nJ(w) = -\\sum_{j=1}^{N} y_j \\ln a_j = \\sum_{j=1}^{N} y_j (\\ln \\sum_{k=1}^{N} e^{net_{k}}-net_{j})\n$$\n第 $i$ 个输出神经元的敏感度：\n$$\n\\delta_{i} = \\frac{\\partial J}{\\partial net_{i}} = \\sum_{j=1}^{N} y_j (\\frac{\\sum_{k=1}^{N} e^{net_{k}}\\frac{\\partial net_{k}}{\\partial net_{i}}}{\\sum_{k=1}^{N} e^{net_{k}}} - \\frac{\\partial net_{j}}{\\partial net_{i}}) = \\sum_{j=1}^{N} y_j  \\frac{e^{net_{i}}}{\\sum_{k=1}^{N} e^{net_{k}}} - \\sum_{j=1}^{N} y_j  \\frac{\\partial net_{j}}{\\partial net_{i}} = a_{i}-y_{i}\n$$\n","source":"_posts/common-ground-of-mse-and-cee-in-nn.md","raw":"---\ntitle: 神经网络中均方误差与交叉熵作为损失函数的共同点\ndate: 2017-12-03 12:39:14\ncategories: ML\ntags: \n     - Deep learning\n     - Loss function\ndescription: 从数学角度推导了均方误差和交叉熵误差的敏感度的等价性。\n---\n\n# 先说结论\n\n在神经网络中有两种可以选择的损失函数，即均方误差和交叉熵误差。这两种损失函数在形式上很不一样，而且分别适用与不同的地方（回归或分类）。但是在适用梯度下降法学习最优参数时，它们是一致的。\n\n考虑神经网络的 BP 算法，其最核心的一步是计算敏感度 $\\delta$ ，采用不同损失函数和激活函数的神经网络在 BP 算法上的差异也主要存在于敏感度上。而下文中，我们就分别讨论了上述两种损失函数在不同场景下的情况，得到了它们的敏感度是相等的结论。\n\n用到的符号：\n\n- $net$ 或 $net_{i}$ ，净输出值，即 $net = w^{\\mathsf{T}}x$ 。\n- $a$ 或 $a_{i}$ ，神经元的激活函数输出值，即 $a=f(net)$ 。\n\n# 均方误差——线性回归\n\n线性回归使用均方误差作为损失函数。其激活函数为 identical ，即$a=net=w^{\\mathsf{T}}x$ 。\n其损失：\n$$\nJ(w) = \\frac{1}{2} (a-y)^{2}=\\frac{1}{2} (net-y)^{2}\n$$\n输出神经元的敏感度：\n$$\n\\delta = \\frac{\\partial J}{\\partial net} = net-y = a-y\n$$\n\n# 交叉熵——逻辑回归\n\n逻辑回归使用最大似然估计方法估计参数。\n\n## 二分类逻辑回归\n\n其激活函数为 sigmoid 函数 ，即$a=\\sigma(net)=\\sigma(w^{\\mathsf{T}}x)=\\frac{1}{1+\\exp(-w^{\\mathsf{T}}x)}$ 。\n其损失：\n$$\nJ(w) = -L(w) = -y \\ln a - (1-y) \\ln (1-a)\n$$\n其中：\n$$\nL(w) = y \\ln a + (1-y) \\ln (1-a)\n$$\n是所谓的 log-likelihood。\n\n输出神经元的敏感度：\n$$\n\\delta = \\frac{\\partial J}{\\partial net} = \\frac{\\partial J}{\\partial a} \\frac{\\partial a}{\\partial net} = \\frac{a-y}{(1-a)a}(1-a)a = a-y\n$$\n\n## 多分类逻辑回归\n\n其激活函数为 softmax 函数，即$a=\\mathrm{softmax}(net)=\\frac{\\exp(net_{i})}{\\sum_{j=1}^{N}\\exp(net_{j})}$ 。\n\n其损失：\n$$\nJ(w) = -\\sum_{j=1}^{N} y_j \\ln a_j = \\sum_{j=1}^{N} y_j (\\ln \\sum_{k=1}^{N} e^{net_{k}}-net_{j})\n$$\n第 $i$ 个输出神经元的敏感度：\n$$\n\\delta_{i} = \\frac{\\partial J}{\\partial net_{i}} = \\sum_{j=1}^{N} y_j (\\frac{\\sum_{k=1}^{N} e^{net_{k}}\\frac{\\partial net_{k}}{\\partial net_{i}}}{\\sum_{k=1}^{N} e^{net_{k}}} - \\frac{\\partial net_{j}}{\\partial net_{i}}) = \\sum_{j=1}^{N} y_j  \\frac{e^{net_{i}}}{\\sum_{k=1}^{N} e^{net_{k}}} - \\sum_{j=1}^{N} y_j  \\frac{\\partial net_{j}}{\\partial net_{i}} = a_{i}-y_{i}\n$$\n","slug":"common-ground-of-mse-and-cee-in-nn","published":1,"updated":"2021-07-19T13:03:31.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktiva0008qxt6d5wsigmj","content":"<h1 id=\"先说结论\"><a href=\"#先说结论\" class=\"headerlink\" title=\"先说结论\"></a>先说结论</h1><p>在神经网络中有两种可以选择的损失函数，即均方误差和交叉熵误差。这两种损失函数在形式上很不一样，而且分别适用与不同的地方（回归或分类）。但是在适用梯度下降法学习最优参数时，它们是一致的。</p>\n<p>考虑神经网络的 BP 算法，其最核心的一步是计算敏感度 $\\delta$ ，采用不同损失函数和激活函数的神经网络在 BP 算法上的差异也主要存在于敏感度上。而下文中，我们就分别讨论了上述两种损失函数在不同场景下的情况，得到了它们的敏感度是相等的结论。</p>\n<p>用到的符号：</p>\n<ul>\n<li>$net$ 或 $net_{i}$ ，净输出值，即 $net = w^{\\mathsf{T}}x$ 。</li>\n<li>$a$ 或 $a_{i}$ ，神经元的激活函数输出值，即 $a=f(net)$ 。</li>\n</ul>\n<h1 id=\"均方误差——线性回归\"><a href=\"#均方误差——线性回归\" class=\"headerlink\" title=\"均方误差——线性回归\"></a>均方误差——线性回归</h1><p>线性回归使用均方误差作为损失函数。其激活函数为 identical ，即$a=net=w^{\\mathsf{T}}x$ 。<br>其损失：</p>\n<script type=\"math/tex; mode=display\">\nJ(w) = \\frac{1}{2} (a-y)^{2}=\\frac{1}{2} (net-y)^{2}</script><p>输出神经元的敏感度：</p>\n<script type=\"math/tex; mode=display\">\n\\delta = \\frac{\\partial J}{\\partial net} = net-y = a-y</script><h1 id=\"交叉熵——逻辑回归\"><a href=\"#交叉熵——逻辑回归\" class=\"headerlink\" title=\"交叉熵——逻辑回归\"></a>交叉熵——逻辑回归</h1><p>逻辑回归使用最大似然估计方法估计参数。</p>\n<h2 id=\"二分类逻辑回归\"><a href=\"#二分类逻辑回归\" class=\"headerlink\" title=\"二分类逻辑回归\"></a>二分类逻辑回归</h2><p>其激活函数为 sigmoid 函数 ，即$a=\\sigma(net)=\\sigma(w^{\\mathsf{T}}x)=\\frac{1}{1+\\exp(-w^{\\mathsf{T}}x)}$ 。<br>其损失：</p>\n<script type=\"math/tex; mode=display\">\nJ(w) = -L(w) = -y \\ln a - (1-y) \\ln (1-a)</script><p>其中：</p>\n<script type=\"math/tex; mode=display\">\nL(w) = y \\ln a + (1-y) \\ln (1-a)</script><p>是所谓的 log-likelihood。</p>\n<p>输出神经元的敏感度：</p>\n<script type=\"math/tex; mode=display\">\n\\delta = \\frac{\\partial J}{\\partial net} = \\frac{\\partial J}{\\partial a} \\frac{\\partial a}{\\partial net} = \\frac{a-y}{(1-a)a}(1-a)a = a-y</script><h2 id=\"多分类逻辑回归\"><a href=\"#多分类逻辑回归\" class=\"headerlink\" title=\"多分类逻辑回归\"></a>多分类逻辑回归</h2><p>其激活函数为 softmax 函数，即$a=\\mathrm{softmax}(net)=\\frac{\\exp(net_{i})}{\\sum_{j=1}^{N}\\exp(net_{j})}$ 。</p>\n<p>其损失：</p>\n<script type=\"math/tex; mode=display\">\nJ(w) = -\\sum_{j=1}^{N} y_j \\ln a_j = \\sum_{j=1}^{N} y_j (\\ln \\sum_{k=1}^{N} e^{net_{k}}-net_{j})</script><p>第 $i$ 个输出神经元的敏感度：</p>\n<script type=\"math/tex; mode=display\">\n\\delta_{i} = \\frac{\\partial J}{\\partial net_{i}} = \\sum_{j=1}^{N} y_j (\\frac{\\sum_{k=1}^{N} e^{net_{k}}\\frac{\\partial net_{k}}{\\partial net_{i}}}{\\sum_{k=1}^{N} e^{net_{k}}} - \\frac{\\partial net_{j}}{\\partial net_{i}}) = \\sum_{j=1}^{N} y_j  \\frac{e^{net_{i}}}{\\sum_{k=1}^{N} e^{net_{k}}} - \\sum_{j=1}^{N} y_j  \\frac{\\partial net_{j}}{\\partial net_{i}} = a_{i}-y_{i}</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"先说结论\"><a href=\"#先说结论\" class=\"headerlink\" title=\"先说结论\"></a>先说结论</h1><p>在神经网络中有两种可以选择的损失函数，即均方误差和交叉熵误差。这两种损失函数在形式上很不一样，而且分别适用与不同的地方（回归或分类）。但是在适用梯度下降法学习最优参数时，它们是一致的。</p>\n<p>考虑神经网络的 BP 算法，其最核心的一步是计算敏感度 $\\delta$ ，采用不同损失函数和激活函数的神经网络在 BP 算法上的差异也主要存在于敏感度上。而下文中，我们就分别讨论了上述两种损失函数在不同场景下的情况，得到了它们的敏感度是相等的结论。</p>\n<p>用到的符号：</p>\n<ul>\n<li>$net$ 或 $net_{i}$ ，净输出值，即 $net = w^{\\mathsf{T}}x$ 。</li>\n<li>$a$ 或 $a_{i}$ ，神经元的激活函数输出值，即 $a=f(net)$ 。</li>\n</ul>\n<h1 id=\"均方误差——线性回归\"><a href=\"#均方误差——线性回归\" class=\"headerlink\" title=\"均方误差——线性回归\"></a>均方误差——线性回归</h1><p>线性回归使用均方误差作为损失函数。其激活函数为 identical ，即$a=net=w^{\\mathsf{T}}x$ 。<br>其损失：</p>\n<script type=\"math/tex; mode=display\">\nJ(w) = \\frac{1}{2} (a-y)^{2}=\\frac{1}{2} (net-y)^{2}</script><p>输出神经元的敏感度：</p>\n<script type=\"math/tex; mode=display\">\n\\delta = \\frac{\\partial J}{\\partial net} = net-y = a-y</script><h1 id=\"交叉熵——逻辑回归\"><a href=\"#交叉熵——逻辑回归\" class=\"headerlink\" title=\"交叉熵——逻辑回归\"></a>交叉熵——逻辑回归</h1><p>逻辑回归使用最大似然估计方法估计参数。</p>\n<h2 id=\"二分类逻辑回归\"><a href=\"#二分类逻辑回归\" class=\"headerlink\" title=\"二分类逻辑回归\"></a>二分类逻辑回归</h2><p>其激活函数为 sigmoid 函数 ，即$a=\\sigma(net)=\\sigma(w^{\\mathsf{T}}x)=\\frac{1}{1+\\exp(-w^{\\mathsf{T}}x)}$ 。<br>其损失：</p>\n<script type=\"math/tex; mode=display\">\nJ(w) = -L(w) = -y \\ln a - (1-y) \\ln (1-a)</script><p>其中：</p>\n<script type=\"math/tex; mode=display\">\nL(w) = y \\ln a + (1-y) \\ln (1-a)</script><p>是所谓的 log-likelihood。</p>\n<p>输出神经元的敏感度：</p>\n<script type=\"math/tex; mode=display\">\n\\delta = \\frac{\\partial J}{\\partial net} = \\frac{\\partial J}{\\partial a} \\frac{\\partial a}{\\partial net} = \\frac{a-y}{(1-a)a}(1-a)a = a-y</script><h2 id=\"多分类逻辑回归\"><a href=\"#多分类逻辑回归\" class=\"headerlink\" title=\"多分类逻辑回归\"></a>多分类逻辑回归</h2><p>其激活函数为 softmax 函数，即$a=\\mathrm{softmax}(net)=\\frac{\\exp(net_{i})}{\\sum_{j=1}^{N}\\exp(net_{j})}$ 。</p>\n<p>其损失：</p>\n<script type=\"math/tex; mode=display\">\nJ(w) = -\\sum_{j=1}^{N} y_j \\ln a_j = \\sum_{j=1}^{N} y_j (\\ln \\sum_{k=1}^{N} e^{net_{k}}-net_{j})</script><p>第 $i$ 个输出神经元的敏感度：</p>\n<script type=\"math/tex; mode=display\">\n\\delta_{i} = \\frac{\\partial J}{\\partial net_{i}} = \\sum_{j=1}^{N} y_j (\\frac{\\sum_{k=1}^{N} e^{net_{k}}\\frac{\\partial net_{k}}{\\partial net_{i}}}{\\sum_{k=1}^{N} e^{net_{k}}} - \\frac{\\partial net_{j}}{\\partial net_{i}}) = \\sum_{j=1}^{N} y_j  \\frac{e^{net_{i}}}{\\sum_{k=1}^{N} e^{net_{k}}} - \\sum_{j=1}^{N} y_j  \\frac{\\partial net_{j}}{\\partial net_{i}} = a_{i}-y_{i}</script>"},{"title":"浅谈 PCA 和 LFM 的异同","date":"2017-08-08T12:25:59.000Z","_content":"\n在机器学习中有两种算法非常相似，却又很不同。\n它们就是“PCA（Principal Component Analysis）”和“LFM（Latent Factor Model）”。\n许多人都知道，PCA 常用于数据的降维，而接触到 LFM 最多的地方就是大家都知道的推荐系统。\n事实上，这两种方法都涉及到矩阵的分解，也都是为了得到数据中隐含的信息。\n（说到矩阵分解， PCA 是特征值分解；而 LFM 经常是被分解为两个矩阵的乘积，如 user-item 矩阵分解。）\n\n下面详细讲一下这两个算法的不同点。\n\n<!-- more -->\n\n1. PCA\n\n   PCA的目的是尽可能简化数据，即当数据维度 $p​$ 很大时，我们希望能够以一个更小维度的 $q​$ 维数据来代替它，而又不损失原始数据的随机程度，或者说是想要保持原始数据的分散程度。\n   即，希望找到能够代替原始数据 $\\lbrace X_{1}, X_{2}, \\cdots, X_{p} \\rbrace$ 的一组数据 $\\lbrace Y_{1}, Y_{2}, \\cdots, Y_{q} \\rbrace$ ，使得\n   $$\n   Y_{i} = \\sum_{j=1}^{p} \\alpha_{j}^{(i)} X_{j}\n   $$\n   由上式的线性关系可知，PCA可以看做是相关性（correlation） 的推广。我们从视觉上给随机变量所展示出来的数据一个分散程度的定义——“波动”。那么 correlation 就可以说，某两个随机变量的涨落相似，如果它们的相关性系数很高。\n\n   同样，如果将某个 $Y_{i}$ 分解为 $X_{j}$ 的线性组合时，某些 $\\alpha_{j}^{(i)}$ 很大（而其他的 $\\alpha_{j}^{(i)}$ 接近 $0$ 甚至等于 $0$ ），那么我们就可以认为 $Y_{i}$ 与这些 $X_{j}$ 共沉浮，即相关性很高。当我们尽可能的排除掉那些 $\\alpha_{j}^{(i)} $ 接近 $0$ 的维度时，对于剩下的维度，我们就可以说：原始的 $p$ 维数据的“波动”，大部分都反映在这个 $q$ 维的子空间里。\n\n   因此，PCA 所给出的 $q$ 个特征向量（eigenvector）就是描述这个“波动”的 $q$ 个主方向，而 $q$ 个特征值（eigenvalue）就是描述这个“波动”在这 $q$ 个主方向上波动的幅度。\n\n   所以，PCA 才被用来降维，也就是我们用它来关注数据“最乱”的几个方向，其它的方向变化不大，不重要。\n\n2. LFM\n\n   目标：解释 $\\lbrace X_{1}, X_{2}, \\cdots, X_{p} \\rbrace$ 之间的相关性，即希望找到一些 $Z_{k}$，有\n   $$\n   \\forall X_{i}, \\text{ 能找到一系列 } \\beta_{k}^{(i)}, \\text{ 使得 } X_{i} = \\sum_{k=1}^{r} \\beta_{k}^{(i)} Z_{k}\n   $$\n   一般，假设 $\\lbrace Z_{1}, Z_{2}, \\cdots, Z_{r} \\rbrace$ 是零均值、单位方差且不相关的。\n   （注意这里，所有的 $\\beta^{\\mathsf{T}}$ 就有点像 user 矩阵，所有的 $Z$ 就有点像 item 矩阵。所以 user-item 矩阵分解是LFM的一种应用。）\n\n   同时，对于不同的 $X$ ，他们的那些 $\\beta$ 越相似，这些 $X$ 就越相似。\n   这也是我们能用它来判定有哪些用户相似，或者有哪些商品相似的原因。\n\n   ​\n\n**结论**\nPCA：归纳。找出分散的根源。\nLFM：分解。将随机变量分解为同一组变量的线性组合，来试图解释它们相关性的来源。\n","source":"_posts/compare-between-PCA-and-LFM.md","raw":"---\ntitle: 浅谈 PCA 和 LFM 的异同\ndate: 2017-08-08 20:25:59\ncategories: ML\ntags: \n      - PCA\n      - LFM\n---\n\n在机器学习中有两种算法非常相似，却又很不同。\n它们就是“PCA（Principal Component Analysis）”和“LFM（Latent Factor Model）”。\n许多人都知道，PCA 常用于数据的降维，而接触到 LFM 最多的地方就是大家都知道的推荐系统。\n事实上，这两种方法都涉及到矩阵的分解，也都是为了得到数据中隐含的信息。\n（说到矩阵分解， PCA 是特征值分解；而 LFM 经常是被分解为两个矩阵的乘积，如 user-item 矩阵分解。）\n\n下面详细讲一下这两个算法的不同点。\n\n<!-- more -->\n\n1. PCA\n\n   PCA的目的是尽可能简化数据，即当数据维度 $p​$ 很大时，我们希望能够以一个更小维度的 $q​$ 维数据来代替它，而又不损失原始数据的随机程度，或者说是想要保持原始数据的分散程度。\n   即，希望找到能够代替原始数据 $\\lbrace X_{1}, X_{2}, \\cdots, X_{p} \\rbrace$ 的一组数据 $\\lbrace Y_{1}, Y_{2}, \\cdots, Y_{q} \\rbrace$ ，使得\n   $$\n   Y_{i} = \\sum_{j=1}^{p} \\alpha_{j}^{(i)} X_{j}\n   $$\n   由上式的线性关系可知，PCA可以看做是相关性（correlation） 的推广。我们从视觉上给随机变量所展示出来的数据一个分散程度的定义——“波动”。那么 correlation 就可以说，某两个随机变量的涨落相似，如果它们的相关性系数很高。\n\n   同样，如果将某个 $Y_{i}$ 分解为 $X_{j}$ 的线性组合时，某些 $\\alpha_{j}^{(i)}$ 很大（而其他的 $\\alpha_{j}^{(i)}$ 接近 $0$ 甚至等于 $0$ ），那么我们就可以认为 $Y_{i}$ 与这些 $X_{j}$ 共沉浮，即相关性很高。当我们尽可能的排除掉那些 $\\alpha_{j}^{(i)} $ 接近 $0$ 的维度时，对于剩下的维度，我们就可以说：原始的 $p$ 维数据的“波动”，大部分都反映在这个 $q$ 维的子空间里。\n\n   因此，PCA 所给出的 $q$ 个特征向量（eigenvector）就是描述这个“波动”的 $q$ 个主方向，而 $q$ 个特征值（eigenvalue）就是描述这个“波动”在这 $q$ 个主方向上波动的幅度。\n\n   所以，PCA 才被用来降维，也就是我们用它来关注数据“最乱”的几个方向，其它的方向变化不大，不重要。\n\n2. LFM\n\n   目标：解释 $\\lbrace X_{1}, X_{2}, \\cdots, X_{p} \\rbrace$ 之间的相关性，即希望找到一些 $Z_{k}$，有\n   $$\n   \\forall X_{i}, \\text{ 能找到一系列 } \\beta_{k}^{(i)}, \\text{ 使得 } X_{i} = \\sum_{k=1}^{r} \\beta_{k}^{(i)} Z_{k}\n   $$\n   一般，假设 $\\lbrace Z_{1}, Z_{2}, \\cdots, Z_{r} \\rbrace$ 是零均值、单位方差且不相关的。\n   （注意这里，所有的 $\\beta^{\\mathsf{T}}$ 就有点像 user 矩阵，所有的 $Z$ 就有点像 item 矩阵。所以 user-item 矩阵分解是LFM的一种应用。）\n\n   同时，对于不同的 $X$ ，他们的那些 $\\beta$ 越相似，这些 $X$ 就越相似。\n   这也是我们能用它来判定有哪些用户相似，或者有哪些商品相似的原因。\n\n   ​\n\n**结论**\nPCA：归纳。找出分散的根源。\nLFM：分解。将随机变量分解为同一组变量的线性组合，来试图解释它们相关性的来源。\n","slug":"compare-between-PCA-and-LFM","published":1,"updated":"2021-07-19T13:03:31.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktiva0009qxt6bpod90eh","content":"<p>在机器学习中有两种算法非常相似，却又很不同。<br>它们就是“PCA（Principal Component Analysis）”和“LFM（Latent Factor Model）”。<br>许多人都知道，PCA 常用于数据的降维，而接触到 LFM 最多的地方就是大家都知道的推荐系统。<br>事实上，这两种方法都涉及到矩阵的分解，也都是为了得到数据中隐含的信息。<br>（说到矩阵分解， PCA 是特征值分解；而 LFM 经常是被分解为两个矩阵的乘积，如 user-item 矩阵分解。）</p>\n<p>下面详细讲一下这两个算法的不同点。</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>PCA</p>\n<p>PCA的目的是尽可能简化数据，即当数据维度 $p​$ 很大时，我们希望能够以一个更小维度的 $q​$ 维数据来代替它，而又不损失原始数据的随机程度，或者说是想要保持原始数据的分散程度。<br>即，希望找到能够代替原始数据 $\\lbrace X_{1}, X_{2}, \\cdots, X_{p} \\rbrace$ 的一组数据 $\\lbrace Y_{1}, Y_{2}, \\cdots, Y_{q} \\rbrace$ ，使得</p>\n<script type=\"math/tex; mode=display\">\nY_{i} = \\sum_{j=1}^{p} \\alpha_{j}^{(i)} X_{j}</script><p>由上式的线性关系可知，PCA可以看做是相关性（correlation） 的推广。我们从视觉上给随机变量所展示出来的数据一个分散程度的定义——“波动”。那么 correlation 就可以说，某两个随机变量的涨落相似，如果它们的相关性系数很高。</p>\n<p>同样，如果将某个 $Y_{i}$ 分解为 $X_{j}$ 的线性组合时，某些 $\\alpha_{j}^{(i)}$ 很大（而其他的 $\\alpha_{j}^{(i)}$ 接近 $0$ 甚至等于 $0$ ），那么我们就可以认为 $Y_{i}$ 与这些 $X_{j}$ 共沉浮，即相关性很高。当我们尽可能的排除掉那些 $\\alpha_{j}^{(i)} $ 接近 $0$ 的维度时，对于剩下的维度，我们就可以说：原始的 $p$ 维数据的“波动”，大部分都反映在这个 $q$ 维的子空间里。</p>\n<p>因此，PCA 所给出的 $q$ 个特征向量（eigenvector）就是描述这个“波动”的 $q$ 个主方向，而 $q$ 个特征值（eigenvalue）就是描述这个“波动”在这 $q$ 个主方向上波动的幅度。</p>\n<p>所以，PCA 才被用来降维，也就是我们用它来关注数据“最乱”的几个方向，其它的方向变化不大，不重要。</p>\n</li>\n<li><p>LFM</p>\n<p>目标：解释 $\\lbrace X_{1}, X_{2}, \\cdots, X_{p} \\rbrace$ 之间的相关性，即希望找到一些 $Z_{k}$，有</p>\n<script type=\"math/tex; mode=display\">\n\\forall X_{i}, \\text{ 能找到一系列 } \\beta_{k}^{(i)}, \\text{ 使得 } X_{i} = \\sum_{k=1}^{r} \\beta_{k}^{(i)} Z_{k}</script><p>一般，假设 $\\lbrace Z_{1}, Z_{2}, \\cdots, Z_{r} \\rbrace$ 是零均值、单位方差且不相关的。<br>（注意这里，所有的 $\\beta^{\\mathsf{T}}$ 就有点像 user 矩阵，所有的 $Z$ 就有点像 item 矩阵。所以 user-item 矩阵分解是LFM的一种应用。）</p>\n<p>同时，对于不同的 $X$ ，他们的那些 $\\beta$ 越相似，这些 $X$ 就越相似。<br>这也是我们能用它来判定有哪些用户相似，或者有哪些商品相似的原因。</p>\n<p>​</p>\n</li>\n</ol>\n<p><strong>结论</strong><br>PCA：归纳。找出分散的根源。<br>LFM：分解。将随机变量分解为同一组变量的线性组合，来试图解释它们相关性的来源。</p>\n","site":{"data":{}},"excerpt":"<p>在机器学习中有两种算法非常相似，却又很不同。<br>它们就是“PCA（Principal Component Analysis）”和“LFM（Latent Factor Model）”。<br>许多人都知道，PCA 常用于数据的降维，而接触到 LFM 最多的地方就是大家都知道的推荐系统。<br>事实上，这两种方法都涉及到矩阵的分解，也都是为了得到数据中隐含的信息。<br>（说到矩阵分解， PCA 是特征值分解；而 LFM 经常是被分解为两个矩阵的乘积，如 user-item 矩阵分解。）</p>\n<p>下面详细讲一下这两个算法的不同点。</p>","more":"<ol>\n<li><p>PCA</p>\n<p>PCA的目的是尽可能简化数据，即当数据维度 $p​$ 很大时，我们希望能够以一个更小维度的 $q​$ 维数据来代替它，而又不损失原始数据的随机程度，或者说是想要保持原始数据的分散程度。<br>即，希望找到能够代替原始数据 $\\lbrace X_{1}, X_{2}, \\cdots, X_{p} \\rbrace$ 的一组数据 $\\lbrace Y_{1}, Y_{2}, \\cdots, Y_{q} \\rbrace$ ，使得</p>\n<script type=\"math/tex; mode=display\">\nY_{i} = \\sum_{j=1}^{p} \\alpha_{j}^{(i)} X_{j}</script><p>由上式的线性关系可知，PCA可以看做是相关性（correlation） 的推广。我们从视觉上给随机变量所展示出来的数据一个分散程度的定义——“波动”。那么 correlation 就可以说，某两个随机变量的涨落相似，如果它们的相关性系数很高。</p>\n<p>同样，如果将某个 $Y_{i}$ 分解为 $X_{j}$ 的线性组合时，某些 $\\alpha_{j}^{(i)}$ 很大（而其他的 $\\alpha_{j}^{(i)}$ 接近 $0$ 甚至等于 $0$ ），那么我们就可以认为 $Y_{i}$ 与这些 $X_{j}$ 共沉浮，即相关性很高。当我们尽可能的排除掉那些 $\\alpha_{j}^{(i)} $ 接近 $0$ 的维度时，对于剩下的维度，我们就可以说：原始的 $p$ 维数据的“波动”，大部分都反映在这个 $q$ 维的子空间里。</p>\n<p>因此，PCA 所给出的 $q$ 个特征向量（eigenvector）就是描述这个“波动”的 $q$ 个主方向，而 $q$ 个特征值（eigenvalue）就是描述这个“波动”在这 $q$ 个主方向上波动的幅度。</p>\n<p>所以，PCA 才被用来降维，也就是我们用它来关注数据“最乱”的几个方向，其它的方向变化不大，不重要。</p>\n</li>\n<li><p>LFM</p>\n<p>目标：解释 $\\lbrace X_{1}, X_{2}, \\cdots, X_{p} \\rbrace$ 之间的相关性，即希望找到一些 $Z_{k}$，有</p>\n<script type=\"math/tex; mode=display\">\n\\forall X_{i}, \\text{ 能找到一系列 } \\beta_{k}^{(i)}, \\text{ 使得 } X_{i} = \\sum_{k=1}^{r} \\beta_{k}^{(i)} Z_{k}</script><p>一般，假设 $\\lbrace Z_{1}, Z_{2}, \\cdots, Z_{r} \\rbrace$ 是零均值、单位方差且不相关的。<br>（注意这里，所有的 $\\beta^{\\mathsf{T}}$ 就有点像 user 矩阵，所有的 $Z$ 就有点像 item 矩阵。所以 user-item 矩阵分解是LFM的一种应用。）</p>\n<p>同时，对于不同的 $X$ ，他们的那些 $\\beta$ 越相似，这些 $X$ 就越相似。<br>这也是我们能用它来判定有哪些用户相似，或者有哪些商品相似的原因。</p>\n<p>​</p>\n</li>\n</ol>\n<p><strong>结论</strong><br>PCA：归纳。找出分散的根源。<br>LFM：分解。将随机变量分解为同一组变量的线性组合，来试图解释它们相关性的来源。</p>"},{"title":"论判别模型和生成模型","date":"2018-02-04T14:17:38.000Z","description":"讨论了判别模型和生成模型的定义、理论推导及优缺点。","_content":"\n# 一个粗略的解释\n\n**判别模型（Discriminative model）**：能够直接判断出输入的数据会输出什么东西的模型。比如对于一个输入，直接告诉你这个输入是 $+1$ 类，还是 $-1$ 类。\n\n常见的判别模型有：线性回归（Linear Regression）、逻辑斯谛回归（Logistic Regression）、支持向量机（SVM）、传统神经网络（Traditional Neural Networks)、线性判别分析（Linear Discriminative Analysis）、条件随机场（Conditional Random Field）等。\n\n**生成模型（Generative model）**：描述猜测目标的可能的分布的模型。比如给一个输入，告诉你输出为各个类别的概率。\n\n常见的生成模型有：朴素贝叶斯（Naive Bayes）、隐马尔可夫模型（Hidden Markov Model）、贝叶斯网络（Bayes Networks）、隐含狄利克雷分布（Latent Dirichlet Allocation）。\n\n# 理论解释\n\n定义：\n\n- 训练数据 $(C, X)$ ，$C=\\{c_1, c_2, \\cdots, c_n\\}$ 是n个训练样本的标签，$X=\\{x_1, x_2, \\cdots, x_n\\}$ 是n个训练样本的特征。\n- 单个测试数据 $(\\tilde{c}, \\tilde{x})$ ，$\\tilde{c}$ 是测试数据的标签，$\\tilde{x}$ 是测试数据的特征。\n\n## 判别模型\n\n训练完毕后，输入测试数据，直接给出 $P(\\tilde{c} | \\tilde{x}) = P(\\tilde{c} | \\tilde{x}, C, X)$ 。我们认为这个条件分布是由模型的参数 $\\theta$ 决定的，即 $P(\\tilde{c} | \\tilde{x},\\theta)$ 。对于求解结果，我们有：\n$$\n\\begin{aligned}\n&P(\\tilde{c} | \\tilde{x}) \\\\\n=&P(\\tilde{c} | \\tilde{x}, C, X) \\\\\n=&\\int P(\\tilde{c}, \\theta | \\tilde{x}, C, X) \\, d \\theta \\\\\n=&\\int P(\\tilde{c} | \\tilde{x}, \\theta) \\cdot P(\\theta | C, X) \\, d \\theta \\\\\n=&\\int P(\\tilde{c} | \\tilde{x}, \\theta) \\cdot \\frac{P(C | X, \\theta) \\cdot P(\\theta)}{\\int P(C | X, \\theta) \\cdot P(\\theta) \\, d \\theta} \\, d \\theta\n\\end{aligned}\n$$\n实际上，求这个式子里的两个积分是相当复杂的，而且几乎不可能拿到全部的信息。\n\n所以我们采用 variational inference 的方法来解决这个问题。如果训练样本足够多的话，可以使用 $\\theta$ 的最大后验分布 $\\theta_{MAP}$ 来对 $\\theta$ 进行点估计（point estimate）。此时有， $P(\\tilde{c} | \\tilde{x}) = P(\\tilde{c} | \\tilde{x}, C, X) = P(\\tilde{c} | \\tilde{x},\\theta_{MAP})$ 。\n\n至于求最大后验分布，考虑到 $P(C|X) = \\int P(C | X, \\theta) \\cdot P(\\theta) \\, d \\theta$ 是一个常数，我们只要求 $P(C | X, \\theta) \\cdot P(\\theta)$ 的最大值就可以，于是问题转变为求最大似然函数。\n\n事实上，在假设噪声为高斯分布的前提下，最小误差平方和优化问题等价于求最大似然函数。（有兴趣的同学可以自己证明一下。）\n\n总结一下，判别模型求解的思路是：条件分布→模型参数后验概率最大→似然函数/参数先验最大→最大似然。\n\n## 生成模型\n\n直接求出联合分布 $P(\\tilde{x}, \\tilde{c})$ 。\n\n以朴素贝叶斯为例：$P(\\tilde{x}, \\tilde{c}) = P(\\tilde{x} | \\tilde{c}) \\cdot P(\\tilde{c})$ 。\n\n总结一下，生成模型求解的思路是：联合分布→求解类别先验概率和类别条件概率。\n\n# 两种模型的优缺点\n\n## 判别模型\n\n优点：\n\n1. 节省计算资源，需要的样本数量少于生成模型。\n2. 准确率较生成模型高。\n3. 由于直接预测结果的概率，而不需要求解每一个类别的条件概率，所以允许对数据进行抽象（比如降维、构造等）。\n\n缺点：\n\n生成模型的优点它都没有。\n\n## 生成模型\n\n优点：\n\n1. 因为结果给出的是联合分布，不仅能计算条件分布，还可以给出其它信息（比如边缘分布）。\n2. 收敛速度比较快，当样本数量较多时，可以更快地收敛于真实模型。\n3. 能够应付隐变量存在的情况，如高斯混合模型（Gaussian Mixture Model）。\n\n缺点：\n\n1. 需要更多的样本和计算，尤其是为了更准确估计类别条件分布，需要增加样本的数目。","source":"_posts/discriminative-or-generative-model.md","raw":"---\ntitle: 论判别模型和生成模型\ndate: 2018-02-04 22:17:38\ncategories: ML\ntags:\n     - Discriminative model\n     - Generative model\ndescription: 讨论了判别模型和生成模型的定义、理论推导及优缺点。\n---\n\n# 一个粗略的解释\n\n**判别模型（Discriminative model）**：能够直接判断出输入的数据会输出什么东西的模型。比如对于一个输入，直接告诉你这个输入是 $+1$ 类，还是 $-1$ 类。\n\n常见的判别模型有：线性回归（Linear Regression）、逻辑斯谛回归（Logistic Regression）、支持向量机（SVM）、传统神经网络（Traditional Neural Networks)、线性判别分析（Linear Discriminative Analysis）、条件随机场（Conditional Random Field）等。\n\n**生成模型（Generative model）**：描述猜测目标的可能的分布的模型。比如给一个输入，告诉你输出为各个类别的概率。\n\n常见的生成模型有：朴素贝叶斯（Naive Bayes）、隐马尔可夫模型（Hidden Markov Model）、贝叶斯网络（Bayes Networks）、隐含狄利克雷分布（Latent Dirichlet Allocation）。\n\n# 理论解释\n\n定义：\n\n- 训练数据 $(C, X)$ ，$C=\\{c_1, c_2, \\cdots, c_n\\}$ 是n个训练样本的标签，$X=\\{x_1, x_2, \\cdots, x_n\\}$ 是n个训练样本的特征。\n- 单个测试数据 $(\\tilde{c}, \\tilde{x})$ ，$\\tilde{c}$ 是测试数据的标签，$\\tilde{x}$ 是测试数据的特征。\n\n## 判别模型\n\n训练完毕后，输入测试数据，直接给出 $P(\\tilde{c} | \\tilde{x}) = P(\\tilde{c} | \\tilde{x}, C, X)$ 。我们认为这个条件分布是由模型的参数 $\\theta$ 决定的，即 $P(\\tilde{c} | \\tilde{x},\\theta)$ 。对于求解结果，我们有：\n$$\n\\begin{aligned}\n&P(\\tilde{c} | \\tilde{x}) \\\\\n=&P(\\tilde{c} | \\tilde{x}, C, X) \\\\\n=&\\int P(\\tilde{c}, \\theta | \\tilde{x}, C, X) \\, d \\theta \\\\\n=&\\int P(\\tilde{c} | \\tilde{x}, \\theta) \\cdot P(\\theta | C, X) \\, d \\theta \\\\\n=&\\int P(\\tilde{c} | \\tilde{x}, \\theta) \\cdot \\frac{P(C | X, \\theta) \\cdot P(\\theta)}{\\int P(C | X, \\theta) \\cdot P(\\theta) \\, d \\theta} \\, d \\theta\n\\end{aligned}\n$$\n实际上，求这个式子里的两个积分是相当复杂的，而且几乎不可能拿到全部的信息。\n\n所以我们采用 variational inference 的方法来解决这个问题。如果训练样本足够多的话，可以使用 $\\theta$ 的最大后验分布 $\\theta_{MAP}$ 来对 $\\theta$ 进行点估计（point estimate）。此时有， $P(\\tilde{c} | \\tilde{x}) = P(\\tilde{c} | \\tilde{x}, C, X) = P(\\tilde{c} | \\tilde{x},\\theta_{MAP})$ 。\n\n至于求最大后验分布，考虑到 $P(C|X) = \\int P(C | X, \\theta) \\cdot P(\\theta) \\, d \\theta$ 是一个常数，我们只要求 $P(C | X, \\theta) \\cdot P(\\theta)$ 的最大值就可以，于是问题转变为求最大似然函数。\n\n事实上，在假设噪声为高斯分布的前提下，最小误差平方和优化问题等价于求最大似然函数。（有兴趣的同学可以自己证明一下。）\n\n总结一下，判别模型求解的思路是：条件分布→模型参数后验概率最大→似然函数/参数先验最大→最大似然。\n\n## 生成模型\n\n直接求出联合分布 $P(\\tilde{x}, \\tilde{c})$ 。\n\n以朴素贝叶斯为例：$P(\\tilde{x}, \\tilde{c}) = P(\\tilde{x} | \\tilde{c}) \\cdot P(\\tilde{c})$ 。\n\n总结一下，生成模型求解的思路是：联合分布→求解类别先验概率和类别条件概率。\n\n# 两种模型的优缺点\n\n## 判别模型\n\n优点：\n\n1. 节省计算资源，需要的样本数量少于生成模型。\n2. 准确率较生成模型高。\n3. 由于直接预测结果的概率，而不需要求解每一个类别的条件概率，所以允许对数据进行抽象（比如降维、构造等）。\n\n缺点：\n\n生成模型的优点它都没有。\n\n## 生成模型\n\n优点：\n\n1. 因为结果给出的是联合分布，不仅能计算条件分布，还可以给出其它信息（比如边缘分布）。\n2. 收敛速度比较快，当样本数量较多时，可以更快地收敛于真实模型。\n3. 能够应付隐变量存在的情况，如高斯混合模型（Gaussian Mixture Model）。\n\n缺点：\n\n1. 需要更多的样本和计算，尤其是为了更准确估计类别条件分布，需要增加样本的数目。","slug":"discriminative-or-generative-model","published":1,"updated":"2021-07-19T13:03:31.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivb000aqxt6iflya024","content":"<h1 id=\"一个粗略的解释\"><a href=\"#一个粗略的解释\" class=\"headerlink\" title=\"一个粗略的解释\"></a>一个粗略的解释</h1><p><strong>判别模型（Discriminative model）</strong>：能够直接判断出输入的数据会输出什么东西的模型。比如对于一个输入，直接告诉你这个输入是 $+1$ 类，还是 $-1$ 类。</p>\n<p>常见的判别模型有：线性回归（Linear Regression）、逻辑斯谛回归（Logistic Regression）、支持向量机（SVM）、传统神经网络（Traditional Neural Networks)、线性判别分析（Linear Discriminative Analysis）、条件随机场（Conditional Random Field）等。</p>\n<p><strong>生成模型（Generative model）</strong>：描述猜测目标的可能的分布的模型。比如给一个输入，告诉你输出为各个类别的概率。</p>\n<p>常见的生成模型有：朴素贝叶斯（Naive Bayes）、隐马尔可夫模型（Hidden Markov Model）、贝叶斯网络（Bayes Networks）、隐含狄利克雷分布（Latent Dirichlet Allocation）。</p>\n<h1 id=\"理论解释\"><a href=\"#理论解释\" class=\"headerlink\" title=\"理论解释\"></a>理论解释</h1><p>定义：</p>\n<ul>\n<li>训练数据 $(C, X)$ ，$C=\\{c_1, c_2, \\cdots, c_n\\}$ 是n个训练样本的标签，$X=\\{x_1, x_2, \\cdots, x_n\\}$ 是n个训练样本的特征。</li>\n<li>单个测试数据 $(\\tilde{c}, \\tilde{x})$ ，$\\tilde{c}$ 是测试数据的标签，$\\tilde{x}$ 是测试数据的特征。</li>\n</ul>\n<h2 id=\"判别模型\"><a href=\"#判别模型\" class=\"headerlink\" title=\"判别模型\"></a>判别模型</h2><p>训练完毕后，输入测试数据，直接给出 $P(\\tilde{c} | \\tilde{x}) = P(\\tilde{c} | \\tilde{x}, C, X)$ 。我们认为这个条件分布是由模型的参数 $\\theta$ 决定的，即 $P(\\tilde{c} | \\tilde{x},\\theta)$ 。对于求解结果，我们有：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n&P(\\tilde{c} | \\tilde{x}) \\\\\n=&P(\\tilde{c} | \\tilde{x}, C, X) \\\\\n=&\\int P(\\tilde{c}, \\theta | \\tilde{x}, C, X) \\, d \\theta \\\\\n=&\\int P(\\tilde{c} | \\tilde{x}, \\theta) \\cdot P(\\theta | C, X) \\, d \\theta \\\\\n=&\\int P(\\tilde{c} | \\tilde{x}, \\theta) \\cdot \\frac{P(C | X, \\theta) \\cdot P(\\theta)}{\\int P(C | X, \\theta) \\cdot P(\\theta) \\, d \\theta} \\, d \\theta\n\\end{aligned}</script><p>实际上，求这个式子里的两个积分是相当复杂的，而且几乎不可能拿到全部的信息。</p>\n<p>所以我们采用 variational inference 的方法来解决这个问题。如果训练样本足够多的话，可以使用 $\\theta$ 的最大后验分布 $\\theta_{MAP}$ 来对 $\\theta$ 进行点估计（point estimate）。此时有， $P(\\tilde{c} | \\tilde{x}) = P(\\tilde{c} | \\tilde{x}, C, X) = P(\\tilde{c} | \\tilde{x},\\theta_{MAP})$ 。</p>\n<p>至于求最大后验分布，考虑到 $P(C|X) = \\int P(C | X, \\theta) \\cdot P(\\theta) \\, d \\theta$ 是一个常数，我们只要求 $P(C | X, \\theta) \\cdot P(\\theta)$ 的最大值就可以，于是问题转变为求最大似然函数。</p>\n<p>事实上，在假设噪声为高斯分布的前提下，最小误差平方和优化问题等价于求最大似然函数。（有兴趣的同学可以自己证明一下。）</p>\n<p>总结一下，判别模型求解的思路是：条件分布→模型参数后验概率最大→似然函数/参数先验最大→最大似然。</p>\n<h2 id=\"生成模型\"><a href=\"#生成模型\" class=\"headerlink\" title=\"生成模型\"></a>生成模型</h2><p>直接求出联合分布 $P(\\tilde{x}, \\tilde{c})$ 。</p>\n<p>以朴素贝叶斯为例：$P(\\tilde{x}, \\tilde{c}) = P(\\tilde{x} | \\tilde{c}) \\cdot P(\\tilde{c})$ 。</p>\n<p>总结一下，生成模型求解的思路是：联合分布→求解类别先验概率和类别条件概率。</p>\n<h1 id=\"两种模型的优缺点\"><a href=\"#两种模型的优缺点\" class=\"headerlink\" title=\"两种模型的优缺点\"></a>两种模型的优缺点</h1><h2 id=\"判别模型-1\"><a href=\"#判别模型-1\" class=\"headerlink\" title=\"判别模型\"></a>判别模型</h2><p>优点：</p>\n<ol>\n<li>节省计算资源，需要的样本数量少于生成模型。</li>\n<li>准确率较生成模型高。</li>\n<li>由于直接预测结果的概率，而不需要求解每一个类别的条件概率，所以允许对数据进行抽象（比如降维、构造等）。</li>\n</ol>\n<p>缺点：</p>\n<p>生成模型的优点它都没有。</p>\n<h2 id=\"生成模型-1\"><a href=\"#生成模型-1\" class=\"headerlink\" title=\"生成模型\"></a>生成模型</h2><p>优点：</p>\n<ol>\n<li>因为结果给出的是联合分布，不仅能计算条件分布，还可以给出其它信息（比如边缘分布）。</li>\n<li>收敛速度比较快，当样本数量较多时，可以更快地收敛于真实模型。</li>\n<li>能够应付隐变量存在的情况，如高斯混合模型（Gaussian Mixture Model）。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>需要更多的样本和计算，尤其是为了更准确估计类别条件分布，需要增加样本的数目。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一个粗略的解释\"><a href=\"#一个粗略的解释\" class=\"headerlink\" title=\"一个粗略的解释\"></a>一个粗略的解释</h1><p><strong>判别模型（Discriminative model）</strong>：能够直接判断出输入的数据会输出什么东西的模型。比如对于一个输入，直接告诉你这个输入是 $+1$ 类，还是 $-1$ 类。</p>\n<p>常见的判别模型有：线性回归（Linear Regression）、逻辑斯谛回归（Logistic Regression）、支持向量机（SVM）、传统神经网络（Traditional Neural Networks)、线性判别分析（Linear Discriminative Analysis）、条件随机场（Conditional Random Field）等。</p>\n<p><strong>生成模型（Generative model）</strong>：描述猜测目标的可能的分布的模型。比如给一个输入，告诉你输出为各个类别的概率。</p>\n<p>常见的生成模型有：朴素贝叶斯（Naive Bayes）、隐马尔可夫模型（Hidden Markov Model）、贝叶斯网络（Bayes Networks）、隐含狄利克雷分布（Latent Dirichlet Allocation）。</p>\n<h1 id=\"理论解释\"><a href=\"#理论解释\" class=\"headerlink\" title=\"理论解释\"></a>理论解释</h1><p>定义：</p>\n<ul>\n<li>训练数据 $(C, X)$ ，$C=\\{c_1, c_2, \\cdots, c_n\\}$ 是n个训练样本的标签，$X=\\{x_1, x_2, \\cdots, x_n\\}$ 是n个训练样本的特征。</li>\n<li>单个测试数据 $(\\tilde{c}, \\tilde{x})$ ，$\\tilde{c}$ 是测试数据的标签，$\\tilde{x}$ 是测试数据的特征。</li>\n</ul>\n<h2 id=\"判别模型\"><a href=\"#判别模型\" class=\"headerlink\" title=\"判别模型\"></a>判别模型</h2><p>训练完毕后，输入测试数据，直接给出 $P(\\tilde{c} | \\tilde{x}) = P(\\tilde{c} | \\tilde{x}, C, X)$ 。我们认为这个条件分布是由模型的参数 $\\theta$ 决定的，即 $P(\\tilde{c} | \\tilde{x},\\theta)$ 。对于求解结果，我们有：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n&P(\\tilde{c} | \\tilde{x}) \\\\\n=&P(\\tilde{c} | \\tilde{x}, C, X) \\\\\n=&\\int P(\\tilde{c}, \\theta | \\tilde{x}, C, X) \\, d \\theta \\\\\n=&\\int P(\\tilde{c} | \\tilde{x}, \\theta) \\cdot P(\\theta | C, X) \\, d \\theta \\\\\n=&\\int P(\\tilde{c} | \\tilde{x}, \\theta) \\cdot \\frac{P(C | X, \\theta) \\cdot P(\\theta)}{\\int P(C | X, \\theta) \\cdot P(\\theta) \\, d \\theta} \\, d \\theta\n\\end{aligned}</script><p>实际上，求这个式子里的两个积分是相当复杂的，而且几乎不可能拿到全部的信息。</p>\n<p>所以我们采用 variational inference 的方法来解决这个问题。如果训练样本足够多的话，可以使用 $\\theta$ 的最大后验分布 $\\theta_{MAP}$ 来对 $\\theta$ 进行点估计（point estimate）。此时有， $P(\\tilde{c} | \\tilde{x}) = P(\\tilde{c} | \\tilde{x}, C, X) = P(\\tilde{c} | \\tilde{x},\\theta_{MAP})$ 。</p>\n<p>至于求最大后验分布，考虑到 $P(C|X) = \\int P(C | X, \\theta) \\cdot P(\\theta) \\, d \\theta$ 是一个常数，我们只要求 $P(C | X, \\theta) \\cdot P(\\theta)$ 的最大值就可以，于是问题转变为求最大似然函数。</p>\n<p>事实上，在假设噪声为高斯分布的前提下，最小误差平方和优化问题等价于求最大似然函数。（有兴趣的同学可以自己证明一下。）</p>\n<p>总结一下，判别模型求解的思路是：条件分布→模型参数后验概率最大→似然函数/参数先验最大→最大似然。</p>\n<h2 id=\"生成模型\"><a href=\"#生成模型\" class=\"headerlink\" title=\"生成模型\"></a>生成模型</h2><p>直接求出联合分布 $P(\\tilde{x}, \\tilde{c})$ 。</p>\n<p>以朴素贝叶斯为例：$P(\\tilde{x}, \\tilde{c}) = P(\\tilde{x} | \\tilde{c}) \\cdot P(\\tilde{c})$ 。</p>\n<p>总结一下，生成模型求解的思路是：联合分布→求解类别先验概率和类别条件概率。</p>\n<h1 id=\"两种模型的优缺点\"><a href=\"#两种模型的优缺点\" class=\"headerlink\" title=\"两种模型的优缺点\"></a>两种模型的优缺点</h1><h2 id=\"判别模型-1\"><a href=\"#判别模型-1\" class=\"headerlink\" title=\"判别模型\"></a>判别模型</h2><p>优点：</p>\n<ol>\n<li>节省计算资源，需要的样本数量少于生成模型。</li>\n<li>准确率较生成模型高。</li>\n<li>由于直接预测结果的概率，而不需要求解每一个类别的条件概率，所以允许对数据进行抽象（比如降维、构造等）。</li>\n</ol>\n<p>缺点：</p>\n<p>生成模型的优点它都没有。</p>\n<h2 id=\"生成模型-1\"><a href=\"#生成模型-1\" class=\"headerlink\" title=\"生成模型\"></a>生成模型</h2><p>优点：</p>\n<ol>\n<li>因为结果给出的是联合分布，不仅能计算条件分布，还可以给出其它信息（比如边缘分布）。</li>\n<li>收敛速度比较快，当样本数量较多时，可以更快地收敛于真实模型。</li>\n<li>能够应付隐变量存在的情况，如高斯混合模型（Gaussian Mixture Model）。</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>需要更多的样本和计算，尤其是为了更准确估计类别条件分布，需要增加样本的数目。</li>\n</ol>\n"},{"title":"浅谈 boost、Adaboost 和 提升树","date":"2017-10-15T03:31:35.000Z","description":"简述从 boost 到 Adaboost 和提升树的一些关系和自己的见解。","_content":"\n# 三个公式\n\n1. boost = 加法模型 + 前向分布算法\n2. Adaboost = boost + 损失函数是指数函数（基函数任意）\n3. 提升树 = boost + 基函数是决策树（损失函数任意）\n\n由此可以看出：\n\n1. boost 是一种算法框架，该框架是由加法模型和前向分布算法组成的。\n2. Adaboost 和提升树都是 boost 算法的一个特殊情况，分别限定了 boost 算法的某一部分而得到。\n\n# 加法模型\n\n前向分布算法：每次学习一个基函数的参数作为下一个基函数。\n\n下一个基函数的选择标准：在已经学习到的加法模型中，选择一个使损失函数最小的基函数。\n\n# 常见损失函数\n\n指数损失函数：决定了 Adaboost 必须进行加权取样（权重由错误率决定），最终模型也是加权累计。\n\n平方误差损失函数：决定了 BRT 的下一个模型应该学习前一个模型的残差。\n\n一般损失函数：决定了 GBDT/GBRT 的下一个模型应该学习一个模型的梯度（残差近似）。\n\n# 各种提升树\n\nBDT：二叉分类树 + 指数损失（加权学习）。（其实就是 Adaboost 要求基函数是二叉分类树）。\n\nBRT：二叉回归树 + 平方误差损失（残差）。\n\nGBDT：二叉分类树 + 普通损失函数（计算负梯度，近似残差）。\n\nGBRT：二叉回归树 + 普通损失函数（计算负梯度，近似残差）。\n\n其中，如果把 GBRT 的损失函数选为平方误差损失，则退化为 BRT，因为平方损失函数的负梯度就是残差。","source":"_posts/from-boost-to-Adaboost-to-GBT.md","raw":"---\ntitle: 浅谈 boost、Adaboost 和 提升树\ndate: 2017-10-15 11:31:35\ncategories: ML\ntags:\n     - Ensemble\n     - Boost\n     - GBDT/GBRT\ndescription: 简述从 boost 到 Adaboost 和提升树的一些关系和自己的见解。\n---\n\n# 三个公式\n\n1. boost = 加法模型 + 前向分布算法\n2. Adaboost = boost + 损失函数是指数函数（基函数任意）\n3. 提升树 = boost + 基函数是决策树（损失函数任意）\n\n由此可以看出：\n\n1. boost 是一种算法框架，该框架是由加法模型和前向分布算法组成的。\n2. Adaboost 和提升树都是 boost 算法的一个特殊情况，分别限定了 boost 算法的某一部分而得到。\n\n# 加法模型\n\n前向分布算法：每次学习一个基函数的参数作为下一个基函数。\n\n下一个基函数的选择标准：在已经学习到的加法模型中，选择一个使损失函数最小的基函数。\n\n# 常见损失函数\n\n指数损失函数：决定了 Adaboost 必须进行加权取样（权重由错误率决定），最终模型也是加权累计。\n\n平方误差损失函数：决定了 BRT 的下一个模型应该学习前一个模型的残差。\n\n一般损失函数：决定了 GBDT/GBRT 的下一个模型应该学习一个模型的梯度（残差近似）。\n\n# 各种提升树\n\nBDT：二叉分类树 + 指数损失（加权学习）。（其实就是 Adaboost 要求基函数是二叉分类树）。\n\nBRT：二叉回归树 + 平方误差损失（残差）。\n\nGBDT：二叉分类树 + 普通损失函数（计算负梯度，近似残差）。\n\nGBRT：二叉回归树 + 普通损失函数（计算负梯度，近似残差）。\n\n其中，如果把 GBRT 的损失函数选为平方误差损失，则退化为 BRT，因为平方损失函数的负梯度就是残差。","slug":"from-boost-to-Adaboost-to-GBT","published":1,"updated":"2021-07-19T13:03:31.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivc000bqxt6rmriycof","content":"<h1 id=\"三个公式\"><a href=\"#三个公式\" class=\"headerlink\" title=\"三个公式\"></a>三个公式</h1><ol>\n<li>boost = 加法模型 + 前向分布算法</li>\n<li>Adaboost = boost + 损失函数是指数函数（基函数任意）</li>\n<li>提升树 = boost + 基函数是决策树（损失函数任意）</li>\n</ol>\n<p>由此可以看出：</p>\n<ol>\n<li>boost 是一种算法框架，该框架是由加法模型和前向分布算法组成的。</li>\n<li>Adaboost 和提升树都是 boost 算法的一个特殊情况，分别限定了 boost 算法的某一部分而得到。</li>\n</ol>\n<h1 id=\"加法模型\"><a href=\"#加法模型\" class=\"headerlink\" title=\"加法模型\"></a>加法模型</h1><p>前向分布算法：每次学习一个基函数的参数作为下一个基函数。</p>\n<p>下一个基函数的选择标准：在已经学习到的加法模型中，选择一个使损失函数最小的基函数。</p>\n<h1 id=\"常见损失函数\"><a href=\"#常见损失函数\" class=\"headerlink\" title=\"常见损失函数\"></a>常见损失函数</h1><p>指数损失函数：决定了 Adaboost 必须进行加权取样（权重由错误率决定），最终模型也是加权累计。</p>\n<p>平方误差损失函数：决定了 BRT 的下一个模型应该学习前一个模型的残差。</p>\n<p>一般损失函数：决定了 GBDT/GBRT 的下一个模型应该学习一个模型的梯度（残差近似）。</p>\n<h1 id=\"各种提升树\"><a href=\"#各种提升树\" class=\"headerlink\" title=\"各种提升树\"></a>各种提升树</h1><p>BDT：二叉分类树 + 指数损失（加权学习）。（其实就是 Adaboost 要求基函数是二叉分类树）。</p>\n<p>BRT：二叉回归树 + 平方误差损失（残差）。</p>\n<p>GBDT：二叉分类树 + 普通损失函数（计算负梯度，近似残差）。</p>\n<p>GBRT：二叉回归树 + 普通损失函数（计算负梯度，近似残差）。</p>\n<p>其中，如果把 GBRT 的损失函数选为平方误差损失，则退化为 BRT，因为平方损失函数的负梯度就是残差。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"三个公式\"><a href=\"#三个公式\" class=\"headerlink\" title=\"三个公式\"></a>三个公式</h1><ol>\n<li>boost = 加法模型 + 前向分布算法</li>\n<li>Adaboost = boost + 损失函数是指数函数（基函数任意）</li>\n<li>提升树 = boost + 基函数是决策树（损失函数任意）</li>\n</ol>\n<p>由此可以看出：</p>\n<ol>\n<li>boost 是一种算法框架，该框架是由加法模型和前向分布算法组成的。</li>\n<li>Adaboost 和提升树都是 boost 算法的一个特殊情况，分别限定了 boost 算法的某一部分而得到。</li>\n</ol>\n<h1 id=\"加法模型\"><a href=\"#加法模型\" class=\"headerlink\" title=\"加法模型\"></a>加法模型</h1><p>前向分布算法：每次学习一个基函数的参数作为下一个基函数。</p>\n<p>下一个基函数的选择标准：在已经学习到的加法模型中，选择一个使损失函数最小的基函数。</p>\n<h1 id=\"常见损失函数\"><a href=\"#常见损失函数\" class=\"headerlink\" title=\"常见损失函数\"></a>常见损失函数</h1><p>指数损失函数：决定了 Adaboost 必须进行加权取样（权重由错误率决定），最终模型也是加权累计。</p>\n<p>平方误差损失函数：决定了 BRT 的下一个模型应该学习前一个模型的残差。</p>\n<p>一般损失函数：决定了 GBDT/GBRT 的下一个模型应该学习一个模型的梯度（残差近似）。</p>\n<h1 id=\"各种提升树\"><a href=\"#各种提升树\" class=\"headerlink\" title=\"各种提升树\"></a>各种提升树</h1><p>BDT：二叉分类树 + 指数损失（加权学习）。（其实就是 Adaboost 要求基函数是二叉分类树）。</p>\n<p>BRT：二叉回归树 + 平方误差损失（残差）。</p>\n<p>GBDT：二叉分类树 + 普通损失函数（计算负梯度，近似残差）。</p>\n<p>GBRT：二叉回归树 + 普通损失函数（计算负梯度，近似残差）。</p>\n<p>其中，如果把 GBRT 的损失函数选为平方误差损失，则退化为 BRT，因为平方损失函数的负梯度就是残差。</p>\n"},{"title":"【机器不太会学习】的第一篇博文","date":"2017-08-07T14:28:18.000Z","_content":"\n我的博客【机器不太会学习】也要开始慢慢写作了。\n\n<!-- more -->\n\n最早被带入机器学习领域，还是要感谢我的好友——[史博士](http://txshi-mt.com)。\n（他的博客都是干货，很干，百年大旱那种干。）\n进入这一领域以后，又把自己的看家本领——数学，给拾起来了。\n让我对自己喜欢的东西更增添了一份热爱。\n\n在学习机器学习的过程中，我有幸遇到了我女朋友。\n她是一个极好的女人，是一个我以后想娶她的女人。\n正是她在我想换做这方面的工作的时候，支持我说：“只要是你喜欢做的事情，不管怎么样，我都支持你。”\n作为一个男人遇到这样的女人还能怎么样呢？当然是娶她，然后给她幸福。\n\n以后的博文想来可能会偏向理论吧，我的应用做的并不是很好。\n想来估计也没有什么人看，就算是自己的日记吧，通往AI之国的某条道路上“旅行日记”。\n","source":"_posts/init-blog.md","raw":"---\ntitle: 【机器不太会学习】的第一篇博文\ndate: 2017-08-07 22:28:18\ncategories: Life\ntags:\n---\n\n我的博客【机器不太会学习】也要开始慢慢写作了。\n\n<!-- more -->\n\n最早被带入机器学习领域，还是要感谢我的好友——[史博士](http://txshi-mt.com)。\n（他的博客都是干货，很干，百年大旱那种干。）\n进入这一领域以后，又把自己的看家本领——数学，给拾起来了。\n让我对自己喜欢的东西更增添了一份热爱。\n\n在学习机器学习的过程中，我有幸遇到了我女朋友。\n她是一个极好的女人，是一个我以后想娶她的女人。\n正是她在我想换做这方面的工作的时候，支持我说：“只要是你喜欢做的事情，不管怎么样，我都支持你。”\n作为一个男人遇到这样的女人还能怎么样呢？当然是娶她，然后给她幸福。\n\n以后的博文想来可能会偏向理论吧，我的应用做的并不是很好。\n想来估计也没有什么人看，就算是自己的日记吧，通往AI之国的某条道路上“旅行日记”。\n","slug":"init-blog","published":1,"updated":"2021-07-19T13:03:31.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivd000cqxt6tjtqoylw","content":"<p>我的博客【机器不太会学习】也要开始慢慢写作了。</p>\n<a id=\"more\"></a>\n<p>最早被带入机器学习领域，还是要感谢我的好友——<a href=\"http://txshi-mt.com\" target=\"_blank\" rel=\"noopener\">史博士</a>。<br>（他的博客都是干货，很干，百年大旱那种干。）<br>进入这一领域以后，又把自己的看家本领——数学，给拾起来了。<br>让我对自己喜欢的东西更增添了一份热爱。</p>\n<p>在学习机器学习的过程中，我有幸遇到了我女朋友。<br>她是一个极好的女人，是一个我以后想娶她的女人。<br>正是她在我想换做这方面的工作的时候，支持我说：“只要是你喜欢做的事情，不管怎么样，我都支持你。”<br>作为一个男人遇到这样的女人还能怎么样呢？当然是娶她，然后给她幸福。</p>\n<p>以后的博文想来可能会偏向理论吧，我的应用做的并不是很好。<br>想来估计也没有什么人看，就算是自己的日记吧，通往AI之国的某条道路上“旅行日记”。</p>\n","site":{"data":{}},"excerpt":"<p>我的博客【机器不太会学习】也要开始慢慢写作了。</p>","more":"<p>最早被带入机器学习领域，还是要感谢我的好友——<a href=\"http://txshi-mt.com\" target=\"_blank\" rel=\"noopener\">史博士</a>。<br>（他的博客都是干货，很干，百年大旱那种干。）<br>进入这一领域以后，又把自己的看家本领——数学，给拾起来了。<br>让我对自己喜欢的东西更增添了一份热爱。</p>\n<p>在学习机器学习的过程中，我有幸遇到了我女朋友。<br>她是一个极好的女人，是一个我以后想娶她的女人。<br>正是她在我想换做这方面的工作的时候，支持我说：“只要是你喜欢做的事情，不管怎么样，我都支持你。”<br>作为一个男人遇到这样的女人还能怎么样呢？当然是娶她，然后给她幸福。</p>\n<p>以后的博文想来可能会偏向理论吧，我的应用做的并不是很好。<br>想来估计也没有什么人看，就算是自己的日记吧，通往AI之国的某条道路上“旅行日记”。</p>"},{"title":"K-means 是 GMM 的一种特例","date":"2017-10-23T15:23:56.000Z","description":"从一个 GMM 的特定生成模型讨论了 K-means 与 EM 算法的关系。","_content":"\n# 对一个特定 GMM 模型的讨论\n\n考虑到在非监督学习 K-means 中，那些不存在的所谓的“标签”也可以被当成“不可见因素”的想法。\n本文通过一个特定的 GMM（高斯混合模型，Gaussian Mixture Model）模型讨论了 K-means 算法在该特定模型下可以看做一个 EM 算法。因此可以认为 K-means 算法与 EM 算法在某种先验条件下存在交集。\n\n首先给出以下两个问题的描述：\n\n**聚类问题**：给定数据点 $x_{1}, x_{2}, \\cdots, x_{N} \\in \\mathbb{R}^{m}$ ，给定分类数目 $K$ ，求出 $K$ 个类中心 $\\mu_{1}, \\mu_{2}, \\cdots, \\mu_{K}$ ，使得所有点到距离该点最近的类中心的距离的平方和 $\\sum\\limits_{i=1}^{N} \\min\\limits_{1 \\le k \\le K} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}$ 最小。\n\n**含隐变量的最大似然问题**：给定数据点 $x_{1}, x_{2}, \\cdots, x_{N} \\in \\mathbb{R}^{m}$ ，给定分类数目 $K$ ，考虑如下生成模型，\n$$\np(x, z \\mid \\mu_{1}, \\mu_{2}, \\cdots, \\mu_{K}) \\propto \n\\left \\{\n\\begin{aligned}\n&\\exp \\left ( -\\lVert x-\\mu_{z} \\rVert_{2}^{2} \\right ) & \\qquad \\lVert x-\\mu_{z} \\rVert_{2} = \\min_{1 \\le k \\le K} \\lVert x-\\mu_{k} \\rVert_{2} \\\\\n&0 & \\qquad \\lVert x-\\mu_{z} \\rVert_{2} > \\min_{1 \\le k \\le K} \\lVert x-\\mu_{k} \\rVert_{2}\n\\end{aligned}\n\\right.\n$$\n模型中 $z \\in \\{1, 2, \\cdots, K\\}$ 为隐变量。\n\n这个模型的意义是：先验的假设真的存在那么 $K$ 个中心，只不过看不到而已。而所有的数据确实也是根据这 $K$ 个中心生成的，且这个生成概率是以其最近的“隐形中心”为中心呈高斯分布，并且不认为（零概率）该数据点是由离其较远的“隐形中心”生成的。（因此这个模型的条件还是很苛刻的。）\n\n结论：用 EM 算法解这个含隐变量的最大似然问题等价于用 K-means 算法解聚类问题。\n\n**E 步骤**：\n\n1. 计算\n   $$\n   p(z_{i} \\mid x_{i}, \\{\\mu_{k}\\}^{(t)}) \\propto \n   \\left \\{\n   \\begin{aligned}\n   &1 & \\qquad \\lVert x_{i}-\\mu_{z_{i}}^{(t)} \\rVert_{2} = \\min_{1 \\le k \\le K} \\lVert x_{i}-\\mu_{k}^{(t)} \\rVert_{2} \\\\\n   &0 & \\qquad \\lVert x_{i}-\\mu_{z_{i}}^{(t)} \\rVert_{2} > \\min_{1 \\le k \\le K} \\lVert x_{i}-\\mu_{k}^{(t)} \\rVert_{2}\n   \\end{aligned}\n   \\right.\n   $$\n   以及\n   $$\n   p(Z \\mid X, \\{ \\mu_{k} \\}^{(t)}) = \\prod_{i=1}^{N} p(z_{i} \\mid x_{i}, \\{ \\mu_{k} \\}^{(t)})\n   $$\n   这里使用正比于符号是考虑离数据点最近的中心可能不止一个。\n\n   下面为了简单只讨论只有一个中心，且中心编号为 $y_{i}$ 的情况。\n\n2. 计算目标函数\n   $$\n   \\begin{aligned}\n   Q(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) & = E_{Z \\mid X, \\{ \\mu_{k} \\}^{(t)}} [\\log p(X, Z \\mid \\{ \\mu_{k} \\})] \\\\\n   & = \\sum_{i=1}^{N} E_{z_{i} \\mid x_{i}, \\{ \\mu_{k} \\}^{(t)}} [\\log p(x_{i}, z_{i} \\mid \\{ \\mu_{k} \\})] \\\\\n   & = \\sum_{i=1}^{N} \\log p(x_{i}, z_{i}=y_{i} \\mid \\{ \\mu_{k} \\}) \\\\\n   & = \\mathrm{const} - \\sum_{i=1}^{N} \\lVert x_{i} - \\mu_{y_{i}} \\rVert_{2}^{2}\n   \\end{aligned}\n   $$\n   所以最大化目标函数就等价于最小化 $Q'(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) = \\sum\\limits_{i=1}^{N} \\lVert x_{i} - \\mu_{y_{i}} \\rVert_{2}^{2}$ 。\n\n**M 步骤**：\n\n找寻 $\\{ \\mu_{k} \\}$ 使得 $Q'$ 最小。\n\n将指标集 $\\{1, 2, \\cdots, K \\}$ 分割为 $K$ 个，$I_{k} = \\{ i \\mid y_{i}=k \\}$ ，则\n$$\nQ'(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) = \\sum\\limits_{i=1}^{K} \\sum_{i \\in I_{k}} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}\n$$\n由于求和的每一项都是非负的，所以每一个内层求和 $\\sum\\limits_{i \\in I_{k}} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}$ 都达到最小时，总和最小。\n\n这和 K-means 最小化二范数平方和是一样的。\n\n# 进阶讨论\n\n以上的讨论是为了简单起见提出了一个简化的 GMM 模型，这个模型里没有提到高斯分布的协方差矩阵的问题。实际上，K-means 在简化 GMM 时，应该是限制协方差矩阵 $\\Sigma = \\sigma I$ ，再让 $\\sigma \\to 0$ 。更多的讨论在 [这篇论文](http://icml.cc/2012/papers/291.pdf) 的 2.1 节可以找到。","source":"_posts/kmeans-is-a-gmm.md","raw":"---\ntitle: K-means 是 GMM 的一种特例\ndate: 2017-10-23 23:23:56\ncategories: ML\ntags:\n     - K-means\n     - GMM\n     - EM Algorithm\ndescription: 从一个 GMM 的特定生成模型讨论了 K-means 与 EM 算法的关系。\n---\n\n# 对一个特定 GMM 模型的讨论\n\n考虑到在非监督学习 K-means 中，那些不存在的所谓的“标签”也可以被当成“不可见因素”的想法。\n本文通过一个特定的 GMM（高斯混合模型，Gaussian Mixture Model）模型讨论了 K-means 算法在该特定模型下可以看做一个 EM 算法。因此可以认为 K-means 算法与 EM 算法在某种先验条件下存在交集。\n\n首先给出以下两个问题的描述：\n\n**聚类问题**：给定数据点 $x_{1}, x_{2}, \\cdots, x_{N} \\in \\mathbb{R}^{m}$ ，给定分类数目 $K$ ，求出 $K$ 个类中心 $\\mu_{1}, \\mu_{2}, \\cdots, \\mu_{K}$ ，使得所有点到距离该点最近的类中心的距离的平方和 $\\sum\\limits_{i=1}^{N} \\min\\limits_{1 \\le k \\le K} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}$ 最小。\n\n**含隐变量的最大似然问题**：给定数据点 $x_{1}, x_{2}, \\cdots, x_{N} \\in \\mathbb{R}^{m}$ ，给定分类数目 $K$ ，考虑如下生成模型，\n$$\np(x, z \\mid \\mu_{1}, \\mu_{2}, \\cdots, \\mu_{K}) \\propto \n\\left \\{\n\\begin{aligned}\n&\\exp \\left ( -\\lVert x-\\mu_{z} \\rVert_{2}^{2} \\right ) & \\qquad \\lVert x-\\mu_{z} \\rVert_{2} = \\min_{1 \\le k \\le K} \\lVert x-\\mu_{k} \\rVert_{2} \\\\\n&0 & \\qquad \\lVert x-\\mu_{z} \\rVert_{2} > \\min_{1 \\le k \\le K} \\lVert x-\\mu_{k} \\rVert_{2}\n\\end{aligned}\n\\right.\n$$\n模型中 $z \\in \\{1, 2, \\cdots, K\\}$ 为隐变量。\n\n这个模型的意义是：先验的假设真的存在那么 $K$ 个中心，只不过看不到而已。而所有的数据确实也是根据这 $K$ 个中心生成的，且这个生成概率是以其最近的“隐形中心”为中心呈高斯分布，并且不认为（零概率）该数据点是由离其较远的“隐形中心”生成的。（因此这个模型的条件还是很苛刻的。）\n\n结论：用 EM 算法解这个含隐变量的最大似然问题等价于用 K-means 算法解聚类问题。\n\n**E 步骤**：\n\n1. 计算\n   $$\n   p(z_{i} \\mid x_{i}, \\{\\mu_{k}\\}^{(t)}) \\propto \n   \\left \\{\n   \\begin{aligned}\n   &1 & \\qquad \\lVert x_{i}-\\mu_{z_{i}}^{(t)} \\rVert_{2} = \\min_{1 \\le k \\le K} \\lVert x_{i}-\\mu_{k}^{(t)} \\rVert_{2} \\\\\n   &0 & \\qquad \\lVert x_{i}-\\mu_{z_{i}}^{(t)} \\rVert_{2} > \\min_{1 \\le k \\le K} \\lVert x_{i}-\\mu_{k}^{(t)} \\rVert_{2}\n   \\end{aligned}\n   \\right.\n   $$\n   以及\n   $$\n   p(Z \\mid X, \\{ \\mu_{k} \\}^{(t)}) = \\prod_{i=1}^{N} p(z_{i} \\mid x_{i}, \\{ \\mu_{k} \\}^{(t)})\n   $$\n   这里使用正比于符号是考虑离数据点最近的中心可能不止一个。\n\n   下面为了简单只讨论只有一个中心，且中心编号为 $y_{i}$ 的情况。\n\n2. 计算目标函数\n   $$\n   \\begin{aligned}\n   Q(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) & = E_{Z \\mid X, \\{ \\mu_{k} \\}^{(t)}} [\\log p(X, Z \\mid \\{ \\mu_{k} \\})] \\\\\n   & = \\sum_{i=1}^{N} E_{z_{i} \\mid x_{i}, \\{ \\mu_{k} \\}^{(t)}} [\\log p(x_{i}, z_{i} \\mid \\{ \\mu_{k} \\})] \\\\\n   & = \\sum_{i=1}^{N} \\log p(x_{i}, z_{i}=y_{i} \\mid \\{ \\mu_{k} \\}) \\\\\n   & = \\mathrm{const} - \\sum_{i=1}^{N} \\lVert x_{i} - \\mu_{y_{i}} \\rVert_{2}^{2}\n   \\end{aligned}\n   $$\n   所以最大化目标函数就等价于最小化 $Q'(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) = \\sum\\limits_{i=1}^{N} \\lVert x_{i} - \\mu_{y_{i}} \\rVert_{2}^{2}$ 。\n\n**M 步骤**：\n\n找寻 $\\{ \\mu_{k} \\}$ 使得 $Q'$ 最小。\n\n将指标集 $\\{1, 2, \\cdots, K \\}$ 分割为 $K$ 个，$I_{k} = \\{ i \\mid y_{i}=k \\}$ ，则\n$$\nQ'(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) = \\sum\\limits_{i=1}^{K} \\sum_{i \\in I_{k}} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}\n$$\n由于求和的每一项都是非负的，所以每一个内层求和 $\\sum\\limits_{i \\in I_{k}} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}$ 都达到最小时，总和最小。\n\n这和 K-means 最小化二范数平方和是一样的。\n\n# 进阶讨论\n\n以上的讨论是为了简单起见提出了一个简化的 GMM 模型，这个模型里没有提到高斯分布的协方差矩阵的问题。实际上，K-means 在简化 GMM 时，应该是限制协方差矩阵 $\\Sigma = \\sigma I$ ，再让 $\\sigma \\to 0$ 。更多的讨论在 [这篇论文](http://icml.cc/2012/papers/291.pdf) 的 2.1 节可以找到。","slug":"kmeans-is-a-gmm","published":1,"updated":"2021-07-19T13:03:31.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktive000dqxt6y2wq3vso","content":"<h1 id=\"对一个特定-GMM-模型的讨论\"><a href=\"#对一个特定-GMM-模型的讨论\" class=\"headerlink\" title=\"对一个特定 GMM 模型的讨论\"></a>对一个特定 GMM 模型的讨论</h1><p>考虑到在非监督学习 K-means 中，那些不存在的所谓的“标签”也可以被当成“不可见因素”的想法。<br>本文通过一个特定的 GMM（高斯混合模型，Gaussian Mixture Model）模型讨论了 K-means 算法在该特定模型下可以看做一个 EM 算法。因此可以认为 K-means 算法与 EM 算法在某种先验条件下存在交集。</p>\n<p>首先给出以下两个问题的描述：</p>\n<p><strong>聚类问题</strong>：给定数据点 $x_{1}, x_{2}, \\cdots, x_{N} \\in \\mathbb{R}^{m}$ ，给定分类数目 $K$ ，求出 $K$ 个类中心 $\\mu_{1}, \\mu_{2}, \\cdots, \\mu_{K}$ ，使得所有点到距离该点最近的类中心的距离的平方和 $\\sum\\limits_{i=1}^{N} \\min\\limits_{1 \\le k \\le K} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}$ 最小。</p>\n<p><strong>含隐变量的最大似然问题</strong>：给定数据点 $x_{1}, x_{2}, \\cdots, x_{N} \\in \\mathbb{R}^{m}$ ，给定分类数目 $K$ ，考虑如下生成模型，</p>\n<script type=\"math/tex; mode=display\">\np(x, z \\mid \\mu_{1}, \\mu_{2}, \\cdots, \\mu_{K}) \\propto \n\\left \\{\n\\begin{aligned}\n&\\exp \\left ( -\\lVert x-\\mu_{z} \\rVert_{2}^{2} \\right ) & \\qquad \\lVert x-\\mu_{z} \\rVert_{2} = \\min_{1 \\le k \\le K} \\lVert x-\\mu_{k} \\rVert_{2} \\\\\n&0 & \\qquad \\lVert x-\\mu_{z} \\rVert_{2} > \\min_{1 \\le k \\le K} \\lVert x-\\mu_{k} \\rVert_{2}\n\\end{aligned}\n\\right.</script><p>模型中 $z \\in \\{1, 2, \\cdots, K\\}$ 为隐变量。</p>\n<p>这个模型的意义是：先验的假设真的存在那么 $K$ 个中心，只不过看不到而已。而所有的数据确实也是根据这 $K$ 个中心生成的，且这个生成概率是以其最近的“隐形中心”为中心呈高斯分布，并且不认为（零概率）该数据点是由离其较远的“隐形中心”生成的。（因此这个模型的条件还是很苛刻的。）</p>\n<p>结论：用 EM 算法解这个含隐变量的最大似然问题等价于用 K-means 算法解聚类问题。</p>\n<p><strong>E 步骤</strong>：</p>\n<ol>\n<li><p>计算</p>\n<script type=\"math/tex; mode=display\">\np(z_{i} \\mid x_{i}, \\{\\mu_{k}\\}^{(t)}) \\propto \n\\left \\{\n\\begin{aligned}\n&1 & \\qquad \\lVert x_{i}-\\mu_{z_{i}}^{(t)} \\rVert_{2} = \\min_{1 \\le k \\le K} \\lVert x_{i}-\\mu_{k}^{(t)} \\rVert_{2} \\\\\n&0 & \\qquad \\lVert x_{i}-\\mu_{z_{i}}^{(t)} \\rVert_{2} > \\min_{1 \\le k \\le K} \\lVert x_{i}-\\mu_{k}^{(t)} \\rVert_{2}\n\\end{aligned}\n\\right.</script><p>以及</p>\n<script type=\"math/tex; mode=display\">\np(Z \\mid X, \\{ \\mu_{k} \\}^{(t)}) = \\prod_{i=1}^{N} p(z_{i} \\mid x_{i}, \\{ \\mu_{k} \\}^{(t)})</script><p>这里使用正比于符号是考虑离数据点最近的中心可能不止一个。</p>\n<p>下面为了简单只讨论只有一个中心，且中心编号为 $y_{i}$ 的情况。</p>\n</li>\n<li><p>计算目标函数</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nQ(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) & = E_{Z \\mid X, \\{ \\mu_{k} \\}^{(t)}} [\\log p(X, Z \\mid \\{ \\mu_{k} \\})] \\\\\n& = \\sum_{i=1}^{N} E_{z_{i} \\mid x_{i}, \\{ \\mu_{k} \\}^{(t)}} [\\log p(x_{i}, z_{i} \\mid \\{ \\mu_{k} \\})] \\\\\n& = \\sum_{i=1}^{N} \\log p(x_{i}, z_{i}=y_{i} \\mid \\{ \\mu_{k} \\}) \\\\\n& = \\mathrm{const} - \\sum_{i=1}^{N} \\lVert x_{i} - \\mu_{y_{i}} \\rVert_{2}^{2}\n\\end{aligned}</script><p>所以最大化目标函数就等价于最小化 $Q’(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) = \\sum\\limits_{i=1}^{N} \\lVert x_{i} - \\mu_{y_{i}} \\rVert_{2}^{2}$ 。</p>\n</li>\n</ol>\n<p><strong>M 步骤</strong>：</p>\n<p>找寻 $\\{ \\mu_{k} \\}$ 使得 $Q’$ 最小。</p>\n<p>将指标集 $\\{1, 2, \\cdots, K \\}$ 分割为 $K$ 个，$I_{k} = \\{ i \\mid y_{i}=k \\}$ ，则</p>\n<script type=\"math/tex; mode=display\">\nQ'(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) = \\sum\\limits_{i=1}^{K} \\sum_{i \\in I_{k}} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}</script><p>由于求和的每一项都是非负的，所以每一个内层求和 $\\sum\\limits_{i \\in I_{k}} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}$ 都达到最小时，总和最小。</p>\n<p>这和 K-means 最小化二范数平方和是一样的。</p>\n<h1 id=\"进阶讨论\"><a href=\"#进阶讨论\" class=\"headerlink\" title=\"进阶讨论\"></a>进阶讨论</h1><p>以上的讨论是为了简单起见提出了一个简化的 GMM 模型，这个模型里没有提到高斯分布的协方差矩阵的问题。实际上，K-means 在简化 GMM 时，应该是限制协方差矩阵 $\\Sigma = \\sigma I$ ，再让 $\\sigma \\to 0$ 。更多的讨论在 <a href=\"http://icml.cc/2012/papers/291.pdf\" target=\"_blank\" rel=\"noopener\">这篇论文</a> 的 2.1 节可以找到。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"对一个特定-GMM-模型的讨论\"><a href=\"#对一个特定-GMM-模型的讨论\" class=\"headerlink\" title=\"对一个特定 GMM 模型的讨论\"></a>对一个特定 GMM 模型的讨论</h1><p>考虑到在非监督学习 K-means 中，那些不存在的所谓的“标签”也可以被当成“不可见因素”的想法。<br>本文通过一个特定的 GMM（高斯混合模型，Gaussian Mixture Model）模型讨论了 K-means 算法在该特定模型下可以看做一个 EM 算法。因此可以认为 K-means 算法与 EM 算法在某种先验条件下存在交集。</p>\n<p>首先给出以下两个问题的描述：</p>\n<p><strong>聚类问题</strong>：给定数据点 $x_{1}, x_{2}, \\cdots, x_{N} \\in \\mathbb{R}^{m}$ ，给定分类数目 $K$ ，求出 $K$ 个类中心 $\\mu_{1}, \\mu_{2}, \\cdots, \\mu_{K}$ ，使得所有点到距离该点最近的类中心的距离的平方和 $\\sum\\limits_{i=1}^{N} \\min\\limits_{1 \\le k \\le K} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}$ 最小。</p>\n<p><strong>含隐变量的最大似然问题</strong>：给定数据点 $x_{1}, x_{2}, \\cdots, x_{N} \\in \\mathbb{R}^{m}$ ，给定分类数目 $K$ ，考虑如下生成模型，</p>\n<script type=\"math/tex; mode=display\">\np(x, z \\mid \\mu_{1}, \\mu_{2}, \\cdots, \\mu_{K}) \\propto \n\\left \\{\n\\begin{aligned}\n&\\exp \\left ( -\\lVert x-\\mu_{z} \\rVert_{2}^{2} \\right ) & \\qquad \\lVert x-\\mu_{z} \\rVert_{2} = \\min_{1 \\le k \\le K} \\lVert x-\\mu_{k} \\rVert_{2} \\\\\n&0 & \\qquad \\lVert x-\\mu_{z} \\rVert_{2} > \\min_{1 \\le k \\le K} \\lVert x-\\mu_{k} \\rVert_{2}\n\\end{aligned}\n\\right.</script><p>模型中 $z \\in \\{1, 2, \\cdots, K\\}$ 为隐变量。</p>\n<p>这个模型的意义是：先验的假设真的存在那么 $K$ 个中心，只不过看不到而已。而所有的数据确实也是根据这 $K$ 个中心生成的，且这个生成概率是以其最近的“隐形中心”为中心呈高斯分布，并且不认为（零概率）该数据点是由离其较远的“隐形中心”生成的。（因此这个模型的条件还是很苛刻的。）</p>\n<p>结论：用 EM 算法解这个含隐变量的最大似然问题等价于用 K-means 算法解聚类问题。</p>\n<p><strong>E 步骤</strong>：</p>\n<ol>\n<li><p>计算</p>\n<script type=\"math/tex; mode=display\">\np(z_{i} \\mid x_{i}, \\{\\mu_{k}\\}^{(t)}) \\propto \n\\left \\{\n\\begin{aligned}\n&1 & \\qquad \\lVert x_{i}-\\mu_{z_{i}}^{(t)} \\rVert_{2} = \\min_{1 \\le k \\le K} \\lVert x_{i}-\\mu_{k}^{(t)} \\rVert_{2} \\\\\n&0 & \\qquad \\lVert x_{i}-\\mu_{z_{i}}^{(t)} \\rVert_{2} > \\min_{1 \\le k \\le K} \\lVert x_{i}-\\mu_{k}^{(t)} \\rVert_{2}\n\\end{aligned}\n\\right.</script><p>以及</p>\n<script type=\"math/tex; mode=display\">\np(Z \\mid X, \\{ \\mu_{k} \\}^{(t)}) = \\prod_{i=1}^{N} p(z_{i} \\mid x_{i}, \\{ \\mu_{k} \\}^{(t)})</script><p>这里使用正比于符号是考虑离数据点最近的中心可能不止一个。</p>\n<p>下面为了简单只讨论只有一个中心，且中心编号为 $y_{i}$ 的情况。</p>\n</li>\n<li><p>计算目标函数</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nQ(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) & = E_{Z \\mid X, \\{ \\mu_{k} \\}^{(t)}} [\\log p(X, Z \\mid \\{ \\mu_{k} \\})] \\\\\n& = \\sum_{i=1}^{N} E_{z_{i} \\mid x_{i}, \\{ \\mu_{k} \\}^{(t)}} [\\log p(x_{i}, z_{i} \\mid \\{ \\mu_{k} \\})] \\\\\n& = \\sum_{i=1}^{N} \\log p(x_{i}, z_{i}=y_{i} \\mid \\{ \\mu_{k} \\}) \\\\\n& = \\mathrm{const} - \\sum_{i=1}^{N} \\lVert x_{i} - \\mu_{y_{i}} \\rVert_{2}^{2}\n\\end{aligned}</script><p>所以最大化目标函数就等价于最小化 $Q’(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) = \\sum\\limits_{i=1}^{N} \\lVert x_{i} - \\mu_{y_{i}} \\rVert_{2}^{2}$ 。</p>\n</li>\n</ol>\n<p><strong>M 步骤</strong>：</p>\n<p>找寻 $\\{ \\mu_{k} \\}$ 使得 $Q’$ 最小。</p>\n<p>将指标集 $\\{1, 2, \\cdots, K \\}$ 分割为 $K$ 个，$I_{k} = \\{ i \\mid y_{i}=k \\}$ ，则</p>\n<script type=\"math/tex; mode=display\">\nQ'(\\{ \\mu_{k} \\} \\mid \\{ \\mu_{k} \\}^{(t)}) = \\sum\\limits_{i=1}^{K} \\sum_{i \\in I_{k}} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}</script><p>由于求和的每一项都是非负的，所以每一个内层求和 $\\sum\\limits_{i \\in I_{k}} \\lVert x_{i} - \\mu_{k} \\rVert_{2}^{2}$ 都达到最小时，总和最小。</p>\n<p>这和 K-means 最小化二范数平方和是一样的。</p>\n<h1 id=\"进阶讨论\"><a href=\"#进阶讨论\" class=\"headerlink\" title=\"进阶讨论\"></a>进阶讨论</h1><p>以上的讨论是为了简单起见提出了一个简化的 GMM 模型，这个模型里没有提到高斯分布的协方差矩阵的问题。实际上，K-means 在简化 GMM 时，应该是限制协方差矩阵 $\\Sigma = \\sigma I$ ，再让 $\\sigma \\to 0$ 。更多的讨论在 <a href=\"http://icml.cc/2012/papers/291.pdf\" target=\"_blank\" rel=\"noopener\">这篇论文</a> 的 2.1 节可以找到。</p>\n"},{"title":"浅说范数规范化（一）—— L0 范数、L1 范数、L2 范数","date":"2017-09-07T06:43:10.000Z","description":"浅说机器学习问题中出现的范数规则化问题，本篇着重讲 L0 范数、L1 范数、L2 范数。","_content":"\n# 我们需要范数规则化的原因\n\n监督机器学习用一句话总结就是：Minimize your error while regularizing your parameters。\n其中“minimize error\"是目的，一般采用最小化损失函数的做法来达到。\n而“regularizing parameters”就是一种保障，它可以防止模型发生过拟合，让模型的参数规模尽量向着“简单”的方向进化。（根据奥卡姆剃刀原理 Occam's Razor，简单的模型虽然不尽准确，却也有更好的泛化能力。）\n\n所以监督机器学习一般可以用一个公式来代表：\n$$\nw^{\\ast} = \\mathop{\\arg\\min}_{w} \\sum_{i} L(y_{i}, f(x_{i};w)) + \\lambda\\Omega(w)\n$$\n对于第一项的损失函数，我们不在本文中做过多讨论，大概说一下：\n\n- Square loss —— 最小二乘\n- Hinge loss —— SVM\n- Exp loss —— Boosting\n- Log loss —— Logistic regression\n\n等等。\n总之，不同的 loss 函数有不同的拟合特性。\n\n下面我们重点说一说规则项 $ \\Omega(w) $ 。\n\n# 关于规则项\n\n大多时候规则项都是用来限制参数的复杂程度的。所以一般用参数 $w$ 的某些性质来约束，常见的就是几种范数：L0 范数、L1 范数、L2 范数、迹范数、Frobenius 范数和核范数。\n\n本篇，着重说 L0 范数、L1 范数 和 L2 范数。\n\n（稍微声明一下：一些大家都知道的知识我就不在此赘述了。）\n\n## L0 范数和 L1 范数\n\n这两个范数都是保证参数稀疏性的所以放在一起说。\n\nL0 范数是向量中非 0 元素的个数，这个想必大家都知道了。\n用它来限制稀疏性本身很好，可惜它不是凸的，求解它将成为一个 NP-hard 问题。\n所以我们用能够完全包络 L0 范数的一个凸包—— L1 范数来近似的代替它[^1]。\n\n特征稀疏的好处有以下两点：\n\n- 便于特征选择。现实世界中，问题的特征的数量往往是很大的，而起决定性作用的往往是一小部分，所以我们在建立简单模型的时候，会先考虑舍弃权重快速收敛于 0 的特征。\n- 更具可解释性。例如对于癌症预测问题，可能有上千个特征，如果主要特征只有 10 个，就可以解释为癌症的发生几乎更和这 10 个特征息息相关，其它的暂不考虑影响也不大。\n\n## L2 范数\n\n考虑到 L1 范数在顶点处是不可微的，人们又引入了 L2 范数。\n\n关于 L2 范数如何提升模型泛化能力就不赘述了，在此讲一下它对优化计算所作出的贡献。\n\n优化问题有两个难题，一：局部最小值，二：病态（ill-condition）问题。\n第一个问题很容易理解，那么第二个问题提到的病态又是什么呢？\n简单来说，假设有一个方程 $AX = b$ ，如果 $A$ 和 $b$ 稍微发生改变就会引起 $X$ 的巨大变化的话，我们就称这个方程组系统是病态（ill-condition）的。反之就是良态（well-condition）的。\n\n举个例子，在人脸识别中，如果一个人粘了个假睫毛就不认识了，那就说明她的脸是“病态的”（笑）。\n\n定义：方阵 $A$ 是非奇异的，那么 $A$ 的条件数（condition number）定义为\n$$\n\\kappa(A) = \\lVert A \\rVert \\lVert A^{-1} \\rVert\n$$\n经过简单的证明（请参考本系列的附录 A），我们可以得到以下的结论\n$$\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\cdot \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert} \\\\\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x + \\Delta x \\rVert} \\le \\kappa(A) \\cdot \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert}\n$$\n因此可以认为，condition number 描述的是一个矩阵（或它形成的线性系统）的稳定性（或敏感度）的度量。\n如果一个矩阵的 condition number 在 1 附近，那么它是 well-condition 的；反之，它是 ill-condition 的。\n\n考虑线性回归的解析解\n$$\nw^{\\ast} = (X^{\\mathsf{T}}X)^{-1}X^{\\mathsf{T}}y\n$$\n如果样本的数目比样本的维度还要小的时候，矩阵 $ X^{\\mathsf{T}}X $ 将会不是满秩的，也就不可逆。\n但如果加上 L2 范数规则项，解就变成\n$$\nw^{\\ast} = (X^{\\mathsf{T}}X + \\lambda I)^{-1}X^{\\mathsf{T}}y\n$$\n此时，就可以直接求逆了。\n\n另外，通常我们并不适用解析解求解，而是使用牛顿迭代法求解。\n此时，加入规则项的两一个好处就是它可以将目标函数变为 $ \\lambda $ 强凸（$\\lambda$ -strongly convex）的。\n\n定义：当 $f$ 满足\n$$\nf(y) \\ge f(x) + \\langle \\nabla f(x), y-x \\rangle + \\frac{\\lambda}{2} \\lVert y-x \\rVert ^{2}\n$$\n时，我们称 $f$ 为 $ \\lambda $ 强凸（$\\lambda$ -strongly convex）的。\n\n对比一阶泰勒展开\n$$\nf(y) \\ge f(x) + \\langle \\nabla f(x), y-x \\rangle + o (\\lVert y-x \\rVert)\n$$\n我们可以发现，这种强凸性质不仅仅要求函数在某条切线的上方，而且还要求函数整体在某个二次函数图像上方，即已经具备一定的“向上弯曲度”。\n所以这种函数的下降速度非常快，而且很稳定。\n\n[^1]: [Ramirez, C. & V. Kreinovich & M. Argaez. Why l1 is a good approximation to l0: A geometric explanation [J]. *Engineering*, 2013, 7 (3): 203-207](https://www.researchgate.net/publication/290729378_Why_l1_is_a_good_approximation_to_l0_A_geometric_explanation)\n\n","source":"_posts/norm-regularization-01.md","raw":"---\ntitle: 浅说范数规范化（一）—— L0 范数、L1 范数、L2 范数\ndate: 2017-09-07 14:43:10\ncategories: ML\ntags:\n      - Norm regularization\n      - Convex optimization\ndescription: 浅说机器学习问题中出现的范数规则化问题，本篇着重讲 L0 范数、L1 范数、L2 范数。\n---\n\n# 我们需要范数规则化的原因\n\n监督机器学习用一句话总结就是：Minimize your error while regularizing your parameters。\n其中“minimize error\"是目的，一般采用最小化损失函数的做法来达到。\n而“regularizing parameters”就是一种保障，它可以防止模型发生过拟合，让模型的参数规模尽量向着“简单”的方向进化。（根据奥卡姆剃刀原理 Occam's Razor，简单的模型虽然不尽准确，却也有更好的泛化能力。）\n\n所以监督机器学习一般可以用一个公式来代表：\n$$\nw^{\\ast} = \\mathop{\\arg\\min}_{w} \\sum_{i} L(y_{i}, f(x_{i};w)) + \\lambda\\Omega(w)\n$$\n对于第一项的损失函数，我们不在本文中做过多讨论，大概说一下：\n\n- Square loss —— 最小二乘\n- Hinge loss —— SVM\n- Exp loss —— Boosting\n- Log loss —— Logistic regression\n\n等等。\n总之，不同的 loss 函数有不同的拟合特性。\n\n下面我们重点说一说规则项 $ \\Omega(w) $ 。\n\n# 关于规则项\n\n大多时候规则项都是用来限制参数的复杂程度的。所以一般用参数 $w$ 的某些性质来约束，常见的就是几种范数：L0 范数、L1 范数、L2 范数、迹范数、Frobenius 范数和核范数。\n\n本篇，着重说 L0 范数、L1 范数 和 L2 范数。\n\n（稍微声明一下：一些大家都知道的知识我就不在此赘述了。）\n\n## L0 范数和 L1 范数\n\n这两个范数都是保证参数稀疏性的所以放在一起说。\n\nL0 范数是向量中非 0 元素的个数，这个想必大家都知道了。\n用它来限制稀疏性本身很好，可惜它不是凸的，求解它将成为一个 NP-hard 问题。\n所以我们用能够完全包络 L0 范数的一个凸包—— L1 范数来近似的代替它[^1]。\n\n特征稀疏的好处有以下两点：\n\n- 便于特征选择。现实世界中，问题的特征的数量往往是很大的，而起决定性作用的往往是一小部分，所以我们在建立简单模型的时候，会先考虑舍弃权重快速收敛于 0 的特征。\n- 更具可解释性。例如对于癌症预测问题，可能有上千个特征，如果主要特征只有 10 个，就可以解释为癌症的发生几乎更和这 10 个特征息息相关，其它的暂不考虑影响也不大。\n\n## L2 范数\n\n考虑到 L1 范数在顶点处是不可微的，人们又引入了 L2 范数。\n\n关于 L2 范数如何提升模型泛化能力就不赘述了，在此讲一下它对优化计算所作出的贡献。\n\n优化问题有两个难题，一：局部最小值，二：病态（ill-condition）问题。\n第一个问题很容易理解，那么第二个问题提到的病态又是什么呢？\n简单来说，假设有一个方程 $AX = b$ ，如果 $A$ 和 $b$ 稍微发生改变就会引起 $X$ 的巨大变化的话，我们就称这个方程组系统是病态（ill-condition）的。反之就是良态（well-condition）的。\n\n举个例子，在人脸识别中，如果一个人粘了个假睫毛就不认识了，那就说明她的脸是“病态的”（笑）。\n\n定义：方阵 $A$ 是非奇异的，那么 $A$ 的条件数（condition number）定义为\n$$\n\\kappa(A) = \\lVert A \\rVert \\lVert A^{-1} \\rVert\n$$\n经过简单的证明（请参考本系列的附录 A），我们可以得到以下的结论\n$$\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\cdot \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert} \\\\\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x + \\Delta x \\rVert} \\le \\kappa(A) \\cdot \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert}\n$$\n因此可以认为，condition number 描述的是一个矩阵（或它形成的线性系统）的稳定性（或敏感度）的度量。\n如果一个矩阵的 condition number 在 1 附近，那么它是 well-condition 的；反之，它是 ill-condition 的。\n\n考虑线性回归的解析解\n$$\nw^{\\ast} = (X^{\\mathsf{T}}X)^{-1}X^{\\mathsf{T}}y\n$$\n如果样本的数目比样本的维度还要小的时候，矩阵 $ X^{\\mathsf{T}}X $ 将会不是满秩的，也就不可逆。\n但如果加上 L2 范数规则项，解就变成\n$$\nw^{\\ast} = (X^{\\mathsf{T}}X + \\lambda I)^{-1}X^{\\mathsf{T}}y\n$$\n此时，就可以直接求逆了。\n\n另外，通常我们并不适用解析解求解，而是使用牛顿迭代法求解。\n此时，加入规则项的两一个好处就是它可以将目标函数变为 $ \\lambda $ 强凸（$\\lambda$ -strongly convex）的。\n\n定义：当 $f$ 满足\n$$\nf(y) \\ge f(x) + \\langle \\nabla f(x), y-x \\rangle + \\frac{\\lambda}{2} \\lVert y-x \\rVert ^{2}\n$$\n时，我们称 $f$ 为 $ \\lambda $ 强凸（$\\lambda$ -strongly convex）的。\n\n对比一阶泰勒展开\n$$\nf(y) \\ge f(x) + \\langle \\nabla f(x), y-x \\rangle + o (\\lVert y-x \\rVert)\n$$\n我们可以发现，这种强凸性质不仅仅要求函数在某条切线的上方，而且还要求函数整体在某个二次函数图像上方，即已经具备一定的“向上弯曲度”。\n所以这种函数的下降速度非常快，而且很稳定。\n\n[^1]: [Ramirez, C. & V. Kreinovich & M. Argaez. Why l1 is a good approximation to l0: A geometric explanation [J]. *Engineering*, 2013, 7 (3): 203-207](https://www.researchgate.net/publication/290729378_Why_l1_is_a_good_approximation_to_l0_A_geometric_explanation)\n\n","slug":"norm-regularization-01","published":1,"updated":"2021-07-19T13:03:31.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivf000eqxt6fxi9az8z","content":"<h1 id=\"我们需要范数规则化的原因\"><a href=\"#我们需要范数规则化的原因\" class=\"headerlink\" title=\"我们需要范数规则化的原因\"></a>我们需要范数规则化的原因</h1><p>监督机器学习用一句话总结就是：Minimize your error while regularizing your parameters。<br>其中“minimize error”是目的，一般采用最小化损失函数的做法来达到。<br>而“regularizing parameters”就是一种保障，它可以防止模型发生过拟合，让模型的参数规模尽量向着“简单”的方向进化。（根据奥卡姆剃刀原理 Occam’s Razor，简单的模型虽然不尽准确，却也有更好的泛化能力。）</p>\n<p>所以监督机器学习一般可以用一个公式来代表：</p>\n<script type=\"math/tex; mode=display\">\nw^{\\ast} = \\mathop{\\arg\\min}_{w} \\sum_{i} L(y_{i}, f(x_{i};w)) + \\lambda\\Omega(w)</script><p>对于第一项的损失函数，我们不在本文中做过多讨论，大概说一下：</p>\n<ul>\n<li>Square loss —— 最小二乘</li>\n<li>Hinge loss —— SVM</li>\n<li>Exp loss —— Boosting</li>\n<li>Log loss —— Logistic regression</li>\n</ul>\n<p>等等。<br>总之，不同的 loss 函数有不同的拟合特性。</p>\n<p>下面我们重点说一说规则项 $ \\Omega(w) $ 。</p>\n<h1 id=\"关于规则项\"><a href=\"#关于规则项\" class=\"headerlink\" title=\"关于规则项\"></a>关于规则项</h1><p>大多时候规则项都是用来限制参数的复杂程度的。所以一般用参数 $w$ 的某些性质来约束，常见的就是几种范数：L0 范数、L1 范数、L2 范数、迹范数、Frobenius 范数和核范数。</p>\n<p>本篇，着重说 L0 范数、L1 范数 和 L2 范数。</p>\n<p>（稍微声明一下：一些大家都知道的知识我就不在此赘述了。）</p>\n<h2 id=\"L0-范数和-L1-范数\"><a href=\"#L0-范数和-L1-范数\" class=\"headerlink\" title=\"L0 范数和 L1 范数\"></a>L0 范数和 L1 范数</h2><p>这两个范数都是保证参数稀疏性的所以放在一起说。</p>\n<p>L0 范数是向量中非 0 元素的个数，这个想必大家都知道了。<br>用它来限制稀疏性本身很好，可惜它不是凸的，求解它将成为一个 NP-hard 问题。<br>所以我们用能够完全包络 L0 范数的一个凸包—— L1 范数来近似的代替它<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。</p>\n<p>特征稀疏的好处有以下两点：</p>\n<ul>\n<li>便于特征选择。现实世界中，问题的特征的数量往往是很大的，而起决定性作用的往往是一小部分，所以我们在建立简单模型的时候，会先考虑舍弃权重快速收敛于 0 的特征。</li>\n<li>更具可解释性。例如对于癌症预测问题，可能有上千个特征，如果主要特征只有 10 个，就可以解释为癌症的发生几乎更和这 10 个特征息息相关，其它的暂不考虑影响也不大。</li>\n</ul>\n<h2 id=\"L2-范数\"><a href=\"#L2-范数\" class=\"headerlink\" title=\"L2 范数\"></a>L2 范数</h2><p>考虑到 L1 范数在顶点处是不可微的，人们又引入了 L2 范数。</p>\n<p>关于 L2 范数如何提升模型泛化能力就不赘述了，在此讲一下它对优化计算所作出的贡献。</p>\n<p>优化问题有两个难题，一：局部最小值，二：病态（ill-condition）问题。<br>第一个问题很容易理解，那么第二个问题提到的病态又是什么呢？<br>简单来说，假设有一个方程 $AX = b$ ，如果 $A$ 和 $b$ 稍微发生改变就会引起 $X$ 的巨大变化的话，我们就称这个方程组系统是病态（ill-condition）的。反之就是良态（well-condition）的。</p>\n<p>举个例子，在人脸识别中，如果一个人粘了个假睫毛就不认识了，那就说明她的脸是“病态的”（笑）。</p>\n<p>定义：方阵 $A$ 是非奇异的，那么 $A$ 的条件数（condition number）定义为</p>\n<script type=\"math/tex; mode=display\">\n\\kappa(A) = \\lVert A \\rVert \\lVert A^{-1} \\rVert</script><p>经过简单的证明（请参考本系列的附录 A），我们可以得到以下的结论</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\cdot \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert} \\\\\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x + \\Delta x \\rVert} \\le \\kappa(A) \\cdot \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert}</script><p>因此可以认为，condition number 描述的是一个矩阵（或它形成的线性系统）的稳定性（或敏感度）的度量。<br>如果一个矩阵的 condition number 在 1 附近，那么它是 well-condition 的；反之，它是 ill-condition 的。</p>\n<p>考虑线性回归的解析解</p>\n<script type=\"math/tex; mode=display\">\nw^{\\ast} = (X^{\\mathsf{T}}X)^{-1}X^{\\mathsf{T}}y</script><p>如果样本的数目比样本的维度还要小的时候，矩阵 $ X^{\\mathsf{T}}X $ 将会不是满秩的，也就不可逆。<br>但如果加上 L2 范数规则项，解就变成</p>\n<script type=\"math/tex; mode=display\">\nw^{\\ast} = (X^{\\mathsf{T}}X + \\lambda I)^{-1}X^{\\mathsf{T}}y</script><p>此时，就可以直接求逆了。</p>\n<p>另外，通常我们并不适用解析解求解，而是使用牛顿迭代法求解。<br>此时，加入规则项的两一个好处就是它可以将目标函数变为 $ \\lambda $ 强凸（$\\lambda$ -strongly convex）的。</p>\n<p>定义：当 $f$ 满足</p>\n<script type=\"math/tex; mode=display\">\nf(y) \\ge f(x) + \\langle \\nabla f(x), y-x \\rangle + \\frac{\\lambda}{2} \\lVert y-x \\rVert ^{2}</script><p>时，我们称 $f$ 为 $ \\lambda $ 强凸（$\\lambda$ -strongly convex）的。</p>\n<p>对比一阶泰勒展开</p>\n<script type=\"math/tex; mode=display\">\nf(y) \\ge f(x) + \\langle \\nabla f(x), y-x \\rangle + o (\\lVert y-x \\rVert)</script><p>我们可以发现，这种强凸性质不仅仅要求函数在某条切线的上方，而且还要求函数整体在某个二次函数图像上方，即已经具备一定的“向上弯曲度”。<br>所以这种函数的下降速度非常快，而且很稳定。</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><a href=\"https://www.researchgate.net/publication/290729378_Why_l1_is_a_good_approximation_to_l0_A_geometric_explanation\" target=\"_blank\" rel=\"noopener\">Ramirez, C. &amp; V. Kreinovich &amp; M. Argaez. Why l1 is a good approximation to l0: A geometric explanation [J]. <em>Engineering</em>, 2013, 7 (3): 203-207</a></span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我们需要范数规则化的原因\"><a href=\"#我们需要范数规则化的原因\" class=\"headerlink\" title=\"我们需要范数规则化的原因\"></a>我们需要范数规则化的原因</h1><p>监督机器学习用一句话总结就是：Minimize your error while regularizing your parameters。<br>其中“minimize error”是目的，一般采用最小化损失函数的做法来达到。<br>而“regularizing parameters”就是一种保障，它可以防止模型发生过拟合，让模型的参数规模尽量向着“简单”的方向进化。（根据奥卡姆剃刀原理 Occam’s Razor，简单的模型虽然不尽准确，却也有更好的泛化能力。）</p>\n<p>所以监督机器学习一般可以用一个公式来代表：</p>\n<script type=\"math/tex; mode=display\">\nw^{\\ast} = \\mathop{\\arg\\min}_{w} \\sum_{i} L(y_{i}, f(x_{i};w)) + \\lambda\\Omega(w)</script><p>对于第一项的损失函数，我们不在本文中做过多讨论，大概说一下：</p>\n<ul>\n<li>Square loss —— 最小二乘</li>\n<li>Hinge loss —— SVM</li>\n<li>Exp loss —— Boosting</li>\n<li>Log loss —— Logistic regression</li>\n</ul>\n<p>等等。<br>总之，不同的 loss 函数有不同的拟合特性。</p>\n<p>下面我们重点说一说规则项 $ \\Omega(w) $ 。</p>\n<h1 id=\"关于规则项\"><a href=\"#关于规则项\" class=\"headerlink\" title=\"关于规则项\"></a>关于规则项</h1><p>大多时候规则项都是用来限制参数的复杂程度的。所以一般用参数 $w$ 的某些性质来约束，常见的就是几种范数：L0 范数、L1 范数、L2 范数、迹范数、Frobenius 范数和核范数。</p>\n<p>本篇，着重说 L0 范数、L1 范数 和 L2 范数。</p>\n<p>（稍微声明一下：一些大家都知道的知识我就不在此赘述了。）</p>\n<h2 id=\"L0-范数和-L1-范数\"><a href=\"#L0-范数和-L1-范数\" class=\"headerlink\" title=\"L0 范数和 L1 范数\"></a>L0 范数和 L1 范数</h2><p>这两个范数都是保证参数稀疏性的所以放在一起说。</p>\n<p>L0 范数是向量中非 0 元素的个数，这个想必大家都知道了。<br>用它来限制稀疏性本身很好，可惜它不是凸的，求解它将成为一个 NP-hard 问题。<br>所以我们用能够完全包络 L0 范数的一个凸包—— L1 范数来近似的代替它<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>。</p>\n<p>特征稀疏的好处有以下两点：</p>\n<ul>\n<li>便于特征选择。现实世界中，问题的特征的数量往往是很大的，而起决定性作用的往往是一小部分，所以我们在建立简单模型的时候，会先考虑舍弃权重快速收敛于 0 的特征。</li>\n<li>更具可解释性。例如对于癌症预测问题，可能有上千个特征，如果主要特征只有 10 个，就可以解释为癌症的发生几乎更和这 10 个特征息息相关，其它的暂不考虑影响也不大。</li>\n</ul>\n<h2 id=\"L2-范数\"><a href=\"#L2-范数\" class=\"headerlink\" title=\"L2 范数\"></a>L2 范数</h2><p>考虑到 L1 范数在顶点处是不可微的，人们又引入了 L2 范数。</p>\n<p>关于 L2 范数如何提升模型泛化能力就不赘述了，在此讲一下它对优化计算所作出的贡献。</p>\n<p>优化问题有两个难题，一：局部最小值，二：病态（ill-condition）问题。<br>第一个问题很容易理解，那么第二个问题提到的病态又是什么呢？<br>简单来说，假设有一个方程 $AX = b$ ，如果 $A$ 和 $b$ 稍微发生改变就会引起 $X$ 的巨大变化的话，我们就称这个方程组系统是病态（ill-condition）的。反之就是良态（well-condition）的。</p>\n<p>举个例子，在人脸识别中，如果一个人粘了个假睫毛就不认识了，那就说明她的脸是“病态的”（笑）。</p>\n<p>定义：方阵 $A$ 是非奇异的，那么 $A$ 的条件数（condition number）定义为</p>\n<script type=\"math/tex; mode=display\">\n\\kappa(A) = \\lVert A \\rVert \\lVert A^{-1} \\rVert</script><p>经过简单的证明（请参考本系列的附录 A），我们可以得到以下的结论</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\cdot \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert} \\\\\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x + \\Delta x \\rVert} \\le \\kappa(A) \\cdot \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert}</script><p>因此可以认为，condition number 描述的是一个矩阵（或它形成的线性系统）的稳定性（或敏感度）的度量。<br>如果一个矩阵的 condition number 在 1 附近，那么它是 well-condition 的；反之，它是 ill-condition 的。</p>\n<p>考虑线性回归的解析解</p>\n<script type=\"math/tex; mode=display\">\nw^{\\ast} = (X^{\\mathsf{T}}X)^{-1}X^{\\mathsf{T}}y</script><p>如果样本的数目比样本的维度还要小的时候，矩阵 $ X^{\\mathsf{T}}X $ 将会不是满秩的，也就不可逆。<br>但如果加上 L2 范数规则项，解就变成</p>\n<script type=\"math/tex; mode=display\">\nw^{\\ast} = (X^{\\mathsf{T}}X + \\lambda I)^{-1}X^{\\mathsf{T}}y</script><p>此时，就可以直接求逆了。</p>\n<p>另外，通常我们并不适用解析解求解，而是使用牛顿迭代法求解。<br>此时，加入规则项的两一个好处就是它可以将目标函数变为 $ \\lambda $ 强凸（$\\lambda$ -strongly convex）的。</p>\n<p>定义：当 $f$ 满足</p>\n<script type=\"math/tex; mode=display\">\nf(y) \\ge f(x) + \\langle \\nabla f(x), y-x \\rangle + \\frac{\\lambda}{2} \\lVert y-x \\rVert ^{2}</script><p>时，我们称 $f$ 为 $ \\lambda $ 强凸（$\\lambda$ -strongly convex）的。</p>\n<p>对比一阶泰勒展开</p>\n<script type=\"math/tex; mode=display\">\nf(y) \\ge f(x) + \\langle \\nabla f(x), y-x \\rangle + o (\\lVert y-x \\rVert)</script><p>我们可以发现，这种强凸性质不仅仅要求函数在某条切线的上方，而且还要求函数整体在某个二次函数图像上方，即已经具备一定的“向上弯曲度”。<br>所以这种函数的下降速度非常快，而且很稳定。</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol style=\"list-style:none; padding-left: 0;\"><li id=\"fn:1\"><span style=\"display: inline-block; vertical-align: top; padding-right: 10px;\">1.</span><span style=\"display: inline-block; vertical-align: top;\"><a href=\"https://www.researchgate.net/publication/290729378_Why_l1_is_a_good_approximation_to_l0_A_geometric_explanation\" target=\"_blank\" rel=\"noopener\">Ramirez, C. &amp; V. Kreinovich &amp; M. Argaez. Why l1 is a good approximation to l0: A geometric explanation [J]. <em>Engineering</em>, 2013, 7 (3): 203-207</a></span><a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"一个简单的垃圾回收代码","date":"2021-07-20T13:37:01.000Z","description":"一个简单的垃圾回收代码，揭示了垃圾回收的基本原理。","_content":"\n# 再利用\n\n垃圾回收（Garbage Collection，GC）的基本思想是，编程语言通过底层的操作让你感觉内存是无穷无尽的。但我们都知道内存是有限的，所以要达到这一点就需要将不再被使用的内存（至少看起来是这样）回收成未分配状态。在此之中，最重要的就是**安全地**辨认所谓的“不再被使用”，因为如果你的程序能有机会访问到被抹除为随机值的内存块，那将是很危险的事情。\n\n为了识别能否回收，最简单的思路就是判断一个内存块是否还被至少一个引用指向它。基于此观点，“仍被使用”就可以简单地被认为是：\n\n1. 正在被某变量引用的对象是“仍被使用”的。\n2. 被其它对象引用的对象是“仍被使用”的。\n\n当然，第二条意味着它是一个递归，即，如果某变量指向对象 A ，且对象 A 引用了对象 B，那么 B 也是“被使用的”，因为 B 可以从 A 那里被找到。\n\n# 标记-清除（Marking and Sweeping）\n\n垃圾回收有很多算法，其中最简单的就是标记-清除算法，该算法由 John McCarthy 发明（此人也发明了 Lisp ）。它的细节是这样的：\n\n1. 从根节点开始，遍历整个对象依赖图。对每一个能到达的对象，设定一个标记 bit 为 true。\n2. 遍历后，删除所有未被标记的对象。\n\n可能会有人说准确的垃圾回收需要更复杂的算法，比如至少要分代回收等，不过作为一个示例我想仅仅从最简单的情况开始。\n\n# 对象对儿\n\n我不想为这个垃圾回收示例写一个复杂的虚拟机（Virtual Machine，VM），所以我们采用一个不碰触语法解析、字节码等这些麻烦事情的方法，定义一个仅含两种类型对象的枚举：\n\n```c\ntypedef enum {\n  OBJ_INT,\n  OBJ_PAIR\n} ObjectType;\n```\n\n其中，这个 OBJ_PAIR 可以包含一对儿任意类型，两个 INT ，一个 INT 一个 PAIR ，或者两个 PAIR 都可以。\n\n细心的朋友们（或接触过函数式编程朋友们）可以发现， PAIR 类型其实是一个可以被定制成很多东西的类型，比如 LIST 类型。事实上，一个 LIST 就可以看做是一个递归 PAIR：\n\n```\nLIST = (LIST 首项, LIST 剩余项)\nLIST 剩余项 = (LIST 剩余项首项, LIST 剩余项的剩余项)\n```\n\n等等。所以能够处理 PAIR 类型其实就意味着你有能力处理很多其它类型。\n\n根据这两种类型，我们定义一个结构体，让两种类型共享一个值，从而达到模拟 VM 中一个变量只能对类型进行二选一的特性。\n\n```c\ntypedef struct sObject {\n  ObjectType type;\n\n  union {\n    /* OBJ_INT */\n    int value;\n\n    /* OBJ_PAIR */\n    struct {\n      struct sObject* head;\n      struct sObject* tail;\n    };\n  };\n} Object;\n```\n\n# 一个小型 VM\n\n有了定义对象的方法，我们就可以做一个小型 VM 了，这个 VM 只包含一个有限长的对象栈。\n\n```c\n#define STACK_MAX 256\n\ntypedef struct {\n  Object* stack[STACK_MAX];\n  int stackSize;\n} VM;\n```\n\n紧接着，我们需要定义 new 函数、push 和 pop 函数，这些都是基本操作。\n\n```c\nVM* newVM() {\n  VM* vm = malloc(sizeof(VM));\n  vm->stackSize = 0;\n  return vm;\n}\n\nvoid push(VM* vm, Object* value) {\n  assert(vm->stackSize < STACK_MAX, \"Stack overflow!\");\n  vm->stack[vm->stackSize++] = value;\n}\n\nObject* pop(VM* vm) {\n  assert(vm->stackSize > 0, \"Stack underflow!\");\n  return vm->stack[--vm->stackSize];\n}\n```\n\n定义如何在 VM 里分配空间给一个对象（“变量”）。\n\n```c\nObject* newObject(VM* vm, ObjectType type) {\n  Object* object = malloc(sizeof(Object));\n  object->type = type;\n  return object;\n}\n```\n\n注意到 PAIR 类型是一种复合对象，所以我们采用比较栈风格的方法来创造 PAIR 对象，即 PAIR 对象是由弹出栈顶两个对象再怼进来一个新 PAIR 对象做的。\n\n```c\nvoid pushInt(VM* vm, int intValue) {\n  Object* object = newObject(vm, OBJ_INT);\n  object->value = intValue;\n  push(vm, object);\n}\n\nObject* pushPair(VM* vm) {\n  Object* object = newObject(vm, OBJ_PAIR);\n  object->tail = pop(vm);\n  object->head = pop(vm);\n\n  push(vm, object);\n  return object;\n}\n```\n\n到此为止，VM 就大功告成了。\n\n# 标记\n\n为了标记，我们需要在对象中放置一个标志位。\n\n```c\ntypedef struct sObject {\n  unsigned char marked;\n  /* Previous stuff... */\n} Object;\n```\n\n而刚刚所说的标记-清理的第一步，就是遍历 VM 中栈的所有对象并进行标记。注意，PAIR 是个复合对象，如果一个 PAIR 对象被标记了，其引用的对象也应该被标记。\n\n```c\nvoid mark(Object* object) {\n  object->marked = 1;\n\n  if (object->type == OBJ_PAIR) {\n    mark(object->head);\n    mark(object->tail);\n  }\n}\n\nvoid markAll(VM* vm)\n{\n  for (int i = 0; i < vm->stackSize; i++) {\n    mark(vm->stack[i]);\n  }\n}\n```\n\n但是这个代码有个问题，如果对象的引用图上有圈，那么就会造成死循环，所以我们改一下 mark 函数为：\n\n```c\nvoid mark(Object* object) {\n  /* If already marked, we're done. Check this first\n     to avoid recursing on cycles in the object graph. */\n  if (object->marked) return;\n\n  object->marked = 1;\n\n  if (object->type == OBJ_PAIR) {\n    mark(object->head);\n    mark(object->tail);\n  }\n}\n```\n\n# 清理\n\n标记-清理的第二步就是清理，这里一上来就有一个问题，即按照定义，未标记的对象应该是不可达的，那既然是不可达的我们也没法知道它在哪儿，从而无法回收它。\n\n所以在这里我们就需要 C 语言里最强也是最恶心的东西了——指针。\n\n我们用一个小技巧就是在每一个对象中记录下一个被分配的对象的指针，同时在 VM 里记住第一个被分配的对象是谁：\n\n```c\ntypedef struct sObject {\n  /* The next object in the list of all objects. */\n  struct sObject* next;\n\n  /* Previous stuff... */\n} Object;\n\ntypedef struct {\n  /* The first object in the list of all objects. */\n  Object* firstObject;\n\n  /* Previous stuff... */\n} VM;\n```\n\n同时我们稍稍修改 VM 的 new 函数，初始化时让 firstObject 指向 NULL。\n\n```c\nObject* newObject(VM* vm, ObjectType type) {\n  Object* object = malloc(sizeof(Object));\n  object->type = type;\n  object->marked = 0;\n\n  /* Insert it into the list of allocated objects. */\n  object->next = vm->firstObject;\n  vm->firstObject = object;\n\n  return object;\n}\n```\n\n这样做我们就可以用指针记住要被删除的对象，还记得 Linux 内核里链表结构中指针的指针这一技巧吗？\n\n```c\nvoid sweep(VM* vm)\n{\n  Object** object = &vm->firstObject;\n  while (*object) {\n    if (!(*object)->marked) {\n      /* This object wasn't reached, so remove it from the list\n         and free it. */\n      Object* unreached = *object;\n\n      *object = unreached->next;\n      free(unreached);\n    } else {\n      /* This object was reached, so unmark it (for the next GC)\n         and move on to the next. */\n      (*object)->marked = 0;\n      object = &(*object)->next;\n    }\n  }\n}\n```\n\n现在我们可以完成垃圾回收了，先标记再清除即可：\n\n```c\nvoid gc(VM* vm) {\n  markAll(vm);\n  sweep(vm);\n}\n```\n\n# 更多的问题\n\n怎么判断 VM 低内存呢？如果计算垃圾回收的时点？\n\n这些问题没有特别固定的解决办法，在我的例子里，添加一个对对象的计数并给定一个垃圾回收底线即可：\n\n```c\ntypedef struct {\n  /* The total number of currently allocated objects. */\n  int numObjects;\n\n  /* The number of objects required to trigger a GC. */\n  int maxObjects;\n\n  /* Previous stuff... */\n} VM;\n\n--------------------\n\nVM* newVM() {\n  /* Previous stuff... */\n\n  vm->numObjects = 0;\n  vm->maxObjects = INITIAL_GC_THRESHOLD;\n  return vm;\n}\n\n--------------------\n\nObject* newObject(VM* vm, ObjectType type) {\n  if (vm->numObjects == vm->maxObjects) gc(vm);\n\n  /* Create object... */\n\n  vm->numObjects++;\n  return object;\n}\n\n--------------------\n\nvoid gc(VM* vm) {\n  int numObjects = vm->numObjects;\n\n  markAll(vm);\n  sweep(vm);\n\n  vm->maxObjects = vm->numObjects * 2;\n}\n```\n\n简单地说，我用一个不断扩大成 2 倍的数字来记录，比如：第一次有 8 个对象就垃圾回收；第二次的话，我就在判断“系统中很轻易的就能达到 8 个对象”的前提下，16 个对象再做回收。以此类推。\n\n# 最后\n\n这样就 OK 了，我们完成了一个简单的垃圾回收模块。它很简单，但是足以说明问题。\n\n全部的代码请参考我的 GitHub：[SakigamiYang/baby-gc](https://github.com/SakigamiYang/baby-gc)\n\n","source":"_posts/baby-gc.md","raw":"---\ntitle: 一个简单的垃圾回收代码\ndate: 2021-07-20 21:37:01\ncategories: Develop\ntags:\n- GC\ndescription: 一个简单的垃圾回收代码，揭示了垃圾回收的基本原理。\n---\n\n# 再利用\n\n垃圾回收（Garbage Collection，GC）的基本思想是，编程语言通过底层的操作让你感觉内存是无穷无尽的。但我们都知道内存是有限的，所以要达到这一点就需要将不再被使用的内存（至少看起来是这样）回收成未分配状态。在此之中，最重要的就是**安全地**辨认所谓的“不再被使用”，因为如果你的程序能有机会访问到被抹除为随机值的内存块，那将是很危险的事情。\n\n为了识别能否回收，最简单的思路就是判断一个内存块是否还被至少一个引用指向它。基于此观点，“仍被使用”就可以简单地被认为是：\n\n1. 正在被某变量引用的对象是“仍被使用”的。\n2. 被其它对象引用的对象是“仍被使用”的。\n\n当然，第二条意味着它是一个递归，即，如果某变量指向对象 A ，且对象 A 引用了对象 B，那么 B 也是“被使用的”，因为 B 可以从 A 那里被找到。\n\n# 标记-清除（Marking and Sweeping）\n\n垃圾回收有很多算法，其中最简单的就是标记-清除算法，该算法由 John McCarthy 发明（此人也发明了 Lisp ）。它的细节是这样的：\n\n1. 从根节点开始，遍历整个对象依赖图。对每一个能到达的对象，设定一个标记 bit 为 true。\n2. 遍历后，删除所有未被标记的对象。\n\n可能会有人说准确的垃圾回收需要更复杂的算法，比如至少要分代回收等，不过作为一个示例我想仅仅从最简单的情况开始。\n\n# 对象对儿\n\n我不想为这个垃圾回收示例写一个复杂的虚拟机（Virtual Machine，VM），所以我们采用一个不碰触语法解析、字节码等这些麻烦事情的方法，定义一个仅含两种类型对象的枚举：\n\n```c\ntypedef enum {\n  OBJ_INT,\n  OBJ_PAIR\n} ObjectType;\n```\n\n其中，这个 OBJ_PAIR 可以包含一对儿任意类型，两个 INT ，一个 INT 一个 PAIR ，或者两个 PAIR 都可以。\n\n细心的朋友们（或接触过函数式编程朋友们）可以发现， PAIR 类型其实是一个可以被定制成很多东西的类型，比如 LIST 类型。事实上，一个 LIST 就可以看做是一个递归 PAIR：\n\n```\nLIST = (LIST 首项, LIST 剩余项)\nLIST 剩余项 = (LIST 剩余项首项, LIST 剩余项的剩余项)\n```\n\n等等。所以能够处理 PAIR 类型其实就意味着你有能力处理很多其它类型。\n\n根据这两种类型，我们定义一个结构体，让两种类型共享一个值，从而达到模拟 VM 中一个变量只能对类型进行二选一的特性。\n\n```c\ntypedef struct sObject {\n  ObjectType type;\n\n  union {\n    /* OBJ_INT */\n    int value;\n\n    /* OBJ_PAIR */\n    struct {\n      struct sObject* head;\n      struct sObject* tail;\n    };\n  };\n} Object;\n```\n\n# 一个小型 VM\n\n有了定义对象的方法，我们就可以做一个小型 VM 了，这个 VM 只包含一个有限长的对象栈。\n\n```c\n#define STACK_MAX 256\n\ntypedef struct {\n  Object* stack[STACK_MAX];\n  int stackSize;\n} VM;\n```\n\n紧接着，我们需要定义 new 函数、push 和 pop 函数，这些都是基本操作。\n\n```c\nVM* newVM() {\n  VM* vm = malloc(sizeof(VM));\n  vm->stackSize = 0;\n  return vm;\n}\n\nvoid push(VM* vm, Object* value) {\n  assert(vm->stackSize < STACK_MAX, \"Stack overflow!\");\n  vm->stack[vm->stackSize++] = value;\n}\n\nObject* pop(VM* vm) {\n  assert(vm->stackSize > 0, \"Stack underflow!\");\n  return vm->stack[--vm->stackSize];\n}\n```\n\n定义如何在 VM 里分配空间给一个对象（“变量”）。\n\n```c\nObject* newObject(VM* vm, ObjectType type) {\n  Object* object = malloc(sizeof(Object));\n  object->type = type;\n  return object;\n}\n```\n\n注意到 PAIR 类型是一种复合对象，所以我们采用比较栈风格的方法来创造 PAIR 对象，即 PAIR 对象是由弹出栈顶两个对象再怼进来一个新 PAIR 对象做的。\n\n```c\nvoid pushInt(VM* vm, int intValue) {\n  Object* object = newObject(vm, OBJ_INT);\n  object->value = intValue;\n  push(vm, object);\n}\n\nObject* pushPair(VM* vm) {\n  Object* object = newObject(vm, OBJ_PAIR);\n  object->tail = pop(vm);\n  object->head = pop(vm);\n\n  push(vm, object);\n  return object;\n}\n```\n\n到此为止，VM 就大功告成了。\n\n# 标记\n\n为了标记，我们需要在对象中放置一个标志位。\n\n```c\ntypedef struct sObject {\n  unsigned char marked;\n  /* Previous stuff... */\n} Object;\n```\n\n而刚刚所说的标记-清理的第一步，就是遍历 VM 中栈的所有对象并进行标记。注意，PAIR 是个复合对象，如果一个 PAIR 对象被标记了，其引用的对象也应该被标记。\n\n```c\nvoid mark(Object* object) {\n  object->marked = 1;\n\n  if (object->type == OBJ_PAIR) {\n    mark(object->head);\n    mark(object->tail);\n  }\n}\n\nvoid markAll(VM* vm)\n{\n  for (int i = 0; i < vm->stackSize; i++) {\n    mark(vm->stack[i]);\n  }\n}\n```\n\n但是这个代码有个问题，如果对象的引用图上有圈，那么就会造成死循环，所以我们改一下 mark 函数为：\n\n```c\nvoid mark(Object* object) {\n  /* If already marked, we're done. Check this first\n     to avoid recursing on cycles in the object graph. */\n  if (object->marked) return;\n\n  object->marked = 1;\n\n  if (object->type == OBJ_PAIR) {\n    mark(object->head);\n    mark(object->tail);\n  }\n}\n```\n\n# 清理\n\n标记-清理的第二步就是清理，这里一上来就有一个问题，即按照定义，未标记的对象应该是不可达的，那既然是不可达的我们也没法知道它在哪儿，从而无法回收它。\n\n所以在这里我们就需要 C 语言里最强也是最恶心的东西了——指针。\n\n我们用一个小技巧就是在每一个对象中记录下一个被分配的对象的指针，同时在 VM 里记住第一个被分配的对象是谁：\n\n```c\ntypedef struct sObject {\n  /* The next object in the list of all objects. */\n  struct sObject* next;\n\n  /* Previous stuff... */\n} Object;\n\ntypedef struct {\n  /* The first object in the list of all objects. */\n  Object* firstObject;\n\n  /* Previous stuff... */\n} VM;\n```\n\n同时我们稍稍修改 VM 的 new 函数，初始化时让 firstObject 指向 NULL。\n\n```c\nObject* newObject(VM* vm, ObjectType type) {\n  Object* object = malloc(sizeof(Object));\n  object->type = type;\n  object->marked = 0;\n\n  /* Insert it into the list of allocated objects. */\n  object->next = vm->firstObject;\n  vm->firstObject = object;\n\n  return object;\n}\n```\n\n这样做我们就可以用指针记住要被删除的对象，还记得 Linux 内核里链表结构中指针的指针这一技巧吗？\n\n```c\nvoid sweep(VM* vm)\n{\n  Object** object = &vm->firstObject;\n  while (*object) {\n    if (!(*object)->marked) {\n      /* This object wasn't reached, so remove it from the list\n         and free it. */\n      Object* unreached = *object;\n\n      *object = unreached->next;\n      free(unreached);\n    } else {\n      /* This object was reached, so unmark it (for the next GC)\n         and move on to the next. */\n      (*object)->marked = 0;\n      object = &(*object)->next;\n    }\n  }\n}\n```\n\n现在我们可以完成垃圾回收了，先标记再清除即可：\n\n```c\nvoid gc(VM* vm) {\n  markAll(vm);\n  sweep(vm);\n}\n```\n\n# 更多的问题\n\n怎么判断 VM 低内存呢？如果计算垃圾回收的时点？\n\n这些问题没有特别固定的解决办法，在我的例子里，添加一个对对象的计数并给定一个垃圾回收底线即可：\n\n```c\ntypedef struct {\n  /* The total number of currently allocated objects. */\n  int numObjects;\n\n  /* The number of objects required to trigger a GC. */\n  int maxObjects;\n\n  /* Previous stuff... */\n} VM;\n\n--------------------\n\nVM* newVM() {\n  /* Previous stuff... */\n\n  vm->numObjects = 0;\n  vm->maxObjects = INITIAL_GC_THRESHOLD;\n  return vm;\n}\n\n--------------------\n\nObject* newObject(VM* vm, ObjectType type) {\n  if (vm->numObjects == vm->maxObjects) gc(vm);\n\n  /* Create object... */\n\n  vm->numObjects++;\n  return object;\n}\n\n--------------------\n\nvoid gc(VM* vm) {\n  int numObjects = vm->numObjects;\n\n  markAll(vm);\n  sweep(vm);\n\n  vm->maxObjects = vm->numObjects * 2;\n}\n```\n\n简单地说，我用一个不断扩大成 2 倍的数字来记录，比如：第一次有 8 个对象就垃圾回收；第二次的话，我就在判断“系统中很轻易的就能达到 8 个对象”的前提下，16 个对象再做回收。以此类推。\n\n# 最后\n\n这样就 OK 了，我们完成了一个简单的垃圾回收模块。它很简单，但是足以说明问题。\n\n全部的代码请参考我的 GitHub：[SakigamiYang/baby-gc](https://github.com/SakigamiYang/baby-gc)\n\n","slug":"baby-gc","published":1,"updated":"2021-07-20T14:29:13.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivf000fqxt6livwxo6n","content":"<h1 id=\"再利用\"><a href=\"#再利用\" class=\"headerlink\" title=\"再利用\"></a>再利用</h1><p>垃圾回收（Garbage Collection，GC）的基本思想是，编程语言通过底层的操作让你感觉内存是无穷无尽的。但我们都知道内存是有限的，所以要达到这一点就需要将不再被使用的内存（至少看起来是这样）回收成未分配状态。在此之中，最重要的就是<strong>安全地</strong>辨认所谓的“不再被使用”，因为如果你的程序能有机会访问到被抹除为随机值的内存块，那将是很危险的事情。</p>\n<p>为了识别能否回收，最简单的思路就是判断一个内存块是否还被至少一个引用指向它。基于此观点，“仍被使用”就可以简单地被认为是：</p>\n<ol>\n<li>正在被某变量引用的对象是“仍被使用”的。</li>\n<li>被其它对象引用的对象是“仍被使用”的。</li>\n</ol>\n<p>当然，第二条意味着它是一个递归，即，如果某变量指向对象 A ，且对象 A 引用了对象 B，那么 B 也是“被使用的”，因为 B 可以从 A 那里被找到。</p>\n<h1 id=\"标记-清除（Marking-and-Sweeping）\"><a href=\"#标记-清除（Marking-and-Sweeping）\" class=\"headerlink\" title=\"标记-清除（Marking and Sweeping）\"></a>标记-清除（Marking and Sweeping）</h1><p>垃圾回收有很多算法，其中最简单的就是标记-清除算法，该算法由 John McCarthy 发明（此人也发明了 Lisp ）。它的细节是这样的：</p>\n<ol>\n<li>从根节点开始，遍历整个对象依赖图。对每一个能到达的对象，设定一个标记 bit 为 true。</li>\n<li>遍历后，删除所有未被标记的对象。</li>\n</ol>\n<p>可能会有人说准确的垃圾回收需要更复杂的算法，比如至少要分代回收等，不过作为一个示例我想仅仅从最简单的情况开始。</p>\n<h1 id=\"对象对儿\"><a href=\"#对象对儿\" class=\"headerlink\" title=\"对象对儿\"></a>对象对儿</h1><p>我不想为这个垃圾回收示例写一个复杂的虚拟机（Virtual Machine，VM），所以我们采用一个不碰触语法解析、字节码等这些麻烦事情的方法，定义一个仅含两种类型对象的枚举：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> &#123;</span><br><span class=\"line\">  OBJ_INT,</span><br><span class=\"line\">  OBJ_PAIR</span><br><span class=\"line\">&#125; ObjectType;</span><br></pre></td></tr></table></figure>\n<p>其中，这个 OBJ_PAIR 可以包含一对儿任意类型，两个 INT ，一个 INT 一个 PAIR ，或者两个 PAIR 都可以。</p>\n<p>细心的朋友们（或接触过函数式编程朋友们）可以发现， PAIR 类型其实是一个可以被定制成很多东西的类型，比如 LIST 类型。事实上，一个 LIST 就可以看做是一个递归 PAIR：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LIST = (LIST 首项, LIST 剩余项)</span><br><span class=\"line\">LIST 剩余项 = (LIST 剩余项首项, LIST 剩余项的剩余项)</span><br></pre></td></tr></table></figure>\n<p>等等。所以能够处理 PAIR 类型其实就意味着你有能力处理很多其它类型。</p>\n<p>根据这两种类型，我们定义一个结构体，让两种类型共享一个值，从而达到模拟 VM 中一个变量只能对类型进行二选一的特性。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span> &#123;</span></span><br><span class=\"line\">  ObjectType type;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* OBJ_INT */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* OBJ_PAIR */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span>* <span class=\"title\">head</span>;</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span>* <span class=\"title\">tail</span>;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; Object;</span><br></pre></td></tr></table></figure>\n<h1 id=\"一个小型-VM\"><a href=\"#一个小型-VM\" class=\"headerlink\" title=\"一个小型 VM\"></a>一个小型 VM</h1><p>有了定义对象的方法，我们就可以做一个小型 VM 了，这个 VM 只包含一个有限长的对象栈。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_MAX 256</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  Object* <span class=\"built_in\">stack</span>[STACK_MAX];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> stackSize;</span><br><span class=\"line\">&#125; VM;</span><br></pre></td></tr></table></figure>\n<p>紧接着，我们需要定义 new 函数、push 和 pop 函数，这些都是基本操作。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">VM* <span class=\"title\">newVM</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  VM* vm = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(VM));</span><br><span class=\"line\">  vm-&gt;stackSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(VM* vm, Object* value)</span> </span>&#123;</span><br><span class=\"line\">  assert(vm-&gt;stackSize &lt; STACK_MAX, <span class=\"string\">\"Stack overflow!\"</span>);</span><br><span class=\"line\">  vm-&gt;<span class=\"built_in\">stack</span>[vm-&gt;stackSize++] = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">pop</span><span class=\"params\">(VM* vm)</span> </span>&#123;</span><br><span class=\"line\">  assert(vm-&gt;stackSize &gt; <span class=\"number\">0</span>, <span class=\"string\">\"Stack underflow!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm-&gt;<span class=\"built_in\">stack</span>[--vm-&gt;stackSize];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义如何在 VM 里分配空间给一个对象（“变量”）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">newObject</span><span class=\"params\">(VM* vm, ObjectType type)</span> </span>&#123;</span><br><span class=\"line\">  Object* object = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Object));</span><br><span class=\"line\">  object-&gt;type = type;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到 PAIR 类型是一种复合对象，所以我们采用比较栈风格的方法来创造 PAIR 对象，即 PAIR 对象是由弹出栈顶两个对象再怼进来一个新 PAIR 对象做的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushInt</span><span class=\"params\">(VM* vm, <span class=\"keyword\">int</span> intValue)</span> </span>&#123;</span><br><span class=\"line\">  Object* object = newObject(vm, OBJ_INT);</span><br><span class=\"line\">  object-&gt;value = intValue;</span><br><span class=\"line\">  push(vm, object);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">pushPair</span><span class=\"params\">(VM* vm)</span> </span>&#123;</span><br><span class=\"line\">  Object* object = newObject(vm, OBJ_PAIR);</span><br><span class=\"line\">  object-&gt;tail = pop(vm);</span><br><span class=\"line\">  object-&gt;head = pop(vm);</span><br><span class=\"line\"></span><br><span class=\"line\">  push(vm, object);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此为止，VM 就大功告成了。</p>\n<h1 id=\"标记\"><a href=\"#标记\" class=\"headerlink\" title=\"标记\"></a>标记</h1><p>为了标记，我们需要在对象中放置一个标志位。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> marked;</span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\">&#125; Object;</span><br></pre></td></tr></table></figure>\n<p>而刚刚所说的标记-清理的第一步，就是遍历 VM 中栈的所有对象并进行标记。注意，PAIR 是个复合对象，如果一个 PAIR 对象被标记了，其引用的对象也应该被标记。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mark</span><span class=\"params\">(Object* object)</span> </span>&#123;</span><br><span class=\"line\">  object-&gt;marked = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;type == OBJ_PAIR) &#123;</span><br><span class=\"line\">    mark(object-&gt;head);</span><br><span class=\"line\">    mark(object-&gt;tail);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">markAll</span><span class=\"params\">(VM* vm)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vm-&gt;stackSize; i++) &#123;</span><br><span class=\"line\">    mark(vm-&gt;<span class=\"built_in\">stack</span>[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这个代码有个问题，如果对象的引用图上有圈，那么就会造成死循环，所以我们改一下 mark 函数为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mark</span><span class=\"params\">(Object* object)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* If already marked, we're done. Check this first</span></span><br><span class=\"line\"><span class=\"comment\">     to avoid recursing on cycles in the object graph. */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;marked) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  object-&gt;marked = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;type == OBJ_PAIR) &#123;</span><br><span class=\"line\">    mark(object-&gt;head);</span><br><span class=\"line\">    mark(object-&gt;tail);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"清理\"><a href=\"#清理\" class=\"headerlink\" title=\"清理\"></a>清理</h1><p>标记-清理的第二步就是清理，这里一上来就有一个问题，即按照定义，未标记的对象应该是不可达的，那既然是不可达的我们也没法知道它在哪儿，从而无法回收它。</p>\n<p>所以在这里我们就需要 C 语言里最强也是最恶心的东西了——指针。</p>\n<p>我们用一个小技巧就是在每一个对象中记录下一个被分配的对象的指针，同时在 VM 里记住第一个被分配的对象是谁：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* The next object in the list of all objects. */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\">&#125; Object;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* The first object in the list of all objects. */</span></span><br><span class=\"line\">  Object* firstObject;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\">&#125; VM;</span><br></pre></td></tr></table></figure>\n<p>同时我们稍稍修改 VM 的 new 函数，初始化时让 firstObject 指向 NULL。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">newObject</span><span class=\"params\">(VM* vm, ObjectType type)</span> </span>&#123;</span><br><span class=\"line\">  Object* object = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Object));</span><br><span class=\"line\">  object-&gt;type = type;</span><br><span class=\"line\">  object-&gt;marked = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Insert it into the list of allocated objects. */</span></span><br><span class=\"line\">  object-&gt;next = vm-&gt;firstObject;</span><br><span class=\"line\">  vm-&gt;firstObject = object;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做我们就可以用指针记住要被删除的对象，还记得 Linux 内核里链表结构中指针的指针这一技巧吗？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sweep</span><span class=\"params\">(VM* vm)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Object** object = &amp;vm-&gt;firstObject;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (*object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(*object)-&gt;marked) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* This object wasn't reached, so remove it from the list</span></span><br><span class=\"line\"><span class=\"comment\">         and free it. */</span></span><br><span class=\"line\">      Object* unreached = *object;</span><br><span class=\"line\"></span><br><span class=\"line\">      *object = unreached-&gt;next;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(unreached);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* This object was reached, so unmark it (for the next GC)</span></span><br><span class=\"line\"><span class=\"comment\">         and move on to the next. */</span></span><br><span class=\"line\">      (*object)-&gt;marked = <span class=\"number\">0</span>;</span><br><span class=\"line\">      object = &amp;(*object)-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以完成垃圾回收了，先标记再清除即可：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">(VM* vm)</span> </span>&#123;</span><br><span class=\"line\">  markAll(vm);</span><br><span class=\"line\">  sweep(vm);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"更多的问题\"><a href=\"#更多的问题\" class=\"headerlink\" title=\"更多的问题\"></a>更多的问题</h1><p>怎么判断 VM 低内存呢？如果计算垃圾回收的时点？</p>\n<p>这些问题没有特别固定的解决办法，在我的例子里，添加一个对对象的计数并给定一个垃圾回收底线即可：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* The total number of currently allocated objects. */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> numObjects;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* The number of objects required to trigger a GC. */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> maxObjects;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\">&#125; VM;</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VM* <span class=\"title\">newVM</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vm-&gt;numObjects = <span class=\"number\">0</span>;</span><br><span class=\"line\">  vm-&gt;maxObjects = INITIAL_GC_THRESHOLD;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">newObject</span><span class=\"params\">(VM* vm, ObjectType type)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm-&gt;numObjects == vm-&gt;maxObjects) gc(vm);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Create object... */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vm-&gt;numObjects++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">(VM* vm)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> numObjects = vm-&gt;numObjects;</span><br><span class=\"line\"></span><br><span class=\"line\">  markAll(vm);</span><br><span class=\"line\">  sweep(vm);</span><br><span class=\"line\"></span><br><span class=\"line\">  vm-&gt;maxObjects = vm-&gt;numObjects * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单地说，我用一个不断扩大成 2 倍的数字来记录，比如：第一次有 8 个对象就垃圾回收；第二次的话，我就在判断“系统中很轻易的就能达到 8 个对象”的前提下，16 个对象再做回收。以此类推。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这样就 OK 了，我们完成了一个简单的垃圾回收模块。它很简单，但是足以说明问题。</p>\n<p>全部的代码请参考我的 GitHub：<a href=\"https://github.com/SakigamiYang/baby-gc\" target=\"_blank\" rel=\"noopener\">SakigamiYang/baby-gc</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"再利用\"><a href=\"#再利用\" class=\"headerlink\" title=\"再利用\"></a>再利用</h1><p>垃圾回收（Garbage Collection，GC）的基本思想是，编程语言通过底层的操作让你感觉内存是无穷无尽的。但我们都知道内存是有限的，所以要达到这一点就需要将不再被使用的内存（至少看起来是这样）回收成未分配状态。在此之中，最重要的就是<strong>安全地</strong>辨认所谓的“不再被使用”，因为如果你的程序能有机会访问到被抹除为随机值的内存块，那将是很危险的事情。</p>\n<p>为了识别能否回收，最简单的思路就是判断一个内存块是否还被至少一个引用指向它。基于此观点，“仍被使用”就可以简单地被认为是：</p>\n<ol>\n<li>正在被某变量引用的对象是“仍被使用”的。</li>\n<li>被其它对象引用的对象是“仍被使用”的。</li>\n</ol>\n<p>当然，第二条意味着它是一个递归，即，如果某变量指向对象 A ，且对象 A 引用了对象 B，那么 B 也是“被使用的”，因为 B 可以从 A 那里被找到。</p>\n<h1 id=\"标记-清除（Marking-and-Sweeping）\"><a href=\"#标记-清除（Marking-and-Sweeping）\" class=\"headerlink\" title=\"标记-清除（Marking and Sweeping）\"></a>标记-清除（Marking and Sweeping）</h1><p>垃圾回收有很多算法，其中最简单的就是标记-清除算法，该算法由 John McCarthy 发明（此人也发明了 Lisp ）。它的细节是这样的：</p>\n<ol>\n<li>从根节点开始，遍历整个对象依赖图。对每一个能到达的对象，设定一个标记 bit 为 true。</li>\n<li>遍历后，删除所有未被标记的对象。</li>\n</ol>\n<p>可能会有人说准确的垃圾回收需要更复杂的算法，比如至少要分代回收等，不过作为一个示例我想仅仅从最简单的情况开始。</p>\n<h1 id=\"对象对儿\"><a href=\"#对象对儿\" class=\"headerlink\" title=\"对象对儿\"></a>对象对儿</h1><p>我不想为这个垃圾回收示例写一个复杂的虚拟机（Virtual Machine，VM），所以我们采用一个不碰触语法解析、字节码等这些麻烦事情的方法，定义一个仅含两种类型对象的枚举：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> &#123;</span><br><span class=\"line\">  OBJ_INT,</span><br><span class=\"line\">  OBJ_PAIR</span><br><span class=\"line\">&#125; ObjectType;</span><br></pre></td></tr></table></figure>\n<p>其中，这个 OBJ_PAIR 可以包含一对儿任意类型，两个 INT ，一个 INT 一个 PAIR ，或者两个 PAIR 都可以。</p>\n<p>细心的朋友们（或接触过函数式编程朋友们）可以发现， PAIR 类型其实是一个可以被定制成很多东西的类型，比如 LIST 类型。事实上，一个 LIST 就可以看做是一个递归 PAIR：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LIST = (LIST 首项, LIST 剩余项)</span><br><span class=\"line\">LIST 剩余项 = (LIST 剩余项首项, LIST 剩余项的剩余项)</span><br></pre></td></tr></table></figure>\n<p>等等。所以能够处理 PAIR 类型其实就意味着你有能力处理很多其它类型。</p>\n<p>根据这两种类型，我们定义一个结构体，让两种类型共享一个值，从而达到模拟 VM 中一个变量只能对类型进行二选一的特性。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span> &#123;</span></span><br><span class=\"line\">  ObjectType type;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* OBJ_INT */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* OBJ_PAIR */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span>* <span class=\"title\">head</span>;</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span>* <span class=\"title\">tail</span>;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125; Object;</span><br></pre></td></tr></table></figure>\n<h1 id=\"一个小型-VM\"><a href=\"#一个小型-VM\" class=\"headerlink\" title=\"一个小型 VM\"></a>一个小型 VM</h1><p>有了定义对象的方法，我们就可以做一个小型 VM 了，这个 VM 只包含一个有限长的对象栈。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_MAX 256</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  Object* <span class=\"built_in\">stack</span>[STACK_MAX];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> stackSize;</span><br><span class=\"line\">&#125; VM;</span><br></pre></td></tr></table></figure>\n<p>紧接着，我们需要定义 new 函数、push 和 pop 函数，这些都是基本操作。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">VM* <span class=\"title\">newVM</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  VM* vm = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(VM));</span><br><span class=\"line\">  vm-&gt;stackSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(VM* vm, Object* value)</span> </span>&#123;</span><br><span class=\"line\">  assert(vm-&gt;stackSize &lt; STACK_MAX, <span class=\"string\">\"Stack overflow!\"</span>);</span><br><span class=\"line\">  vm-&gt;<span class=\"built_in\">stack</span>[vm-&gt;stackSize++] = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">pop</span><span class=\"params\">(VM* vm)</span> </span>&#123;</span><br><span class=\"line\">  assert(vm-&gt;stackSize &gt; <span class=\"number\">0</span>, <span class=\"string\">\"Stack underflow!\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm-&gt;<span class=\"built_in\">stack</span>[--vm-&gt;stackSize];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义如何在 VM 里分配空间给一个对象（“变量”）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">newObject</span><span class=\"params\">(VM* vm, ObjectType type)</span> </span>&#123;</span><br><span class=\"line\">  Object* object = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Object));</span><br><span class=\"line\">  object-&gt;type = type;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到 PAIR 类型是一种复合对象，所以我们采用比较栈风格的方法来创造 PAIR 对象，即 PAIR 对象是由弹出栈顶两个对象再怼进来一个新 PAIR 对象做的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushInt</span><span class=\"params\">(VM* vm, <span class=\"keyword\">int</span> intValue)</span> </span>&#123;</span><br><span class=\"line\">  Object* object = newObject(vm, OBJ_INT);</span><br><span class=\"line\">  object-&gt;value = intValue;</span><br><span class=\"line\">  push(vm, object);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">pushPair</span><span class=\"params\">(VM* vm)</span> </span>&#123;</span><br><span class=\"line\">  Object* object = newObject(vm, OBJ_PAIR);</span><br><span class=\"line\">  object-&gt;tail = pop(vm);</span><br><span class=\"line\">  object-&gt;head = pop(vm);</span><br><span class=\"line\"></span><br><span class=\"line\">  push(vm, object);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此为止，VM 就大功告成了。</p>\n<h1 id=\"标记\"><a href=\"#标记\" class=\"headerlink\" title=\"标记\"></a>标记</h1><p>为了标记，我们需要在对象中放置一个标志位。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> marked;</span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\">&#125; Object;</span><br></pre></td></tr></table></figure>\n<p>而刚刚所说的标记-清理的第一步，就是遍历 VM 中栈的所有对象并进行标记。注意，PAIR 是个复合对象，如果一个 PAIR 对象被标记了，其引用的对象也应该被标记。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mark</span><span class=\"params\">(Object* object)</span> </span>&#123;</span><br><span class=\"line\">  object-&gt;marked = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;type == OBJ_PAIR) &#123;</span><br><span class=\"line\">    mark(object-&gt;head);</span><br><span class=\"line\">    mark(object-&gt;tail);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">markAll</span><span class=\"params\">(VM* vm)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vm-&gt;stackSize; i++) &#123;</span><br><span class=\"line\">    mark(vm-&gt;<span class=\"built_in\">stack</span>[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这个代码有个问题，如果对象的引用图上有圈，那么就会造成死循环，所以我们改一下 mark 函数为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mark</span><span class=\"params\">(Object* object)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* If already marked, we're done. Check this first</span></span><br><span class=\"line\"><span class=\"comment\">     to avoid recursing on cycles in the object graph. */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;marked) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  object-&gt;marked = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object-&gt;type == OBJ_PAIR) &#123;</span><br><span class=\"line\">    mark(object-&gt;head);</span><br><span class=\"line\">    mark(object-&gt;tail);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"清理\"><a href=\"#清理\" class=\"headerlink\" title=\"清理\"></a>清理</h1><p>标记-清理的第二步就是清理，这里一上来就有一个问题，即按照定义，未标记的对象应该是不可达的，那既然是不可达的我们也没法知道它在哪儿，从而无法回收它。</p>\n<p>所以在这里我们就需要 C 语言里最强也是最恶心的东西了——指针。</p>\n<p>我们用一个小技巧就是在每一个对象中记录下一个被分配的对象的指针，同时在 VM 里记住第一个被分配的对象是谁：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* The next object in the list of all objects. */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sObject</span>* <span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\">&#125; Object;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* The first object in the list of all objects. */</span></span><br><span class=\"line\">  Object* firstObject;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\">&#125; VM;</span><br></pre></td></tr></table></figure>\n<p>同时我们稍稍修改 VM 的 new 函数，初始化时让 firstObject 指向 NULL。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">newObject</span><span class=\"params\">(VM* vm, ObjectType type)</span> </span>&#123;</span><br><span class=\"line\">  Object* object = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Object));</span><br><span class=\"line\">  object-&gt;type = type;</span><br><span class=\"line\">  object-&gt;marked = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Insert it into the list of allocated objects. */</span></span><br><span class=\"line\">  object-&gt;next = vm-&gt;firstObject;</span><br><span class=\"line\">  vm-&gt;firstObject = object;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做我们就可以用指针记住要被删除的对象，还记得 Linux 内核里链表结构中指针的指针这一技巧吗？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sweep</span><span class=\"params\">(VM* vm)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Object** object = &amp;vm-&gt;firstObject;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (*object) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(*object)-&gt;marked) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* This object wasn't reached, so remove it from the list</span></span><br><span class=\"line\"><span class=\"comment\">         and free it. */</span></span><br><span class=\"line\">      Object* unreached = *object;</span><br><span class=\"line\"></span><br><span class=\"line\">      *object = unreached-&gt;next;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(unreached);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* This object was reached, so unmark it (for the next GC)</span></span><br><span class=\"line\"><span class=\"comment\">         and move on to the next. */</span></span><br><span class=\"line\">      (*object)-&gt;marked = <span class=\"number\">0</span>;</span><br><span class=\"line\">      object = &amp;(*object)-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以完成垃圾回收了，先标记再清除即可：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">(VM* vm)</span> </span>&#123;</span><br><span class=\"line\">  markAll(vm);</span><br><span class=\"line\">  sweep(vm);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"更多的问题\"><a href=\"#更多的问题\" class=\"headerlink\" title=\"更多的问题\"></a>更多的问题</h1><p>怎么判断 VM 低内存呢？如果计算垃圾回收的时点？</p>\n<p>这些问题没有特别固定的解决办法，在我的例子里，添加一个对对象的计数并给定一个垃圾回收底线即可：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* The total number of currently allocated objects. */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> numObjects;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* The number of objects required to trigger a GC. */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> maxObjects;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\">&#125; VM;</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">VM* <span class=\"title\">newVM</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Previous stuff... */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vm-&gt;numObjects = <span class=\"number\">0</span>;</span><br><span class=\"line\">  vm-&gt;maxObjects = INITIAL_GC_THRESHOLD;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Object* <span class=\"title\">newObject</span><span class=\"params\">(VM* vm, ObjectType type)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm-&gt;numObjects == vm-&gt;maxObjects) gc(vm);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Create object... */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vm-&gt;numObjects++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--------------------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">(VM* vm)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> numObjects = vm-&gt;numObjects;</span><br><span class=\"line\"></span><br><span class=\"line\">  markAll(vm);</span><br><span class=\"line\">  sweep(vm);</span><br><span class=\"line\"></span><br><span class=\"line\">  vm-&gt;maxObjects = vm-&gt;numObjects * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单地说，我用一个不断扩大成 2 倍的数字来记录，比如：第一次有 8 个对象就垃圾回收；第二次的话，我就在判断“系统中很轻易的就能达到 8 个对象”的前提下，16 个对象再做回收。以此类推。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这样就 OK 了，我们完成了一个简单的垃圾回收模块。它很简单，但是足以说明问题。</p>\n<p>全部的代码请参考我的 GitHub：<a href=\"https://github.com/SakigamiYang/baby-gc\" target=\"_blank\" rel=\"noopener\">SakigamiYang/baby-gc</a></p>\n"},{"title":"浅说范数规范化（附录）","date":"2017-09-13T03:14:14.000Z","description":"【浅说范数规范化】系列的附录，包含一些数学相关证明和知识。","_content":"\n# 附录 A：矩阵条件数 $\\kappa({A})$\n\n在本系列第一篇里提到病态矩阵的时候，说到了矩阵条件数的一些性质，下面给一个简单的证明。\n\n事实上由于条件数是描述线性方程系统 $AX = b$ 的变化敏感度的一个量，所以我们给这个系统的每个量一个微扰，然后解出 $x$ 的变化程度：\n$$\n\\begin{aligned}\n& \\quad (A+\\Delta A)(x + \\Delta x) = b+\\Delta b \\\\\n& \\Rightarrow \\Delta x = A^{-1}[\\Delta b - (\\Delta A) x - (\\Delta A)(\\Delta x)] \\\\\n& \\Rightarrow \\lVert \\Delta x \\rVert \\le \\lVert A^{-1} \\rVert (\\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert + \\lVert \\Delta A\\rVert \\lVert \\Delta x\\rVert ) \\\\\n& \\Rightarrow (1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert) \\lVert \\Delta x \\rVert \\le \\lVert A^{-1} \\rVert (\\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert) \\\\\n& \\Rightarrow \\lVert \\Delta x \\rVert \\le \\frac{\\lVert A^{-1} \\rVert}{1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert} \\left( \\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert \\right) \\qquad (\\because \\, \\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert \\le 1) \\\\\n& \\Rightarrow \\frac {\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\frac{\\lVert A^{-1} \\rVert \\lVert A \\rVert}{1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert} \\left( \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert} + \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert} \\right) \\qquad (\\because \\, \\lVert b \\rVert \\le \\lVert A \\rVert \\lVert x \\rVert)\n\\end{aligned}\n$$\n当 $\\Delta A = 0$ 时，有：\n$$\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert}\n$$\n当 $\\Delta b = 0$ 时，有：\n$$\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert}(1+o(\\lVert A^{-1} \\rVert))\n$$\n一个常用的条件数是 2-条件数：\n$$\n\\kappa_{2}(A) = \\lVert A^{-1} \\rVert _{2} \\lVert A \\rVert _{2} = \\sqrt{\\frac{\\lambda _{max}}{\\lambda _{min}}}\n$$\n其中，$\\lambda_{max}$ 和 $\\lambda_{min}$ 分别是 $A^{\\mathsf{H}}A$ 的最大特征值和最小特征值。\n（从这个角度上来看，条件数也确实是衡量矩阵敏感度的一个值。）\n\n","source":"_posts/norm-regularization-appendix.md","raw":"---\ntitle: 浅说范数规范化（附录）\ndate: 2017-09-13 11:14:14\ncategories: ML\ntags:\n      - Norm regularization\n      - Matrix theory\ndescription: 【浅说范数规范化】系列的附录，包含一些数学相关证明和知识。\n---\n\n# 附录 A：矩阵条件数 $\\kappa({A})$\n\n在本系列第一篇里提到病态矩阵的时候，说到了矩阵条件数的一些性质，下面给一个简单的证明。\n\n事实上由于条件数是描述线性方程系统 $AX = b$ 的变化敏感度的一个量，所以我们给这个系统的每个量一个微扰，然后解出 $x$ 的变化程度：\n$$\n\\begin{aligned}\n& \\quad (A+\\Delta A)(x + \\Delta x) = b+\\Delta b \\\\\n& \\Rightarrow \\Delta x = A^{-1}[\\Delta b - (\\Delta A) x - (\\Delta A)(\\Delta x)] \\\\\n& \\Rightarrow \\lVert \\Delta x \\rVert \\le \\lVert A^{-1} \\rVert (\\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert + \\lVert \\Delta A\\rVert \\lVert \\Delta x\\rVert ) \\\\\n& \\Rightarrow (1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert) \\lVert \\Delta x \\rVert \\le \\lVert A^{-1} \\rVert (\\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert) \\\\\n& \\Rightarrow \\lVert \\Delta x \\rVert \\le \\frac{\\lVert A^{-1} \\rVert}{1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert} \\left( \\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert \\right) \\qquad (\\because \\, \\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert \\le 1) \\\\\n& \\Rightarrow \\frac {\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\frac{\\lVert A^{-1} \\rVert \\lVert A \\rVert}{1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert} \\left( \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert} + \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert} \\right) \\qquad (\\because \\, \\lVert b \\rVert \\le \\lVert A \\rVert \\lVert x \\rVert)\n\\end{aligned}\n$$\n当 $\\Delta A = 0$ 时，有：\n$$\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert}\n$$\n当 $\\Delta b = 0$ 时，有：\n$$\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert}(1+o(\\lVert A^{-1} \\rVert))\n$$\n一个常用的条件数是 2-条件数：\n$$\n\\kappa_{2}(A) = \\lVert A^{-1} \\rVert _{2} \\lVert A \\rVert _{2} = \\sqrt{\\frac{\\lambda _{max}}{\\lambda _{min}}}\n$$\n其中，$\\lambda_{max}$ 和 $\\lambda_{min}$ 分别是 $A^{\\mathsf{H}}A$ 的最大特征值和最小特征值。\n（从这个角度上来看，条件数也确实是衡量矩阵敏感度的一个值。）\n\n","slug":"norm-regularization-appendix","published":1,"updated":"2021-07-19T13:03:31.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivg000gqxt66mnw2k4u","content":"<h1 id=\"附录-A：矩阵条件数-kappa-A\"><a href=\"#附录-A：矩阵条件数-kappa-A\" class=\"headerlink\" title=\"附录 A：矩阵条件数 $\\kappa({A})$\"></a>附录 A：矩阵条件数 $\\kappa({A})$</h1><p>在本系列第一篇里提到病态矩阵的时候，说到了矩阵条件数的一些性质，下面给一个简单的证明。</p>\n<p>事实上由于条件数是描述线性方程系统 $AX = b$ 的变化敏感度的一个量，所以我们给这个系统的每个量一个微扰，然后解出 $x$ 的变化程度：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n& \\quad (A+\\Delta A)(x + \\Delta x) = b+\\Delta b \\\\\n& \\Rightarrow \\Delta x = A^{-1}[\\Delta b - (\\Delta A) x - (\\Delta A)(\\Delta x)] \\\\\n& \\Rightarrow \\lVert \\Delta x \\rVert \\le \\lVert A^{-1} \\rVert (\\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert + \\lVert \\Delta A\\rVert \\lVert \\Delta x\\rVert ) \\\\\n& \\Rightarrow (1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert) \\lVert \\Delta x \\rVert \\le \\lVert A^{-1} \\rVert (\\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert) \\\\\n& \\Rightarrow \\lVert \\Delta x \\rVert \\le \\frac{\\lVert A^{-1} \\rVert}{1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert} \\left( \\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert \\right) \\qquad (\\because \\, \\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert \\le 1) \\\\\n& \\Rightarrow \\frac {\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\frac{\\lVert A^{-1} \\rVert \\lVert A \\rVert}{1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert} \\left( \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert} + \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert} \\right) \\qquad (\\because \\, \\lVert b \\rVert \\le \\lVert A \\rVert \\lVert x \\rVert)\n\\end{aligned}</script><p>当 $\\Delta A = 0$ 时，有：</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert}</script><p>当 $\\Delta b = 0$ 时，有：</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert}(1+o(\\lVert A^{-1} \\rVert))</script><p>一个常用的条件数是 2-条件数：</p>\n<script type=\"math/tex; mode=display\">\n\\kappa_{2}(A) = \\lVert A^{-1} \\rVert _{2} \\lVert A \\rVert _{2} = \\sqrt{\\frac{\\lambda _{max}}{\\lambda _{min}}}</script><p>其中，$\\lambda_{max}$ 和 $\\lambda_{min}$ 分别是 $A^{\\mathsf{H}}A$ 的最大特征值和最小特征值。<br>（从这个角度上来看，条件数也确实是衡量矩阵敏感度的一个值。）</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"附录-A：矩阵条件数-kappa-A\"><a href=\"#附录-A：矩阵条件数-kappa-A\" class=\"headerlink\" title=\"附录 A：矩阵条件数 $\\kappa({A})$\"></a>附录 A：矩阵条件数 $\\kappa({A})$</h1><p>在本系列第一篇里提到病态矩阵的时候，说到了矩阵条件数的一些性质，下面给一个简单的证明。</p>\n<p>事实上由于条件数是描述线性方程系统 $AX = b$ 的变化敏感度的一个量，所以我们给这个系统的每个量一个微扰，然后解出 $x$ 的变化程度：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n& \\quad (A+\\Delta A)(x + \\Delta x) = b+\\Delta b \\\\\n& \\Rightarrow \\Delta x = A^{-1}[\\Delta b - (\\Delta A) x - (\\Delta A)(\\Delta x)] \\\\\n& \\Rightarrow \\lVert \\Delta x \\rVert \\le \\lVert A^{-1} \\rVert (\\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert + \\lVert \\Delta A\\rVert \\lVert \\Delta x\\rVert ) \\\\\n& \\Rightarrow (1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert) \\lVert \\Delta x \\rVert \\le \\lVert A^{-1} \\rVert (\\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert) \\\\\n& \\Rightarrow \\lVert \\Delta x \\rVert \\le \\frac{\\lVert A^{-1} \\rVert}{1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert} \\left( \\lVert \\Delta b \\rVert + \\lVert \\Delta A \\rVert \\lVert x \\rVert \\right) \\qquad (\\because \\, \\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert \\le 1) \\\\\n& \\Rightarrow \\frac {\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\frac{\\lVert A^{-1} \\rVert \\lVert A \\rVert}{1-\\lVert A^{-1} \\rVert \\lVert \\Delta A \\rVert} \\left( \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert} + \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert} \\right) \\qquad (\\because \\, \\lVert b \\rVert \\le \\lVert A \\rVert \\lVert x \\rVert)\n\\end{aligned}</script><p>当 $\\Delta A = 0$ 时，有：</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\frac{\\lVert \\Delta b \\rVert}{\\lVert b \\rVert}</script><p>当 $\\Delta b = 0$ 时，有：</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\lVert \\Delta x \\rVert}{\\lVert x \\rVert} \\le \\kappa(A) \\frac{\\lVert \\Delta A \\rVert}{\\lVert A \\rVert}(1+o(\\lVert A^{-1} \\rVert))</script><p>一个常用的条件数是 2-条件数：</p>\n<script type=\"math/tex; mode=display\">\n\\kappa_{2}(A) = \\lVert A^{-1} \\rVert _{2} \\lVert A \\rVert _{2} = \\sqrt{\\frac{\\lambda _{max}}{\\lambda _{min}}}</script><p>其中，$\\lambda_{max}$ 和 $\\lambda_{min}$ 分别是 $A^{\\mathsf{H}}A$ 的最大特征值和最小特征值。<br>（从这个角度上来看，条件数也确实是衡量矩阵敏感度的一个值。）</p>\n"},{"title":"说一说核方法（二）——数学角度简介（掉粉文）","date":"2017-08-13T09:42:38.000Z","description":"本文从数学角度介绍了再生核希尔伯特空间。","_content":"\n**泛函分析（functional analysis）**主要研究的是函数空间（function space），也就是说这个空间中所有的点（元素）都是函数。\n\n先介绍几个概念，我们暂时只讨论由线性空间发展出来的概念，因为线性空间有很多很好的性质。\n\n{% asset_img linear_space.png Linear space %}\n\n# 线性空间\n\n线性空间（linear space）是定义了数乘和加法的空间。所以我们可以找到一组基底（basis），然后通过这一组基底的线性组合来得到空间中的所有点。\n举个例子，二次函数空间，基底就可以定义为 $\\lbrace 1, x, x^{2} \\rbrace$ ，这个空间中任意的函数 $f(x)$ 都可以表示为 $f(x) = \\alpha_{1} \\cdot 1 + \\alpha_{2} \\cdot x + \\alpha_{3} \\cdot x^{2}$ ，所以我们可以说 $f(x)$ 在这组基底下的坐标是 $\\lbrace \\alpha_{1}, \\alpha_{2}, \\alpha_{3} \\rbrace$ 。（请自行想象三维空间中，三个维度的坐标不是 $\\lbrace x, y, z \\rbrace$ 。）\n当然基底也可以定义为 $\\lbrace 1, x+1, (x+1)^{2} \\rbrace$ ，但是计算上会增大难度。所以我们可以看出来基底只要是线性不相关的就行了。那么基底中有 $n$ 个元素的话，我们就叫这个空间是 $n$ 维的。\n一般来讲，选用的基底都是正交基（orthogonal basis），也就是基底中的任意两个元素的内积为 0。\n\n# 线性度量空间\n\n线性度量空间（metric linear space）是在线性空间中定义了**距离（metric）**的空间。\n距离的定义必须满足如下三个条件：\n\n1. 非负性： $d(x, y) \\ge 0; d(x, y) = 0 \\Leftrightarrow x = y$ 。\n2. 对称性： $d(x, y) = d(y, x)$ 。\n3. 三角不等式：$d(x, z) + d(z, y) \\ge d(x, y)$ 。\n\n# 线性赋范空间\n\n线性赋范空间（normed linear space）是定义了**范数（norm）**的线性度量空间。\n范数的定义必须满足：\n\n1. 非负性：$\\lVert x \\rVert \\ge 0$ 。\n2. 齐次性：$ \\lVert \\alpha x \\rVert = |\\alpha| \\lVert x \\rVert $ 。\n3. 三角不等式：$\\lVert x \\rVert + \\lVert y \\rVert \\ge \\lVert x+y \\rVert$ 。\n\n由范数可以导出距离（定义 $d(x, y) = \\lVert x - y \\rVert$ ），但是不可以由距离导出范数。\n\n# 巴拿赫空间\n\n巴拿赫空间（Banach space）是完备的赋范线性空间。\n完备性（completeness）：任一柯西序列（Cauchy sequence）都收敛（convergence）。\n\n# 内积线性空间\n\n内积线性空间（inner product linear space）是定义了**内积（inner product）**的赋范线性空间。\n其中内积也叫**标量积（scalar product）**或**点积（dot product）**。\n这里要注意，内积的定义跟范数其实没关系，不过内积可以导出范数，所以一般内积空间都有范数。\n内积的定义必须满足：\n\n1. 对称性：$\\langle x, y \\rangle = \\langle y, x \\rangle$ 。\n2. 线性性： $\\langle x, y \\rangle + \\langle x, z \\rangle = \\langle x, y + z \\rangle$ 、 $\\langle \\alpha x, y \\rangle = \\alpha \\langle x, y \\rangle$ 。注意：数乘只对第一变元有效。\n3. 正定性：$\\langle x, x \\rangle \\ge 0$ 。\n\n由内积可以导出范数（定义 $\\lVert x \\rVert^{2} = \\langle x, x \\rangle$ ），但是范数不可以导出内积。\n\n# 欧几里得空间\n\n欧几里得空间（Euclidean space）是有限维的实内积线性空间。\n\n# 希尔伯特空间\n\n希尔伯特空间（Hilbert space）是完备的内积线性空间。\n\n# 两个例子\n\n1. 泰勒级数展开（Taylor series）：将一个函数用 $\\lbrace x^{i} \\rbrace_{0}^{\\infty}$ 作为基底表示的一个空间。\n2. 傅里叶级数展开（Fourier series）：将一个函数用 $\\lbrace 1, \\cos x, \\sin x, \\cos 2x, \\sin 2x, \\cdots \\rbrace$ 作为基底表示的一个空间。\n\n# 核函数\n\n终于到主题了，写的手都酸了……\n\n一般的欧式空间中，我们可以定义一个 $n \\times n$ 矩阵的特征值和特征向量。\n$$\nAx=\\lambda x\n$$\n考虑一个矩阵的列空间，当这个矩阵可以进行特征值分解的时候，其特征向量就构成了这个 $n$ 维空间的一组基底。\n\n现在我们把这个概念推广到函数空间。\n\n我们把每个函数 $f(x)$ 看作一个无穷维的向量，然后定义一个函数空间中无穷维的矩阵 $K(x, y)$ ，如果它满足：\n\n1. 正定性：$\\forall f \\rightarrow \\iint f(x)K(x, y)f(y) \\,\\mathrm{d}x\\,\\mathrm{d}y \\ge 0$ 。\n2. 对称性：$K(x, y) = K(y, x)$ 。\n\n我们就把它称作**核函数（kernel function）**。\n\n和特征值与特征向量的概念相似，存在特征值 $\\lambda$ 和特征函数 $\\psi(x)$ 。满足：\n$$\n\\int K(x, y)\\psi(x) \\mathrm{d}x = \\lambda \\psi (y)\n$$\n对于不同的特征值 $\\lambda_{1}$ 、 $\\lambda_{2}$ ，对应不同的特征函数 $\\psi_{1}(x)$ 、 $\\psi_{2}(x)$ ，很容易得到：\n$$\n\\begin{aligned}\n\\int \\lambda_1 \\psi_{1}(x) \\psi_{2}(x) \\mathrm{d}x &= \\iint K(y, x) \\psi_{1}(y) \\mathrm{d}y\\,\\psi_{2}(x)\\mathrm{d}x \\\\\n&= \\iint K(y, x) \\psi_{2}(x) \\mathrm{d}x\\,\\psi_{1}(y)\\mathrm{d}y \\\\\n&= \\int \\lambda_2 \\psi_{2}(y) \\psi_{1}(y) \\mathrm{d}y \\\\\n&= \\int \\lambda_2 \\psi_{2}(x) \\psi_{1}(x) \\mathrm{d}x\n\\end{aligned}\n$$\n因此，\n$$\n\\langle \\psi_{1}, \\psi_{2} \\rangle = \\int \\psi_{1}(x) \\psi_{2}(x) \\mathrm{d}x = 0\n$$\n所以我们找到了一个可以生成这个空间的矩阵 $K$，一组无穷多个特征值 $\\lbrace \\lambda_{i} \\rbrace_{i=1}^{\\infty}$ ，和一组无穷多个元素的正交基 $\\lbrace \\psi_{i} \\rbrace_{i=1}^{\\infty}$ 。\n\n# 再生核希尔伯特空间\n\n如果我们把 $\\lbrace \\sqrt{\\lambda_{i}}\\psi_{i} \\rbrace_{i=1}^{\\infty}$ 当成一组正交基来生成一个希尔伯特空间 $\\mathcal{H}$ 。则该空间中的所有函数都能表示为这组正交基的线性组合。\n$$\nf = \\sum_{i=1}^{\\infty} f_{i}\\sqrt{\\lambda_{i}}\\psi_{i}\n$$\n于是我们就可以把函数 $f$ ，看作 $\\mathcal{H}$ 中的一个向量 $f = (f_{1}, f_{2}, \\cdots)_{\\mathcal{H}}^{\\mathsf{T}}$ 。\n对于另外一个函数 $g = (g_{1}, g_{2}, \\cdots)_{\\mathcal{H}}^{\\mathsf{T}}$ ，我们有：\n$$\n\\langle f, g \\rangle_{\\mathcal{H}} = \\sum_{i=1}^{\\infty}f_{i}g_{i}\n$$\n有了这个内积，我们就可以把核函数看成一种内积形式了，即：\n$$\nK(x, \\cdot) = \\sum_{i=0}^{\\infty} \\lambda_{i}\\psi_{i}(x)\\psi_{i}(\\cdot)\n$$\n如果把 $\\psi_{i}$ 当成一个算子来看的话，我们就取函数名的一个形式：$K(x, \\cdot) = \\sum_{i=0}^{\\infty} \\lambda_{i}\\psi_{i}(x)\\psi_{i}$ 。\n所以我们就可以把 $K$ 当作一个向量来看了。\n$$\nK(x, \\cdot) = (\\sqrt{\\lambda_{1}}\\psi_{1}(x), \\sqrt{\\lambda_{2}}\\psi_{2}(x),\\cdots)_{\\mathcal{H}}^{\\mathsf{T}}\n$$\n因此，\n$$\n\\langle K(x, \\cdot), K(y, \\cdot) \\rangle_{\\mathcal{H}} = \\sum_{i=0}^{\\infty} \\lambda_{i} \\psi_{i}(x) \\psi_{i}(y) = K(x, y)\n$$\n这个性质就叫再生性（reproducing），这个 $\\mathcal{H}$ 就叫做再生核希尔伯特空间（reproducing kernel Hilbert space，RKHS）。\n\n回到我们最初的问题，怎么把一个点映射到一个特征空间上呢？\n\n定义一个映射：\n$$\n\\Phi(x) = K(x, \\cdot) = (\\sqrt{\\lambda_{1}}\\psi_{1}(x), \\sqrt{\\lambda_{2}}\\psi_{2}(x),\\cdots)_{\\mathcal{H}}^{\\mathsf{T}}\n$$\n则\n$$\n\\langle \\Phi(x), \\Phi(y) \\rangle_{\\mathcal{H}} = \\langle K(x, \\cdot), K(y, \\cdot) \\rangle_{\\mathcal{H}} = K(x, y)\n$$\n虽然我们不知道这个映射的具体形式是什么，但是我们可以知道对于一个对称的正定函数（矩阵） $K$ ，一定存在一个映射 $\\Phi$ 和一个特征空间 $\\mathcal{H}$ ，使得\n$$\n\\langle \\Phi(x), \\Phi(y) \\rangle_{\\mathcal{H}} = K(x, y)\n$$\n这就叫做核方法（kernel trick）。\n\n所以为什么一个核函数都对应一个正定矩阵呢，就是因为它把核函数看成**张成某个 RKHS 的空间的一组基底的线性组合**。\n\n# 在 SVM 中的应用\n\n简单说几句，公式太难写了（笑）。\n\n我们在使用原始数据 $x$ 的时候发现数据并不可分，所以就寄希望于一个映射 $\\Phi(x)$ ，这个映射把低维空间上的数据映射到高维空间，这样数据集就有可能变得可分了。\n\n但是在考虑优化问题的对偶问题时，需要计算 $\\langle x_{i}, x_{j} \\rangle$ ，请注意到，我们已经把所有的 $x$ 换成了 $\\Phi(x)$ ，所以就变成需要计算 $\\langle \\Phi(x_{i}), \\Phi(x_{j}) \\rangle$ 。\n为了不让计算变得很困难，我们就可以找到一个核函数 $K$ ，满足 $K$ 可以生成 $\\Phi$ 所形成的高维空间，这样 $\\langle \\Phi(x_{i}), \\Phi(x_{j}) \\rangle$ 就可以简单的用 $K(x_{i}, x_{j})$ 代替了。而 $K$ 往往定义成和 $x$ 的内积有关的式子，这样在低维空间中计算内积就很简单。\n\n如：径向基函数里有 $\\lVert x - y \\rVert^{2}$ ，展开以后其实就含有两个范数项（注意范数就是内积）和一个内积项。","source":"_posts/about-kernel-02.md","raw":"---\ntitle: 说一说核方法（二）——数学角度简介（掉粉文）\ndate: 2017-08-13 17:42:38\ncategories: ML\ntags:\n     - Kernel\n     - RKHS\n     - Functional analysis\ndescription: 本文从数学角度介绍了再生核希尔伯特空间。\n---\n\n**泛函分析（functional analysis）**主要研究的是函数空间（function space），也就是说这个空间中所有的点（元素）都是函数。\n\n先介绍几个概念，我们暂时只讨论由线性空间发展出来的概念，因为线性空间有很多很好的性质。\n\n{% asset_img linear_space.png Linear space %}\n\n# 线性空间\n\n线性空间（linear space）是定义了数乘和加法的空间。所以我们可以找到一组基底（basis），然后通过这一组基底的线性组合来得到空间中的所有点。\n举个例子，二次函数空间，基底就可以定义为 $\\lbrace 1, x, x^{2} \\rbrace$ ，这个空间中任意的函数 $f(x)$ 都可以表示为 $f(x) = \\alpha_{1} \\cdot 1 + \\alpha_{2} \\cdot x + \\alpha_{3} \\cdot x^{2}$ ，所以我们可以说 $f(x)$ 在这组基底下的坐标是 $\\lbrace \\alpha_{1}, \\alpha_{2}, \\alpha_{3} \\rbrace$ 。（请自行想象三维空间中，三个维度的坐标不是 $\\lbrace x, y, z \\rbrace$ 。）\n当然基底也可以定义为 $\\lbrace 1, x+1, (x+1)^{2} \\rbrace$ ，但是计算上会增大难度。所以我们可以看出来基底只要是线性不相关的就行了。那么基底中有 $n$ 个元素的话，我们就叫这个空间是 $n$ 维的。\n一般来讲，选用的基底都是正交基（orthogonal basis），也就是基底中的任意两个元素的内积为 0。\n\n# 线性度量空间\n\n线性度量空间（metric linear space）是在线性空间中定义了**距离（metric）**的空间。\n距离的定义必须满足如下三个条件：\n\n1. 非负性： $d(x, y) \\ge 0; d(x, y) = 0 \\Leftrightarrow x = y$ 。\n2. 对称性： $d(x, y) = d(y, x)$ 。\n3. 三角不等式：$d(x, z) + d(z, y) \\ge d(x, y)$ 。\n\n# 线性赋范空间\n\n线性赋范空间（normed linear space）是定义了**范数（norm）**的线性度量空间。\n范数的定义必须满足：\n\n1. 非负性：$\\lVert x \\rVert \\ge 0$ 。\n2. 齐次性：$ \\lVert \\alpha x \\rVert = |\\alpha| \\lVert x \\rVert $ 。\n3. 三角不等式：$\\lVert x \\rVert + \\lVert y \\rVert \\ge \\lVert x+y \\rVert$ 。\n\n由范数可以导出距离（定义 $d(x, y) = \\lVert x - y \\rVert$ ），但是不可以由距离导出范数。\n\n# 巴拿赫空间\n\n巴拿赫空间（Banach space）是完备的赋范线性空间。\n完备性（completeness）：任一柯西序列（Cauchy sequence）都收敛（convergence）。\n\n# 内积线性空间\n\n内积线性空间（inner product linear space）是定义了**内积（inner product）**的赋范线性空间。\n其中内积也叫**标量积（scalar product）**或**点积（dot product）**。\n这里要注意，内积的定义跟范数其实没关系，不过内积可以导出范数，所以一般内积空间都有范数。\n内积的定义必须满足：\n\n1. 对称性：$\\langle x, y \\rangle = \\langle y, x \\rangle$ 。\n2. 线性性： $\\langle x, y \\rangle + \\langle x, z \\rangle = \\langle x, y + z \\rangle$ 、 $\\langle \\alpha x, y \\rangle = \\alpha \\langle x, y \\rangle$ 。注意：数乘只对第一变元有效。\n3. 正定性：$\\langle x, x \\rangle \\ge 0$ 。\n\n由内积可以导出范数（定义 $\\lVert x \\rVert^{2} = \\langle x, x \\rangle$ ），但是范数不可以导出内积。\n\n# 欧几里得空间\n\n欧几里得空间（Euclidean space）是有限维的实内积线性空间。\n\n# 希尔伯特空间\n\n希尔伯特空间（Hilbert space）是完备的内积线性空间。\n\n# 两个例子\n\n1. 泰勒级数展开（Taylor series）：将一个函数用 $\\lbrace x^{i} \\rbrace_{0}^{\\infty}$ 作为基底表示的一个空间。\n2. 傅里叶级数展开（Fourier series）：将一个函数用 $\\lbrace 1, \\cos x, \\sin x, \\cos 2x, \\sin 2x, \\cdots \\rbrace$ 作为基底表示的一个空间。\n\n# 核函数\n\n终于到主题了，写的手都酸了……\n\n一般的欧式空间中，我们可以定义一个 $n \\times n$ 矩阵的特征值和特征向量。\n$$\nAx=\\lambda x\n$$\n考虑一个矩阵的列空间，当这个矩阵可以进行特征值分解的时候，其特征向量就构成了这个 $n$ 维空间的一组基底。\n\n现在我们把这个概念推广到函数空间。\n\n我们把每个函数 $f(x)$ 看作一个无穷维的向量，然后定义一个函数空间中无穷维的矩阵 $K(x, y)$ ，如果它满足：\n\n1. 正定性：$\\forall f \\rightarrow \\iint f(x)K(x, y)f(y) \\,\\mathrm{d}x\\,\\mathrm{d}y \\ge 0$ 。\n2. 对称性：$K(x, y) = K(y, x)$ 。\n\n我们就把它称作**核函数（kernel function）**。\n\n和特征值与特征向量的概念相似，存在特征值 $\\lambda$ 和特征函数 $\\psi(x)$ 。满足：\n$$\n\\int K(x, y)\\psi(x) \\mathrm{d}x = \\lambda \\psi (y)\n$$\n对于不同的特征值 $\\lambda_{1}$ 、 $\\lambda_{2}$ ，对应不同的特征函数 $\\psi_{1}(x)$ 、 $\\psi_{2}(x)$ ，很容易得到：\n$$\n\\begin{aligned}\n\\int \\lambda_1 \\psi_{1}(x) \\psi_{2}(x) \\mathrm{d}x &= \\iint K(y, x) \\psi_{1}(y) \\mathrm{d}y\\,\\psi_{2}(x)\\mathrm{d}x \\\\\n&= \\iint K(y, x) \\psi_{2}(x) \\mathrm{d}x\\,\\psi_{1}(y)\\mathrm{d}y \\\\\n&= \\int \\lambda_2 \\psi_{2}(y) \\psi_{1}(y) \\mathrm{d}y \\\\\n&= \\int \\lambda_2 \\psi_{2}(x) \\psi_{1}(x) \\mathrm{d}x\n\\end{aligned}\n$$\n因此，\n$$\n\\langle \\psi_{1}, \\psi_{2} \\rangle = \\int \\psi_{1}(x) \\psi_{2}(x) \\mathrm{d}x = 0\n$$\n所以我们找到了一个可以生成这个空间的矩阵 $K$，一组无穷多个特征值 $\\lbrace \\lambda_{i} \\rbrace_{i=1}^{\\infty}$ ，和一组无穷多个元素的正交基 $\\lbrace \\psi_{i} \\rbrace_{i=1}^{\\infty}$ 。\n\n# 再生核希尔伯特空间\n\n如果我们把 $\\lbrace \\sqrt{\\lambda_{i}}\\psi_{i} \\rbrace_{i=1}^{\\infty}$ 当成一组正交基来生成一个希尔伯特空间 $\\mathcal{H}$ 。则该空间中的所有函数都能表示为这组正交基的线性组合。\n$$\nf = \\sum_{i=1}^{\\infty} f_{i}\\sqrt{\\lambda_{i}}\\psi_{i}\n$$\n于是我们就可以把函数 $f$ ，看作 $\\mathcal{H}$ 中的一个向量 $f = (f_{1}, f_{2}, \\cdots)_{\\mathcal{H}}^{\\mathsf{T}}$ 。\n对于另外一个函数 $g = (g_{1}, g_{2}, \\cdots)_{\\mathcal{H}}^{\\mathsf{T}}$ ，我们有：\n$$\n\\langle f, g \\rangle_{\\mathcal{H}} = \\sum_{i=1}^{\\infty}f_{i}g_{i}\n$$\n有了这个内积，我们就可以把核函数看成一种内积形式了，即：\n$$\nK(x, \\cdot) = \\sum_{i=0}^{\\infty} \\lambda_{i}\\psi_{i}(x)\\psi_{i}(\\cdot)\n$$\n如果把 $\\psi_{i}$ 当成一个算子来看的话，我们就取函数名的一个形式：$K(x, \\cdot) = \\sum_{i=0}^{\\infty} \\lambda_{i}\\psi_{i}(x)\\psi_{i}$ 。\n所以我们就可以把 $K$ 当作一个向量来看了。\n$$\nK(x, \\cdot) = (\\sqrt{\\lambda_{1}}\\psi_{1}(x), \\sqrt{\\lambda_{2}}\\psi_{2}(x),\\cdots)_{\\mathcal{H}}^{\\mathsf{T}}\n$$\n因此，\n$$\n\\langle K(x, \\cdot), K(y, \\cdot) \\rangle_{\\mathcal{H}} = \\sum_{i=0}^{\\infty} \\lambda_{i} \\psi_{i}(x) \\psi_{i}(y) = K(x, y)\n$$\n这个性质就叫再生性（reproducing），这个 $\\mathcal{H}$ 就叫做再生核希尔伯特空间（reproducing kernel Hilbert space，RKHS）。\n\n回到我们最初的问题，怎么把一个点映射到一个特征空间上呢？\n\n定义一个映射：\n$$\n\\Phi(x) = K(x, \\cdot) = (\\sqrt{\\lambda_{1}}\\psi_{1}(x), \\sqrt{\\lambda_{2}}\\psi_{2}(x),\\cdots)_{\\mathcal{H}}^{\\mathsf{T}}\n$$\n则\n$$\n\\langle \\Phi(x), \\Phi(y) \\rangle_{\\mathcal{H}} = \\langle K(x, \\cdot), K(y, \\cdot) \\rangle_{\\mathcal{H}} = K(x, y)\n$$\n虽然我们不知道这个映射的具体形式是什么，但是我们可以知道对于一个对称的正定函数（矩阵） $K$ ，一定存在一个映射 $\\Phi$ 和一个特征空间 $\\mathcal{H}$ ，使得\n$$\n\\langle \\Phi(x), \\Phi(y) \\rangle_{\\mathcal{H}} = K(x, y)\n$$\n这就叫做核方法（kernel trick）。\n\n所以为什么一个核函数都对应一个正定矩阵呢，就是因为它把核函数看成**张成某个 RKHS 的空间的一组基底的线性组合**。\n\n# 在 SVM 中的应用\n\n简单说几句，公式太难写了（笑）。\n\n我们在使用原始数据 $x$ 的时候发现数据并不可分，所以就寄希望于一个映射 $\\Phi(x)$ ，这个映射把低维空间上的数据映射到高维空间，这样数据集就有可能变得可分了。\n\n但是在考虑优化问题的对偶问题时，需要计算 $\\langle x_{i}, x_{j} \\rangle$ ，请注意到，我们已经把所有的 $x$ 换成了 $\\Phi(x)$ ，所以就变成需要计算 $\\langle \\Phi(x_{i}), \\Phi(x_{j}) \\rangle$ 。\n为了不让计算变得很困难，我们就可以找到一个核函数 $K$ ，满足 $K$ 可以生成 $\\Phi$ 所形成的高维空间，这样 $\\langle \\Phi(x_{i}), \\Phi(x_{j}) \\rangle$ 就可以简单的用 $K(x_{i}, x_{j})$ 代替了。而 $K$ 往往定义成和 $x$ 的内积有关的式子，这样在低维空间中计算内积就很简单。\n\n如：径向基函数里有 $\\lVert x - y \\rVert^{2}$ ，展开以后其实就含有两个范数项（注意范数就是内积）和一个内积项。","slug":"about-kernel-02","published":1,"updated":"2021-07-21T12:39:59.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivg000hqxt6ns6fqudw","content":"<p><strong>泛函分析（functional analysis）</strong>主要研究的是函数空间（function space），也就是说这个空间中所有的点（元素）都是函数。</p>\n<p>先介绍几个概念，我们暂时只讨论由线性空间发展出来的概念，因为线性空间有很多很好的性质。</p>\n<img src=\"/2017/08/13/about-kernel-02/linear_space.png\" title=\"Linear space\">\n<h1 id=\"线性空间\"><a href=\"#线性空间\" class=\"headerlink\" title=\"线性空间\"></a>线性空间</h1><p>线性空间（linear space）是定义了数乘和加法的空间。所以我们可以找到一组基底（basis），然后通过这一组基底的线性组合来得到空间中的所有点。<br>举个例子，二次函数空间，基底就可以定义为 $\\lbrace 1, x, x^{2} \\rbrace$ ，这个空间中任意的函数 $f(x)$ 都可以表示为 $f(x) = \\alpha_{1} \\cdot 1 + \\alpha_{2} \\cdot x + \\alpha_{3} \\cdot x^{2}$ ，所以我们可以说 $f(x)$ 在这组基底下的坐标是 $\\lbrace \\alpha_{1}, \\alpha_{2}, \\alpha_{3} \\rbrace$ 。（请自行想象三维空间中，三个维度的坐标不是 $\\lbrace x, y, z \\rbrace$ 。）<br>当然基底也可以定义为 $\\lbrace 1, x+1, (x+1)^{2} \\rbrace$ ，但是计算上会增大难度。所以我们可以看出来基底只要是线性不相关的就行了。那么基底中有 $n$ 个元素的话，我们就叫这个空间是 $n$ 维的。<br>一般来讲，选用的基底都是正交基（orthogonal basis），也就是基底中的任意两个元素的内积为 0。</p>\n<h1 id=\"线性度量空间\"><a href=\"#线性度量空间\" class=\"headerlink\" title=\"线性度量空间\"></a>线性度量空间</h1><p>线性度量空间（metric linear space）是在线性空间中定义了<strong>距离（metric）</strong>的空间。<br>距离的定义必须满足如下三个条件：</p>\n<ol>\n<li>非负性： $d(x, y) \\ge 0; d(x, y) = 0 \\Leftrightarrow x = y$ 。</li>\n<li>对称性： $d(x, y) = d(y, x)$ 。</li>\n<li>三角不等式：$d(x, z) + d(z, y) \\ge d(x, y)$ 。</li>\n</ol>\n<h1 id=\"线性赋范空间\"><a href=\"#线性赋范空间\" class=\"headerlink\" title=\"线性赋范空间\"></a>线性赋范空间</h1><p>线性赋范空间（normed linear space）是定义了<strong>范数（norm）</strong>的线性度量空间。<br>范数的定义必须满足：</p>\n<ol>\n<li>非负性：$\\lVert x \\rVert \\ge 0$ 。</li>\n<li>齐次性：$ \\lVert \\alpha x \\rVert = |\\alpha| \\lVert x \\rVert $ 。</li>\n<li>三角不等式：$\\lVert x \\rVert + \\lVert y \\rVert \\ge \\lVert x+y \\rVert$ 。</li>\n</ol>\n<p>由范数可以导出距离（定义 $d(x, y) = \\lVert x - y \\rVert$ ），但是不可以由距离导出范数。</p>\n<h1 id=\"巴拿赫空间\"><a href=\"#巴拿赫空间\" class=\"headerlink\" title=\"巴拿赫空间\"></a>巴拿赫空间</h1><p>巴拿赫空间（Banach space）是完备的赋范线性空间。<br>完备性（completeness）：任一柯西序列（Cauchy sequence）都收敛（convergence）。</p>\n<h1 id=\"内积线性空间\"><a href=\"#内积线性空间\" class=\"headerlink\" title=\"内积线性空间\"></a>内积线性空间</h1><p>内积线性空间（inner product linear space）是定义了<strong>内积（inner product）</strong>的赋范线性空间。<br>其中内积也叫<strong>标量积（scalar product）</strong>或<strong>点积（dot product）</strong>。<br>这里要注意，内积的定义跟范数其实没关系，不过内积可以导出范数，所以一般内积空间都有范数。<br>内积的定义必须满足：</p>\n<ol>\n<li>对称性：$\\langle x, y \\rangle = \\langle y, x \\rangle$ 。</li>\n<li>线性性： $\\langle x, y \\rangle + \\langle x, z \\rangle = \\langle x, y + z \\rangle$ 、 $\\langle \\alpha x, y \\rangle = \\alpha \\langle x, y \\rangle$ 。注意：数乘只对第一变元有效。</li>\n<li>正定性：$\\langle x, x \\rangle \\ge 0$ 。</li>\n</ol>\n<p>由内积可以导出范数（定义 $\\lVert x \\rVert^{2} = \\langle x, x \\rangle$ ），但是范数不可以导出内积。</p>\n<h1 id=\"欧几里得空间\"><a href=\"#欧几里得空间\" class=\"headerlink\" title=\"欧几里得空间\"></a>欧几里得空间</h1><p>欧几里得空间（Euclidean space）是有限维的实内积线性空间。</p>\n<h1 id=\"希尔伯特空间\"><a href=\"#希尔伯特空间\" class=\"headerlink\" title=\"希尔伯特空间\"></a>希尔伯特空间</h1><p>希尔伯特空间（Hilbert space）是完备的内积线性空间。</p>\n<h1 id=\"两个例子\"><a href=\"#两个例子\" class=\"headerlink\" title=\"两个例子\"></a>两个例子</h1><ol>\n<li>泰勒级数展开（Taylor series）：将一个函数用 $\\lbrace x^{i} \\rbrace_{0}^{\\infty}$ 作为基底表示的一个空间。</li>\n<li>傅里叶级数展开（Fourier series）：将一个函数用 $\\lbrace 1, \\cos x, \\sin x, \\cos 2x, \\sin 2x, \\cdots \\rbrace$ 作为基底表示的一个空间。</li>\n</ol>\n<h1 id=\"核函数\"><a href=\"#核函数\" class=\"headerlink\" title=\"核函数\"></a>核函数</h1><p>终于到主题了，写的手都酸了……</p>\n<p>一般的欧式空间中，我们可以定义一个 $n \\times n$ 矩阵的特征值和特征向量。</p>\n<script type=\"math/tex; mode=display\">\nAx=\\lambda x</script><p>考虑一个矩阵的列空间，当这个矩阵可以进行特征值分解的时候，其特征向量就构成了这个 $n$ 维空间的一组基底。</p>\n<p>现在我们把这个概念推广到函数空间。</p>\n<p>我们把每个函数 $f(x)$ 看作一个无穷维的向量，然后定义一个函数空间中无穷维的矩阵 $K(x, y)$ ，如果它满足：</p>\n<ol>\n<li>正定性：$\\forall f \\rightarrow \\iint f(x)K(x, y)f(y) \\,\\mathrm{d}x\\,\\mathrm{d}y \\ge 0$ 。</li>\n<li>对称性：$K(x, y) = K(y, x)$ 。</li>\n</ol>\n<p>我们就把它称作<strong>核函数（kernel function）</strong>。</p>\n<p>和特征值与特征向量的概念相似，存在特征值 $\\lambda$ 和特征函数 $\\psi(x)$ 。满足：</p>\n<script type=\"math/tex; mode=display\">\n\\int K(x, y)\\psi(x) \\mathrm{d}x = \\lambda \\psi (y)</script><p>对于不同的特征值 $\\lambda_{1}$ 、 $\\lambda_{2}$ ，对应不同的特征函数 $\\psi_{1}(x)$ 、 $\\psi_{2}(x)$ ，很容易得到：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\int \\lambda_1 \\psi_{1}(x) \\psi_{2}(x) \\mathrm{d}x &= \\iint K(y, x) \\psi_{1}(y) \\mathrm{d}y\\,\\psi_{2}(x)\\mathrm{d}x \\\\\n&= \\iint K(y, x) \\psi_{2}(x) \\mathrm{d}x\\,\\psi_{1}(y)\\mathrm{d}y \\\\\n&= \\int \\lambda_2 \\psi_{2}(y) \\psi_{1}(y) \\mathrm{d}y \\\\\n&= \\int \\lambda_2 \\psi_{2}(x) \\psi_{1}(x) \\mathrm{d}x\n\\end{aligned}</script><p>因此，</p>\n<script type=\"math/tex; mode=display\">\n\\langle \\psi_{1}, \\psi_{2} \\rangle = \\int \\psi_{1}(x) \\psi_{2}(x) \\mathrm{d}x = 0</script><p>所以我们找到了一个可以生成这个空间的矩阵 $K$，一组无穷多个特征值 $\\lbrace \\lambda_{i} \\rbrace_{i=1}^{\\infty}$ ，和一组无穷多个元素的正交基 $\\lbrace \\psi_{i} \\rbrace_{i=1}^{\\infty}$ 。</p>\n<h1 id=\"再生核希尔伯特空间\"><a href=\"#再生核希尔伯特空间\" class=\"headerlink\" title=\"再生核希尔伯特空间\"></a>再生核希尔伯特空间</h1><p>如果我们把 $\\lbrace \\sqrt{\\lambda_{i}}\\psi_{i} \\rbrace_{i=1}^{\\infty}$ 当成一组正交基来生成一个希尔伯特空间 $\\mathcal{H}$ 。则该空间中的所有函数都能表示为这组正交基的线性组合。</p>\n<script type=\"math/tex; mode=display\">\nf = \\sum_{i=1}^{\\infty} f_{i}\\sqrt{\\lambda_{i}}\\psi_{i}</script><p>于是我们就可以把函数 $f$ ，看作 $\\mathcal{H}$ 中的一个向量 $f = (f_{1}, f_{2}, \\cdots)_{\\mathcal{H}}^{\\mathsf{T}}$ 。<br>对于另外一个函数 $g = (g_{1}, g_{2}, \\cdots)_{\\mathcal{H}}^{\\mathsf{T}}$ ，我们有：</p>\n<script type=\"math/tex; mode=display\">\n\\langle f, g \\rangle_{\\mathcal{H}} = \\sum_{i=1}^{\\infty}f_{i}g_{i}</script><p>有了这个内积，我们就可以把核函数看成一种内积形式了，即：</p>\n<script type=\"math/tex; mode=display\">\nK(x, \\cdot) = \\sum_{i=0}^{\\infty} \\lambda_{i}\\psi_{i}(x)\\psi_{i}(\\cdot)</script><p>如果把 $\\psi_{i}$ 当成一个算子来看的话，我们就取函数名的一个形式：$K(x, \\cdot) = \\sum_{i=0}^{\\infty} \\lambda_{i}\\psi_{i}(x)\\psi_{i}$ 。<br>所以我们就可以把 $K$ 当作一个向量来看了。</p>\n<script type=\"math/tex; mode=display\">\nK(x, \\cdot) = (\\sqrt{\\lambda_{1}}\\psi_{1}(x), \\sqrt{\\lambda_{2}}\\psi_{2}(x),\\cdots)_{\\mathcal{H}}^{\\mathsf{T}}</script><p>因此，</p>\n<script type=\"math/tex; mode=display\">\n\\langle K(x, \\cdot), K(y, \\cdot) \\rangle_{\\mathcal{H}} = \\sum_{i=0}^{\\infty} \\lambda_{i} \\psi_{i}(x) \\psi_{i}(y) = K(x, y)</script><p>这个性质就叫再生性（reproducing），这个 $\\mathcal{H}$ 就叫做再生核希尔伯特空间（reproducing kernel Hilbert space，RKHS）。</p>\n<p>回到我们最初的问题，怎么把一个点映射到一个特征空间上呢？</p>\n<p>定义一个映射：</p>\n<script type=\"math/tex; mode=display\">\n\\Phi(x) = K(x, \\cdot) = (\\sqrt{\\lambda_{1}}\\psi_{1}(x), \\sqrt{\\lambda_{2}}\\psi_{2}(x),\\cdots)_{\\mathcal{H}}^{\\mathsf{T}}</script><p>则</p>\n<script type=\"math/tex; mode=display\">\n\\langle \\Phi(x), \\Phi(y) \\rangle_{\\mathcal{H}} = \\langle K(x, \\cdot), K(y, \\cdot) \\rangle_{\\mathcal{H}} = K(x, y)</script><p>虽然我们不知道这个映射的具体形式是什么，但是我们可以知道对于一个对称的正定函数（矩阵） $K$ ，一定存在一个映射 $\\Phi$ 和一个特征空间 $\\mathcal{H}$ ，使得</p>\n<script type=\"math/tex; mode=display\">\n\\langle \\Phi(x), \\Phi(y) \\rangle_{\\mathcal{H}} = K(x, y)</script><p>这就叫做核方法（kernel trick）。</p>\n<p>所以为什么一个核函数都对应一个正定矩阵呢，就是因为它把核函数看成<strong>张成某个 RKHS 的空间的一组基底的线性组合</strong>。</p>\n<h1 id=\"在-SVM-中的应用\"><a href=\"#在-SVM-中的应用\" class=\"headerlink\" title=\"在 SVM 中的应用\"></a>在 SVM 中的应用</h1><p>简单说几句，公式太难写了（笑）。</p>\n<p>我们在使用原始数据 $x$ 的时候发现数据并不可分，所以就寄希望于一个映射 $\\Phi(x)$ ，这个映射把低维空间上的数据映射到高维空间，这样数据集就有可能变得可分了。</p>\n<p>但是在考虑优化问题的对偶问题时，需要计算 $\\langle x_{i}, x_{j} \\rangle$ ，请注意到，我们已经把所有的 $x$ 换成了 $\\Phi(x)$ ，所以就变成需要计算 $\\langle \\Phi(x_{i}), \\Phi(x_{j}) \\rangle$ 。<br>为了不让计算变得很困难，我们就可以找到一个核函数 $K$ ，满足 $K$ 可以生成 $\\Phi$ 所形成的高维空间，这样 $\\langle \\Phi(x_{i}), \\Phi(x_{j}) \\rangle$ 就可以简单的用 $K(x_{i}, x_{j})$ 代替了。而 $K$ 往往定义成和 $x$ 的内积有关的式子，这样在低维空间中计算内积就很简单。</p>\n<p>如：径向基函数里有 $\\lVert x - y \\rVert^{2}$ ，展开以后其实就含有两个范数项（注意范数就是内积）和一个内积项。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>泛函分析（functional analysis）</strong>主要研究的是函数空间（function space），也就是说这个空间中所有的点（元素）都是函数。</p>\n<p>先介绍几个概念，我们暂时只讨论由线性空间发展出来的概念，因为线性空间有很多很好的性质。</p>\n<img src=\"/2017/08/13/about-kernel-02/linear_space.png\" title=\"Linear space\">\n<h1 id=\"线性空间\"><a href=\"#线性空间\" class=\"headerlink\" title=\"线性空间\"></a>线性空间</h1><p>线性空间（linear space）是定义了数乘和加法的空间。所以我们可以找到一组基底（basis），然后通过这一组基底的线性组合来得到空间中的所有点。<br>举个例子，二次函数空间，基底就可以定义为 $\\lbrace 1, x, x^{2} \\rbrace$ ，这个空间中任意的函数 $f(x)$ 都可以表示为 $f(x) = \\alpha_{1} \\cdot 1 + \\alpha_{2} \\cdot x + \\alpha_{3} \\cdot x^{2}$ ，所以我们可以说 $f(x)$ 在这组基底下的坐标是 $\\lbrace \\alpha_{1}, \\alpha_{2}, \\alpha_{3} \\rbrace$ 。（请自行想象三维空间中，三个维度的坐标不是 $\\lbrace x, y, z \\rbrace$ 。）<br>当然基底也可以定义为 $\\lbrace 1, x+1, (x+1)^{2} \\rbrace$ ，但是计算上会增大难度。所以我们可以看出来基底只要是线性不相关的就行了。那么基底中有 $n$ 个元素的话，我们就叫这个空间是 $n$ 维的。<br>一般来讲，选用的基底都是正交基（orthogonal basis），也就是基底中的任意两个元素的内积为 0。</p>\n<h1 id=\"线性度量空间\"><a href=\"#线性度量空间\" class=\"headerlink\" title=\"线性度量空间\"></a>线性度量空间</h1><p>线性度量空间（metric linear space）是在线性空间中定义了<strong>距离（metric）</strong>的空间。<br>距离的定义必须满足如下三个条件：</p>\n<ol>\n<li>非负性： $d(x, y) \\ge 0; d(x, y) = 0 \\Leftrightarrow x = y$ 。</li>\n<li>对称性： $d(x, y) = d(y, x)$ 。</li>\n<li>三角不等式：$d(x, z) + d(z, y) \\ge d(x, y)$ 。</li>\n</ol>\n<h1 id=\"线性赋范空间\"><a href=\"#线性赋范空间\" class=\"headerlink\" title=\"线性赋范空间\"></a>线性赋范空间</h1><p>线性赋范空间（normed linear space）是定义了<strong>范数（norm）</strong>的线性度量空间。<br>范数的定义必须满足：</p>\n<ol>\n<li>非负性：$\\lVert x \\rVert \\ge 0$ 。</li>\n<li>齐次性：$ \\lVert \\alpha x \\rVert = |\\alpha| \\lVert x \\rVert $ 。</li>\n<li>三角不等式：$\\lVert x \\rVert + \\lVert y \\rVert \\ge \\lVert x+y \\rVert$ 。</li>\n</ol>\n<p>由范数可以导出距离（定义 $d(x, y) = \\lVert x - y \\rVert$ ），但是不可以由距离导出范数。</p>\n<h1 id=\"巴拿赫空间\"><a href=\"#巴拿赫空间\" class=\"headerlink\" title=\"巴拿赫空间\"></a>巴拿赫空间</h1><p>巴拿赫空间（Banach space）是完备的赋范线性空间。<br>完备性（completeness）：任一柯西序列（Cauchy sequence）都收敛（convergence）。</p>\n<h1 id=\"内积线性空间\"><a href=\"#内积线性空间\" class=\"headerlink\" title=\"内积线性空间\"></a>内积线性空间</h1><p>内积线性空间（inner product linear space）是定义了<strong>内积（inner product）</strong>的赋范线性空间。<br>其中内积也叫<strong>标量积（scalar product）</strong>或<strong>点积（dot product）</strong>。<br>这里要注意，内积的定义跟范数其实没关系，不过内积可以导出范数，所以一般内积空间都有范数。<br>内积的定义必须满足：</p>\n<ol>\n<li>对称性：$\\langle x, y \\rangle = \\langle y, x \\rangle$ 。</li>\n<li>线性性： $\\langle x, y \\rangle + \\langle x, z \\rangle = \\langle x, y + z \\rangle$ 、 $\\langle \\alpha x, y \\rangle = \\alpha \\langle x, y \\rangle$ 。注意：数乘只对第一变元有效。</li>\n<li>正定性：$\\langle x, x \\rangle \\ge 0$ 。</li>\n</ol>\n<p>由内积可以导出范数（定义 $\\lVert x \\rVert^{2} = \\langle x, x \\rangle$ ），但是范数不可以导出内积。</p>\n<h1 id=\"欧几里得空间\"><a href=\"#欧几里得空间\" class=\"headerlink\" title=\"欧几里得空间\"></a>欧几里得空间</h1><p>欧几里得空间（Euclidean space）是有限维的实内积线性空间。</p>\n<h1 id=\"希尔伯特空间\"><a href=\"#希尔伯特空间\" class=\"headerlink\" title=\"希尔伯特空间\"></a>希尔伯特空间</h1><p>希尔伯特空间（Hilbert space）是完备的内积线性空间。</p>\n<h1 id=\"两个例子\"><a href=\"#两个例子\" class=\"headerlink\" title=\"两个例子\"></a>两个例子</h1><ol>\n<li>泰勒级数展开（Taylor series）：将一个函数用 $\\lbrace x^{i} \\rbrace_{0}^{\\infty}$ 作为基底表示的一个空间。</li>\n<li>傅里叶级数展开（Fourier series）：将一个函数用 $\\lbrace 1, \\cos x, \\sin x, \\cos 2x, \\sin 2x, \\cdots \\rbrace$ 作为基底表示的一个空间。</li>\n</ol>\n<h1 id=\"核函数\"><a href=\"#核函数\" class=\"headerlink\" title=\"核函数\"></a>核函数</h1><p>终于到主题了，写的手都酸了……</p>\n<p>一般的欧式空间中，我们可以定义一个 $n \\times n$ 矩阵的特征值和特征向量。</p>\n<script type=\"math/tex; mode=display\">\nAx=\\lambda x</script><p>考虑一个矩阵的列空间，当这个矩阵可以进行特征值分解的时候，其特征向量就构成了这个 $n$ 维空间的一组基底。</p>\n<p>现在我们把这个概念推广到函数空间。</p>\n<p>我们把每个函数 $f(x)$ 看作一个无穷维的向量，然后定义一个函数空间中无穷维的矩阵 $K(x, y)$ ，如果它满足：</p>\n<ol>\n<li>正定性：$\\forall f \\rightarrow \\iint f(x)K(x, y)f(y) \\,\\mathrm{d}x\\,\\mathrm{d}y \\ge 0$ 。</li>\n<li>对称性：$K(x, y) = K(y, x)$ 。</li>\n</ol>\n<p>我们就把它称作<strong>核函数（kernel function）</strong>。</p>\n<p>和特征值与特征向量的概念相似，存在特征值 $\\lambda$ 和特征函数 $\\psi(x)$ 。满足：</p>\n<script type=\"math/tex; mode=display\">\n\\int K(x, y)\\psi(x) \\mathrm{d}x = \\lambda \\psi (y)</script><p>对于不同的特征值 $\\lambda_{1}$ 、 $\\lambda_{2}$ ，对应不同的特征函数 $\\psi_{1}(x)$ 、 $\\psi_{2}(x)$ ，很容易得到：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\int \\lambda_1 \\psi_{1}(x) \\psi_{2}(x) \\mathrm{d}x &= \\iint K(y, x) \\psi_{1}(y) \\mathrm{d}y\\,\\psi_{2}(x)\\mathrm{d}x \\\\\n&= \\iint K(y, x) \\psi_{2}(x) \\mathrm{d}x\\,\\psi_{1}(y)\\mathrm{d}y \\\\\n&= \\int \\lambda_2 \\psi_{2}(y) \\psi_{1}(y) \\mathrm{d}y \\\\\n&= \\int \\lambda_2 \\psi_{2}(x) \\psi_{1}(x) \\mathrm{d}x\n\\end{aligned}</script><p>因此，</p>\n<script type=\"math/tex; mode=display\">\n\\langle \\psi_{1}, \\psi_{2} \\rangle = \\int \\psi_{1}(x) \\psi_{2}(x) \\mathrm{d}x = 0</script><p>所以我们找到了一个可以生成这个空间的矩阵 $K$，一组无穷多个特征值 $\\lbrace \\lambda_{i} \\rbrace_{i=1}^{\\infty}$ ，和一组无穷多个元素的正交基 $\\lbrace \\psi_{i} \\rbrace_{i=1}^{\\infty}$ 。</p>\n<h1 id=\"再生核希尔伯特空间\"><a href=\"#再生核希尔伯特空间\" class=\"headerlink\" title=\"再生核希尔伯特空间\"></a>再生核希尔伯特空间</h1><p>如果我们把 $\\lbrace \\sqrt{\\lambda_{i}}\\psi_{i} \\rbrace_{i=1}^{\\infty}$ 当成一组正交基来生成一个希尔伯特空间 $\\mathcal{H}$ 。则该空间中的所有函数都能表示为这组正交基的线性组合。</p>\n<script type=\"math/tex; mode=display\">\nf = \\sum_{i=1}^{\\infty} f_{i}\\sqrt{\\lambda_{i}}\\psi_{i}</script><p>于是我们就可以把函数 $f$ ，看作 $\\mathcal{H}$ 中的一个向量 $f = (f_{1}, f_{2}, \\cdots)_{\\mathcal{H}}^{\\mathsf{T}}$ 。<br>对于另外一个函数 $g = (g_{1}, g_{2}, \\cdots)_{\\mathcal{H}}^{\\mathsf{T}}$ ，我们有：</p>\n<script type=\"math/tex; mode=display\">\n\\langle f, g \\rangle_{\\mathcal{H}} = \\sum_{i=1}^{\\infty}f_{i}g_{i}</script><p>有了这个内积，我们就可以把核函数看成一种内积形式了，即：</p>\n<script type=\"math/tex; mode=display\">\nK(x, \\cdot) = \\sum_{i=0}^{\\infty} \\lambda_{i}\\psi_{i}(x)\\psi_{i}(\\cdot)</script><p>如果把 $\\psi_{i}$ 当成一个算子来看的话，我们就取函数名的一个形式：$K(x, \\cdot) = \\sum_{i=0}^{\\infty} \\lambda_{i}\\psi_{i}(x)\\psi_{i}$ 。<br>所以我们就可以把 $K$ 当作一个向量来看了。</p>\n<script type=\"math/tex; mode=display\">\nK(x, \\cdot) = (\\sqrt{\\lambda_{1}}\\psi_{1}(x), \\sqrt{\\lambda_{2}}\\psi_{2}(x),\\cdots)_{\\mathcal{H}}^{\\mathsf{T}}</script><p>因此，</p>\n<script type=\"math/tex; mode=display\">\n\\langle K(x, \\cdot), K(y, \\cdot) \\rangle_{\\mathcal{H}} = \\sum_{i=0}^{\\infty} \\lambda_{i} \\psi_{i}(x) \\psi_{i}(y) = K(x, y)</script><p>这个性质就叫再生性（reproducing），这个 $\\mathcal{H}$ 就叫做再生核希尔伯特空间（reproducing kernel Hilbert space，RKHS）。</p>\n<p>回到我们最初的问题，怎么把一个点映射到一个特征空间上呢？</p>\n<p>定义一个映射：</p>\n<script type=\"math/tex; mode=display\">\n\\Phi(x) = K(x, \\cdot) = (\\sqrt{\\lambda_{1}}\\psi_{1}(x), \\sqrt{\\lambda_{2}}\\psi_{2}(x),\\cdots)_{\\mathcal{H}}^{\\mathsf{T}}</script><p>则</p>\n<script type=\"math/tex; mode=display\">\n\\langle \\Phi(x), \\Phi(y) \\rangle_{\\mathcal{H}} = \\langle K(x, \\cdot), K(y, \\cdot) \\rangle_{\\mathcal{H}} = K(x, y)</script><p>虽然我们不知道这个映射的具体形式是什么，但是我们可以知道对于一个对称的正定函数（矩阵） $K$ ，一定存在一个映射 $\\Phi$ 和一个特征空间 $\\mathcal{H}$ ，使得</p>\n<script type=\"math/tex; mode=display\">\n\\langle \\Phi(x), \\Phi(y) \\rangle_{\\mathcal{H}} = K(x, y)</script><p>这就叫做核方法（kernel trick）。</p>\n<p>所以为什么一个核函数都对应一个正定矩阵呢，就是因为它把核函数看成<strong>张成某个 RKHS 的空间的一组基底的线性组合</strong>。</p>\n<h1 id=\"在-SVM-中的应用\"><a href=\"#在-SVM-中的应用\" class=\"headerlink\" title=\"在 SVM 中的应用\"></a>在 SVM 中的应用</h1><p>简单说几句，公式太难写了（笑）。</p>\n<p>我们在使用原始数据 $x$ 的时候发现数据并不可分，所以就寄希望于一个映射 $\\Phi(x)$ ，这个映射把低维空间上的数据映射到高维空间，这样数据集就有可能变得可分了。</p>\n<p>但是在考虑优化问题的对偶问题时，需要计算 $\\langle x_{i}, x_{j} \\rangle$ ，请注意到，我们已经把所有的 $x$ 换成了 $\\Phi(x)$ ，所以就变成需要计算 $\\langle \\Phi(x_{i}), \\Phi(x_{j}) \\rangle$ 。<br>为了不让计算变得很困难，我们就可以找到一个核函数 $K$ ，满足 $K$ 可以生成 $\\Phi$ 所形成的高维空间，这样 $\\langle \\Phi(x_{i}), \\Phi(x_{j}) \\rangle$ 就可以简单的用 $K(x_{i}, x_{j})$ 代替了。而 $K$ 往往定义成和 $x$ 的内积有关的式子，这样在低维空间中计算内积就很简单。</p>\n<p>如：径向基函数里有 $\\lVert x - y \\rVert^{2}$ ，展开以后其实就含有两个范数项（注意范数就是内积）和一个内积项。</p>\n"},{"title":"考虑评分人数的用户评分模型","date":"2017-12-27T12:57:14.000Z","description":"使用威尔逊区间法和贝叶斯平滑建立一个考虑到评分人数的评分模型。","_content":"\n# 应用场景\n\n在现实生活中我们会接触到很多评分系统，如豆瓣的书评、YouTube 的影评、StackOverflow 的回答评分等等。在这些评分中一个共同的问题是每个 item 的评分人数是不同的，因此 50000 个人打了 95 分似乎比只有 5 个人打了 95 分更能被相信该 item 是“95”分；而 50000 个人打了 90 分和 40000 个人打了 92 分的比较又如何呢？为了解决这个问题，引入了威尔逊区间法进行评分，并使用贝叶斯平滑对评分做了修正。\n\n# 威尔逊区间法\n\n威尔逊区间法是基于二项分布的一种计算方法，想法很简单，如果 100 个人打分的平均分为 85 分，那么我们可以把这个平均分看作 100 个人中有 85% 的人给了满分，而另外 15% 的人打零分。就像硬币的正反面，要不就选满分，要不就选零分，保证平均数一样就可以。在这个条件下，威尔逊区间法考虑对一个 item ，有 85% 的人“愿意选择”这件事在置信水平 $\\alpha$ 下的置信区间是多少（一般选 $\\alpha = 95\\%$ ），然后用这个置信区间的下限来当做这个 item 的评价。这样就在一定程度上平滑了人数对评价的影响。\n\n定义：\n\n- 最大评分：$S_{\\mathrm{max}}$ \n- 选择该 item 的人的比例：$p$\n- 评价总数：$n$\n- 统计量常数（使用置信水平计算）：$K = z_{1-\\frac{\\alpha}{2}}$\n\n则修正后的得分是：\n$$\ns = p_{\\mathrm{min}} \\cdot S_{\\mathrm{max}}, \\, p_{\\mathrm{min}} = \\frac{p + \\frac{K^{2}}{2n} - K \\sqrt{\\frac{p(1 - p)}{n} + \\frac{K^{2}}{4n^{2}}}}{1 + \\frac{K^{2}}{n}}\n$$\n这个公式，有印象的同学可以发现，我在 [之前的一篇博客](http://sakigami-yang.me/2017/10/12/statistical-formulars-for-programmers/) 中提到过。\n\n# 贝叶斯平滑\n\n贝叶斯平滑其实并不是评分模式，但是它可以解决一些边界问题，比如对于评分人数过少的 item ，我们可以假设有 $C$ 个不存在的人，这些人都打了全局平均分来给总分做一个平滑。\n\n定义：\n\n- 补偿人数：$C$\n- 补偿评分：$M$\n- 该 item 评分人数：$n$\n- 该 item 的得分：$s$\n\n则平滑后的得分为：\n$$\n\\hat{s} = \\frac{CM + ns}{C + n}\n$$\n\n# Python 实现\n\n```python\ndef Wilson(p, n):\n    \"\"\"\n    威尔逊区间的下限\n    \"\"\"\n    p = float(p)\n    K = 1.96  # 95% confidence level\n    _K2_div_n = (K ** 2) / n\n    pmin = (p + _K2_div_n / 2.0 -\n            K * ((p * (1 - p) / n + _K2_div_n / n / 4.0) ** 0.5)) / (1 + _K2_div_n)\n    return pmin\n\n\ndef WilsonAvgP(n):\n    \"\"\"\n    这个分数是用来充当 Bayesian 中的 M 的，取法比较随意。\n    本方法中是取了 0.01~1 这 100 中情况的置信区间的平均值。\n    其实取所有数据的总平均分也可以，总之，是一个比较平均的合理的得分就好。\n    \"\"\"\n    totalP = 0.0\n    totalN = 0\n    p = 0.01\n\n    while True:\n        totalP += Wilson(p, n, 1);\n        totalN += 1\n        p += 0.01\n        if p >= 1:\n            break\n\n    return totalP / totalN\n\n\ndef Bayesian(C, M, n, s):\n    \"\"\"\n    贝叶斯平滑\n    这里的 C 和 M 其实都随意取得，就像上面那个函数中说的，\n    只要合理并且是一个差不多平均的量就可以。\n    \"\"\"\n    return (C * M + n * s) / (n + C)\n```\n\n\n\n\n\n","source":"_posts/rating-model-considering-user-count.md","raw":"---\ntitle: 考虑评分人数的用户评分模型\ndate: 2017-12-27 20:57:14\ncategories: ML\ntags:\n     - Rating\ndescription: 使用威尔逊区间法和贝叶斯平滑建立一个考虑到评分人数的评分模型。\n---\n\n# 应用场景\n\n在现实生活中我们会接触到很多评分系统，如豆瓣的书评、YouTube 的影评、StackOverflow 的回答评分等等。在这些评分中一个共同的问题是每个 item 的评分人数是不同的，因此 50000 个人打了 95 分似乎比只有 5 个人打了 95 分更能被相信该 item 是“95”分；而 50000 个人打了 90 分和 40000 个人打了 92 分的比较又如何呢？为了解决这个问题，引入了威尔逊区间法进行评分，并使用贝叶斯平滑对评分做了修正。\n\n# 威尔逊区间法\n\n威尔逊区间法是基于二项分布的一种计算方法，想法很简单，如果 100 个人打分的平均分为 85 分，那么我们可以把这个平均分看作 100 个人中有 85% 的人给了满分，而另外 15% 的人打零分。就像硬币的正反面，要不就选满分，要不就选零分，保证平均数一样就可以。在这个条件下，威尔逊区间法考虑对一个 item ，有 85% 的人“愿意选择”这件事在置信水平 $\\alpha$ 下的置信区间是多少（一般选 $\\alpha = 95\\%$ ），然后用这个置信区间的下限来当做这个 item 的评价。这样就在一定程度上平滑了人数对评价的影响。\n\n定义：\n\n- 最大评分：$S_{\\mathrm{max}}$ \n- 选择该 item 的人的比例：$p$\n- 评价总数：$n$\n- 统计量常数（使用置信水平计算）：$K = z_{1-\\frac{\\alpha}{2}}$\n\n则修正后的得分是：\n$$\ns = p_{\\mathrm{min}} \\cdot S_{\\mathrm{max}}, \\, p_{\\mathrm{min}} = \\frac{p + \\frac{K^{2}}{2n} - K \\sqrt{\\frac{p(1 - p)}{n} + \\frac{K^{2}}{4n^{2}}}}{1 + \\frac{K^{2}}{n}}\n$$\n这个公式，有印象的同学可以发现，我在 [之前的一篇博客](http://sakigami-yang.me/2017/10/12/statistical-formulars-for-programmers/) 中提到过。\n\n# 贝叶斯平滑\n\n贝叶斯平滑其实并不是评分模式，但是它可以解决一些边界问题，比如对于评分人数过少的 item ，我们可以假设有 $C$ 个不存在的人，这些人都打了全局平均分来给总分做一个平滑。\n\n定义：\n\n- 补偿人数：$C$\n- 补偿评分：$M$\n- 该 item 评分人数：$n$\n- 该 item 的得分：$s$\n\n则平滑后的得分为：\n$$\n\\hat{s} = \\frac{CM + ns}{C + n}\n$$\n\n# Python 实现\n\n```python\ndef Wilson(p, n):\n    \"\"\"\n    威尔逊区间的下限\n    \"\"\"\n    p = float(p)\n    K = 1.96  # 95% confidence level\n    _K2_div_n = (K ** 2) / n\n    pmin = (p + _K2_div_n / 2.0 -\n            K * ((p * (1 - p) / n + _K2_div_n / n / 4.0) ** 0.5)) / (1 + _K2_div_n)\n    return pmin\n\n\ndef WilsonAvgP(n):\n    \"\"\"\n    这个分数是用来充当 Bayesian 中的 M 的，取法比较随意。\n    本方法中是取了 0.01~1 这 100 中情况的置信区间的平均值。\n    其实取所有数据的总平均分也可以，总之，是一个比较平均的合理的得分就好。\n    \"\"\"\n    totalP = 0.0\n    totalN = 0\n    p = 0.01\n\n    while True:\n        totalP += Wilson(p, n, 1);\n        totalN += 1\n        p += 0.01\n        if p >= 1:\n            break\n\n    return totalP / totalN\n\n\ndef Bayesian(C, M, n, s):\n    \"\"\"\n    贝叶斯平滑\n    这里的 C 和 M 其实都随意取得，就像上面那个函数中说的，\n    只要合理并且是一个差不多平均的量就可以。\n    \"\"\"\n    return (C * M + n * s) / (n + C)\n```\n\n\n\n\n\n","slug":"rating-model-considering-user-count","published":1,"updated":"2021-07-19T13:03:31.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivh000iqxt6qn87def1","content":"<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><p>在现实生活中我们会接触到很多评分系统，如豆瓣的书评、YouTube 的影评、StackOverflow 的回答评分等等。在这些评分中一个共同的问题是每个 item 的评分人数是不同的，因此 50000 个人打了 95 分似乎比只有 5 个人打了 95 分更能被相信该 item 是“95”分；而 50000 个人打了 90 分和 40000 个人打了 92 分的比较又如何呢？为了解决这个问题，引入了威尔逊区间法进行评分，并使用贝叶斯平滑对评分做了修正。</p>\n<h1 id=\"威尔逊区间法\"><a href=\"#威尔逊区间法\" class=\"headerlink\" title=\"威尔逊区间法\"></a>威尔逊区间法</h1><p>威尔逊区间法是基于二项分布的一种计算方法，想法很简单，如果 100 个人打分的平均分为 85 分，那么我们可以把这个平均分看作 100 个人中有 85% 的人给了满分，而另外 15% 的人打零分。就像硬币的正反面，要不就选满分，要不就选零分，保证平均数一样就可以。在这个条件下，威尔逊区间法考虑对一个 item ，有 85% 的人“愿意选择”这件事在置信水平 $\\alpha$ 下的置信区间是多少（一般选 $\\alpha = 95\\%$ ），然后用这个置信区间的下限来当做这个 item 的评价。这样就在一定程度上平滑了人数对评价的影响。</p>\n<p>定义：</p>\n<ul>\n<li>最大评分：$S_{\\mathrm{max}}$ </li>\n<li>选择该 item 的人的比例：$p$</li>\n<li>评价总数：$n$</li>\n<li>统计量常数（使用置信水平计算）：$K = z_{1-\\frac{\\alpha}{2}}$</li>\n</ul>\n<p>则修正后的得分是：</p>\n<script type=\"math/tex; mode=display\">\ns = p_{\\mathrm{min}} \\cdot S_{\\mathrm{max}}, \\, p_{\\mathrm{min}} = \\frac{p + \\frac{K^{2}}{2n} - K \\sqrt{\\frac{p(1 - p)}{n} + \\frac{K^{2}}{4n^{2}}}}{1 + \\frac{K^{2}}{n}}</script><p>这个公式，有印象的同学可以发现，我在 <a href=\"http://sakigami-yang.me/2017/10/12/statistical-formulars-for-programmers/\">之前的一篇博客</a> 中提到过。</p>\n<h1 id=\"贝叶斯平滑\"><a href=\"#贝叶斯平滑\" class=\"headerlink\" title=\"贝叶斯平滑\"></a>贝叶斯平滑</h1><p>贝叶斯平滑其实并不是评分模式，但是它可以解决一些边界问题，比如对于评分人数过少的 item ，我们可以假设有 $C$ 个不存在的人，这些人都打了全局平均分来给总分做一个平滑。</p>\n<p>定义：</p>\n<ul>\n<li>补偿人数：$C$</li>\n<li>补偿评分：$M$</li>\n<li>该 item 评分人数：$n$</li>\n<li>该 item 的得分：$s$</li>\n</ul>\n<p>则平滑后的得分为：</p>\n<script type=\"math/tex; mode=display\">\n\\hat{s} = \\frac{CM + ns}{C + n}</script><h1 id=\"Python-实现\"><a href=\"#Python-实现\" class=\"headerlink\" title=\"Python 实现\"></a>Python 实现</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Wilson</span><span class=\"params\">(p, n)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    威尔逊区间的下限</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    p = float(p)</span><br><span class=\"line\">    K = <span class=\"number\">1.96</span>  <span class=\"comment\"># 95% confidence level</span></span><br><span class=\"line\">    _K2_div_n = (K ** <span class=\"number\">2</span>) / n</span><br><span class=\"line\">    pmin = (p + _K2_div_n / <span class=\"number\">2.0</span> -</span><br><span class=\"line\">            K * ((p * (<span class=\"number\">1</span> - p) / n + _K2_div_n / n / <span class=\"number\">4.0</span>) ** <span class=\"number\">0.5</span>)) / (<span class=\"number\">1</span> + _K2_div_n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pmin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">WilsonAvgP</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    这个分数是用来充当 Bayesian 中的 M 的，取法比较随意。</span></span><br><span class=\"line\"><span class=\"string\">    本方法中是取了 0.01~1 这 100 中情况的置信区间的平均值。</span></span><br><span class=\"line\"><span class=\"string\">    其实取所有数据的总平均分也可以，总之，是一个比较平均的合理的得分就好。</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    totalP = <span class=\"number\">0.0</span></span><br><span class=\"line\">    totalN = <span class=\"number\">0</span></span><br><span class=\"line\">    p = <span class=\"number\">0.01</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        totalP += Wilson(p, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        totalN += <span class=\"number\">1</span></span><br><span class=\"line\">        p += <span class=\"number\">0.01</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> totalP / totalN</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Bayesian</span><span class=\"params\">(C, M, n, s)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    贝叶斯平滑</span></span><br><span class=\"line\"><span class=\"string\">    这里的 C 和 M 其实都随意取得，就像上面那个函数中说的，</span></span><br><span class=\"line\"><span class=\"string\">    只要合理并且是一个差不多平均的量就可以。</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (C * M + n * s) / (n + C)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><p>在现实生活中我们会接触到很多评分系统，如豆瓣的书评、YouTube 的影评、StackOverflow 的回答评分等等。在这些评分中一个共同的问题是每个 item 的评分人数是不同的，因此 50000 个人打了 95 分似乎比只有 5 个人打了 95 分更能被相信该 item 是“95”分；而 50000 个人打了 90 分和 40000 个人打了 92 分的比较又如何呢？为了解决这个问题，引入了威尔逊区间法进行评分，并使用贝叶斯平滑对评分做了修正。</p>\n<h1 id=\"威尔逊区间法\"><a href=\"#威尔逊区间法\" class=\"headerlink\" title=\"威尔逊区间法\"></a>威尔逊区间法</h1><p>威尔逊区间法是基于二项分布的一种计算方法，想法很简单，如果 100 个人打分的平均分为 85 分，那么我们可以把这个平均分看作 100 个人中有 85% 的人给了满分，而另外 15% 的人打零分。就像硬币的正反面，要不就选满分，要不就选零分，保证平均数一样就可以。在这个条件下，威尔逊区间法考虑对一个 item ，有 85% 的人“愿意选择”这件事在置信水平 $\\alpha$ 下的置信区间是多少（一般选 $\\alpha = 95\\%$ ），然后用这个置信区间的下限来当做这个 item 的评价。这样就在一定程度上平滑了人数对评价的影响。</p>\n<p>定义：</p>\n<ul>\n<li>最大评分：$S_{\\mathrm{max}}$ </li>\n<li>选择该 item 的人的比例：$p$</li>\n<li>评价总数：$n$</li>\n<li>统计量常数（使用置信水平计算）：$K = z_{1-\\frac{\\alpha}{2}}$</li>\n</ul>\n<p>则修正后的得分是：</p>\n<script type=\"math/tex; mode=display\">\ns = p_{\\mathrm{min}} \\cdot S_{\\mathrm{max}}, \\, p_{\\mathrm{min}} = \\frac{p + \\frac{K^{2}}{2n} - K \\sqrt{\\frac{p(1 - p)}{n} + \\frac{K^{2}}{4n^{2}}}}{1 + \\frac{K^{2}}{n}}</script><p>这个公式，有印象的同学可以发现，我在 <a href=\"http://sakigami-yang.me/2017/10/12/statistical-formulars-for-programmers/\">之前的一篇博客</a> 中提到过。</p>\n<h1 id=\"贝叶斯平滑\"><a href=\"#贝叶斯平滑\" class=\"headerlink\" title=\"贝叶斯平滑\"></a>贝叶斯平滑</h1><p>贝叶斯平滑其实并不是评分模式，但是它可以解决一些边界问题，比如对于评分人数过少的 item ，我们可以假设有 $C$ 个不存在的人，这些人都打了全局平均分来给总分做一个平滑。</p>\n<p>定义：</p>\n<ul>\n<li>补偿人数：$C$</li>\n<li>补偿评分：$M$</li>\n<li>该 item 评分人数：$n$</li>\n<li>该 item 的得分：$s$</li>\n</ul>\n<p>则平滑后的得分为：</p>\n<script type=\"math/tex; mode=display\">\n\\hat{s} = \\frac{CM + ns}{C + n}</script><h1 id=\"Python-实现\"><a href=\"#Python-实现\" class=\"headerlink\" title=\"Python 实现\"></a>Python 实现</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Wilson</span><span class=\"params\">(p, n)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    威尔逊区间的下限</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    p = float(p)</span><br><span class=\"line\">    K = <span class=\"number\">1.96</span>  <span class=\"comment\"># 95% confidence level</span></span><br><span class=\"line\">    _K2_div_n = (K ** <span class=\"number\">2</span>) / n</span><br><span class=\"line\">    pmin = (p + _K2_div_n / <span class=\"number\">2.0</span> -</span><br><span class=\"line\">            K * ((p * (<span class=\"number\">1</span> - p) / n + _K2_div_n / n / <span class=\"number\">4.0</span>) ** <span class=\"number\">0.5</span>)) / (<span class=\"number\">1</span> + _K2_div_n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pmin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">WilsonAvgP</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    这个分数是用来充当 Bayesian 中的 M 的，取法比较随意。</span></span><br><span class=\"line\"><span class=\"string\">    本方法中是取了 0.01~1 这 100 中情况的置信区间的平均值。</span></span><br><span class=\"line\"><span class=\"string\">    其实取所有数据的总平均分也可以，总之，是一个比较平均的合理的得分就好。</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    totalP = <span class=\"number\">0.0</span></span><br><span class=\"line\">    totalN = <span class=\"number\">0</span></span><br><span class=\"line\">    p = <span class=\"number\">0.01</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        totalP += Wilson(p, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        totalN += <span class=\"number\">1</span></span><br><span class=\"line\">        p += <span class=\"number\">0.01</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> totalP / totalN</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Bayesian</span><span class=\"params\">(C, M, n, s)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    贝叶斯平滑</span></span><br><span class=\"line\"><span class=\"string\">    这里的 C 和 M 其实都随意取得，就像上面那个函数中说的，</span></span><br><span class=\"line\"><span class=\"string\">    只要合理并且是一个差不多平均的量就可以。</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (C * M + n * s) / (n + C)</span><br></pre></td></tr></table></figure>\n"},{"title":"由 Softmax 想到的（一）——广义线性模型","date":"2017-08-10T13:12:46.000Z","description":"由好友 史博士 关于 Softmax 的问题而想到的一些脑洞。本文讲解了 Logistic 模型和 Softmax 模型的来历。和广义线性模型的相关知识。","_content":"\n昨日被好友史博士问了个问题：为什么是 Softmax？Softmax到底是怎么来的？\n于是脑洞大开，写几篇博客把广义线性模型、梯度、次梯度、激活函数这几块有一些关联的概念大概串一下。\n\n# 广义线性模型 及 指数分布族\n\n本质上，线性模型、Logistic 模型和 Softmax 模型都是由一个东西推理出来的。\n就是广义线性模型（Generalized Linear Model）。\n这些分布之所以长成这个样子，是因为我们对标签的分布进行了假设。\n\n- 标签是连续的（正态分布，由中心极限定律所得）——线性模型。\n- 标签是二分类（多次观察可看做是二项分布）—— Logistic 模型。\n- 标签是多分类（多次观察可看做是多项分布）—— Softmax 模型。\n\n另外，只要 $y$ 的分布是指数分布族（exponential family distribution）的，都可以用一种通用的方法推导出 $h(x)$ 。\n\n\n\n广义线性模型的定义：\n\n1. 给定特征属性 $x$ 和参数 $\\theta$ 后，$y$ 的条件概率 $P(y \\mid x; \\, \\theta)$ 服从指数分布族。\n2. 预测 $T(y)$ 的期望，即计算 $E[T(y) \\mid x]$ 。\n3. $\\eta$ 与 $x$ 之间是线性的，即 $\\eta=\\theta^{\\mathsf{T}}x$ 。\n\n指数分布的形式如下：\n$$\nP(y; \\, \\eta) = b(y) \\ast \\exp(\\eta^{\\mathsf{T}}T(y)-a(\\eta))\n$$\n\n# 二项分布—— Logistic 模型的意义\n\n伯努利分布（Bernoulli distribution），也叫 0-1 分布，如果实验多次就变成了二项分布（binomial distribution）。\n所以二项分布也叫 $n$ 重伯努利分布，或者 $n$ 重伯努利实验。\n概率密度函数为：$P(y; \\, \\phi) = \\phi^{y}(1-\\phi)^{1-y}$ 。\n把它变为指数分布族的形式：$P(y; \\, \\phi) = \\exp(y\\ln \\frac{\\phi}{1-\\phi}+\\ln(1-\\phi))$ 。\n对比指数分布族，有：$\\eta=\\ln \\frac{\\phi}{1-\\phi} \\Rightarrow \\phi=\\frac{1}{1+e^{-\\eta}}$ 。\n根据广义线性模型的第三点的线性关系。可得：\n$$\n\\phi = \\frac{1}{1+e^{-\\theta^{\\mathsf{T}}x}}\n$$\n所以我们用 Logistic 函数来估计伯努利分布的参数。\n直观的想就是我们估计一个东西的表现更像 0 还是更像 1，而不是准确的等于哪一个。\n\n# 多项分布—— Softmax 模型的意义\n\n多项分布（multinomial distribution）也是 $n$ 重实验，只不过每次不是伯努利分布，而是有 $k$ 个选择的“伯努利分布”。跟推导 Logistic 模型的手法相似，将多项分布化为指数分布族，在考虑线性关系，可得：\n$$\nP(y^{(i)}=j \\mid x^{(i)}; \\, \\theta)=\\frac{e^{\\theta_{j}^{\\mathsf{T}}x^{(i)}}}{\\sum_k e^{\\theta_{k}^{\\mathsf{T}}x^{(i)}}}\n$$\n注意在推导中有一个小技巧，就是 Softmax 模型总是有一个“冗余”的参数，道理很简单，如果我们有 $k$ 个分类，并且一个东西的表现不太像某 $k-1$ 类的话，那必然猜测它属于第 $k$ 类。\n\n另外，当 $k=2$ 时，Softmax 模型退化为 Logistic 模型。","source":"_posts/thinking-from-softmax-01.md","raw":"---\ntitle: 由 Softmax 想到的（一）——广义线性模型\ndate: 2017-08-10 21:12:46\ncategories: ML\ntags: \n     - Generalized Linear Model\n     - Exponential family distribution\n     - Logistic\n     - Softmax\ndescription: 由好友 史博士 关于 Softmax 的问题而想到的一些脑洞。本文讲解了 Logistic 模型和 Softmax 模型的来历。和广义线性模型的相关知识。\n---\n\n昨日被好友史博士问了个问题：为什么是 Softmax？Softmax到底是怎么来的？\n于是脑洞大开，写几篇博客把广义线性模型、梯度、次梯度、激活函数这几块有一些关联的概念大概串一下。\n\n# 广义线性模型 及 指数分布族\n\n本质上，线性模型、Logistic 模型和 Softmax 模型都是由一个东西推理出来的。\n就是广义线性模型（Generalized Linear Model）。\n这些分布之所以长成这个样子，是因为我们对标签的分布进行了假设。\n\n- 标签是连续的（正态分布，由中心极限定律所得）——线性模型。\n- 标签是二分类（多次观察可看做是二项分布）—— Logistic 模型。\n- 标签是多分类（多次观察可看做是多项分布）—— Softmax 模型。\n\n另外，只要 $y$ 的分布是指数分布族（exponential family distribution）的，都可以用一种通用的方法推导出 $h(x)$ 。\n\n\n\n广义线性模型的定义：\n\n1. 给定特征属性 $x$ 和参数 $\\theta$ 后，$y$ 的条件概率 $P(y \\mid x; \\, \\theta)$ 服从指数分布族。\n2. 预测 $T(y)$ 的期望，即计算 $E[T(y) \\mid x]$ 。\n3. $\\eta$ 与 $x$ 之间是线性的，即 $\\eta=\\theta^{\\mathsf{T}}x$ 。\n\n指数分布的形式如下：\n$$\nP(y; \\, \\eta) = b(y) \\ast \\exp(\\eta^{\\mathsf{T}}T(y)-a(\\eta))\n$$\n\n# 二项分布—— Logistic 模型的意义\n\n伯努利分布（Bernoulli distribution），也叫 0-1 分布，如果实验多次就变成了二项分布（binomial distribution）。\n所以二项分布也叫 $n$ 重伯努利分布，或者 $n$ 重伯努利实验。\n概率密度函数为：$P(y; \\, \\phi) = \\phi^{y}(1-\\phi)^{1-y}$ 。\n把它变为指数分布族的形式：$P(y; \\, \\phi) = \\exp(y\\ln \\frac{\\phi}{1-\\phi}+\\ln(1-\\phi))$ 。\n对比指数分布族，有：$\\eta=\\ln \\frac{\\phi}{1-\\phi} \\Rightarrow \\phi=\\frac{1}{1+e^{-\\eta}}$ 。\n根据广义线性模型的第三点的线性关系。可得：\n$$\n\\phi = \\frac{1}{1+e^{-\\theta^{\\mathsf{T}}x}}\n$$\n所以我们用 Logistic 函数来估计伯努利分布的参数。\n直观的想就是我们估计一个东西的表现更像 0 还是更像 1，而不是准确的等于哪一个。\n\n# 多项分布—— Softmax 模型的意义\n\n多项分布（multinomial distribution）也是 $n$ 重实验，只不过每次不是伯努利分布，而是有 $k$ 个选择的“伯努利分布”。跟推导 Logistic 模型的手法相似，将多项分布化为指数分布族，在考虑线性关系，可得：\n$$\nP(y^{(i)}=j \\mid x^{(i)}; \\, \\theta)=\\frac{e^{\\theta_{j}^{\\mathsf{T}}x^{(i)}}}{\\sum_k e^{\\theta_{k}^{\\mathsf{T}}x^{(i)}}}\n$$\n注意在推导中有一个小技巧，就是 Softmax 模型总是有一个“冗余”的参数，道理很简单，如果我们有 $k$ 个分类，并且一个东西的表现不太像某 $k-1$ 类的话，那必然猜测它属于第 $k$ 类。\n\n另外，当 $k=2$ 时，Softmax 模型退化为 Logistic 模型。","slug":"thinking-from-softmax-01","published":1,"updated":"2021-07-19T13:03:31.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivh000jqxt6azgq5ni1","content":"<p>昨日被好友史博士问了个问题：为什么是 Softmax？Softmax到底是怎么来的？<br>于是脑洞大开，写几篇博客把广义线性模型、梯度、次梯度、激活函数这几块有一些关联的概念大概串一下。</p>\n<h1 id=\"广义线性模型-及-指数分布族\"><a href=\"#广义线性模型-及-指数分布族\" class=\"headerlink\" title=\"广义线性模型 及 指数分布族\"></a>广义线性模型 及 指数分布族</h1><p>本质上，线性模型、Logistic 模型和 Softmax 模型都是由一个东西推理出来的。<br>就是广义线性模型（Generalized Linear Model）。<br>这些分布之所以长成这个样子，是因为我们对标签的分布进行了假设。</p>\n<ul>\n<li>标签是连续的（正态分布，由中心极限定律所得）——线性模型。</li>\n<li>标签是二分类（多次观察可看做是二项分布）—— Logistic 模型。</li>\n<li>标签是多分类（多次观察可看做是多项分布）—— Softmax 模型。</li>\n</ul>\n<p>另外，只要 $y$ 的分布是指数分布族（exponential family distribution）的，都可以用一种通用的方法推导出 $h(x)$ 。</p>\n<p>广义线性模型的定义：</p>\n<ol>\n<li>给定特征属性 $x$ 和参数 $\\theta$ 后，$y$ 的条件概率 $P(y \\mid x; \\, \\theta)$ 服从指数分布族。</li>\n<li>预测 $T(y)$ 的期望，即计算 $E[T(y) \\mid x]$ 。</li>\n<li>$\\eta$ 与 $x$ 之间是线性的，即 $\\eta=\\theta^{\\mathsf{T}}x$ 。</li>\n</ol>\n<p>指数分布的形式如下：</p>\n<script type=\"math/tex; mode=display\">\nP(y; \\, \\eta) = b(y) \\ast \\exp(\\eta^{\\mathsf{T}}T(y)-a(\\eta))</script><h1 id=\"二项分布——-Logistic-模型的意义\"><a href=\"#二项分布——-Logistic-模型的意义\" class=\"headerlink\" title=\"二项分布—— Logistic 模型的意义\"></a>二项分布—— Logistic 模型的意义</h1><p>伯努利分布（Bernoulli distribution），也叫 0-1 分布，如果实验多次就变成了二项分布（binomial distribution）。<br>所以二项分布也叫 $n$ 重伯努利分布，或者 $n$ 重伯努利实验。<br>概率密度函数为：$P(y; \\, \\phi) = \\phi^{y}(1-\\phi)^{1-y}$ 。<br>把它变为指数分布族的形式：$P(y; \\, \\phi) = \\exp(y\\ln \\frac{\\phi}{1-\\phi}+\\ln(1-\\phi))$ 。<br>对比指数分布族，有：$\\eta=\\ln \\frac{\\phi}{1-\\phi} \\Rightarrow \\phi=\\frac{1}{1+e^{-\\eta}}$ 。<br>根据广义线性模型的第三点的线性关系。可得：</p>\n<script type=\"math/tex; mode=display\">\n\\phi = \\frac{1}{1+e^{-\\theta^{\\mathsf{T}}x}}</script><p>所以我们用 Logistic 函数来估计伯努利分布的参数。<br>直观的想就是我们估计一个东西的表现更像 0 还是更像 1，而不是准确的等于哪一个。</p>\n<h1 id=\"多项分布——-Softmax-模型的意义\"><a href=\"#多项分布——-Softmax-模型的意义\" class=\"headerlink\" title=\"多项分布—— Softmax 模型的意义\"></a>多项分布—— Softmax 模型的意义</h1><p>多项分布（multinomial distribution）也是 $n$ 重实验，只不过每次不是伯努利分布，而是有 $k$ 个选择的“伯努利分布”。跟推导 Logistic 模型的手法相似，将多项分布化为指数分布族，在考虑线性关系，可得：</p>\n<script type=\"math/tex; mode=display\">\nP(y^{(i)}=j \\mid x^{(i)}; \\, \\theta)=\\frac{e^{\\theta_{j}^{\\mathsf{T}}x^{(i)}}}{\\sum_k e^{\\theta_{k}^{\\mathsf{T}}x^{(i)}}}</script><p>注意在推导中有一个小技巧，就是 Softmax 模型总是有一个“冗余”的参数，道理很简单，如果我们有 $k$ 个分类，并且一个东西的表现不太像某 $k-1$ 类的话，那必然猜测它属于第 $k$ 类。</p>\n<p>另外，当 $k=2$ 时，Softmax 模型退化为 Logistic 模型。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨日被好友史博士问了个问题：为什么是 Softmax？Softmax到底是怎么来的？<br>于是脑洞大开，写几篇博客把广义线性模型、梯度、次梯度、激活函数这几块有一些关联的概念大概串一下。</p>\n<h1 id=\"广义线性模型-及-指数分布族\"><a href=\"#广义线性模型-及-指数分布族\" class=\"headerlink\" title=\"广义线性模型 及 指数分布族\"></a>广义线性模型 及 指数分布族</h1><p>本质上，线性模型、Logistic 模型和 Softmax 模型都是由一个东西推理出来的。<br>就是广义线性模型（Generalized Linear Model）。<br>这些分布之所以长成这个样子，是因为我们对标签的分布进行了假设。</p>\n<ul>\n<li>标签是连续的（正态分布，由中心极限定律所得）——线性模型。</li>\n<li>标签是二分类（多次观察可看做是二项分布）—— Logistic 模型。</li>\n<li>标签是多分类（多次观察可看做是多项分布）—— Softmax 模型。</li>\n</ul>\n<p>另外，只要 $y$ 的分布是指数分布族（exponential family distribution）的，都可以用一种通用的方法推导出 $h(x)$ 。</p>\n<p>广义线性模型的定义：</p>\n<ol>\n<li>给定特征属性 $x$ 和参数 $\\theta$ 后，$y$ 的条件概率 $P(y \\mid x; \\, \\theta)$ 服从指数分布族。</li>\n<li>预测 $T(y)$ 的期望，即计算 $E[T(y) \\mid x]$ 。</li>\n<li>$\\eta$ 与 $x$ 之间是线性的，即 $\\eta=\\theta^{\\mathsf{T}}x$ 。</li>\n</ol>\n<p>指数分布的形式如下：</p>\n<script type=\"math/tex; mode=display\">\nP(y; \\, \\eta) = b(y) \\ast \\exp(\\eta^{\\mathsf{T}}T(y)-a(\\eta))</script><h1 id=\"二项分布——-Logistic-模型的意义\"><a href=\"#二项分布——-Logistic-模型的意义\" class=\"headerlink\" title=\"二项分布—— Logistic 模型的意义\"></a>二项分布—— Logistic 模型的意义</h1><p>伯努利分布（Bernoulli distribution），也叫 0-1 分布，如果实验多次就变成了二项分布（binomial distribution）。<br>所以二项分布也叫 $n$ 重伯努利分布，或者 $n$ 重伯努利实验。<br>概率密度函数为：$P(y; \\, \\phi) = \\phi^{y}(1-\\phi)^{1-y}$ 。<br>把它变为指数分布族的形式：$P(y; \\, \\phi) = \\exp(y\\ln \\frac{\\phi}{1-\\phi}+\\ln(1-\\phi))$ 。<br>对比指数分布族，有：$\\eta=\\ln \\frac{\\phi}{1-\\phi} \\Rightarrow \\phi=\\frac{1}{1+e^{-\\eta}}$ 。<br>根据广义线性模型的第三点的线性关系。可得：</p>\n<script type=\"math/tex; mode=display\">\n\\phi = \\frac{1}{1+e^{-\\theta^{\\mathsf{T}}x}}</script><p>所以我们用 Logistic 函数来估计伯努利分布的参数。<br>直观的想就是我们估计一个东西的表现更像 0 还是更像 1，而不是准确的等于哪一个。</p>\n<h1 id=\"多项分布——-Softmax-模型的意义\"><a href=\"#多项分布——-Softmax-模型的意义\" class=\"headerlink\" title=\"多项分布—— Softmax 模型的意义\"></a>多项分布—— Softmax 模型的意义</h1><p>多项分布（multinomial distribution）也是 $n$ 重实验，只不过每次不是伯努利分布，而是有 $k$ 个选择的“伯努利分布”。跟推导 Logistic 模型的手法相似，将多项分布化为指数分布族，在考虑线性关系，可得：</p>\n<script type=\"math/tex; mode=display\">\nP(y^{(i)}=j \\mid x^{(i)}; \\, \\theta)=\\frac{e^{\\theta_{j}^{\\mathsf{T}}x^{(i)}}}{\\sum_k e^{\\theta_{k}^{\\mathsf{T}}x^{(i)}}}</script><p>注意在推导中有一个小技巧，就是 Softmax 模型总是有一个“冗余”的参数，道理很简单，如果我们有 $k$ 个分类，并且一个东西的表现不太像某 $k-1$ 类的话，那必然猜测它属于第 $k$ 类。</p>\n<p>另外，当 $k=2$ 时，Softmax 模型退化为 Logistic 模型。</p>\n"},{"title":"给程序员们看的统计公式","date":"2017-10-12T01:56:30.000Z","description":"程序员用得到的一些统计公式的总结。","_content":"\n# 与平均数有关的公式\n\n## 修正后的标准差\n\n标准差是一个反映出数据分散的多散的数字。它往往和平均数一起给出。\n$$\ns = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^{N}(x_{i}-\\bar{x})^{2}}\n$$\n其中\n\n- $N$ 是样本数\n- $x_{i}$ 是第 $i$ 个样本的值\n- $\\bar{x}$ 是样本的平均值\n\n## 标准误差\n\n从统计学的角度讲，“平均”只是一个对平均值的估计，这个估计的不确定性由标准误差来衡量。\n$$\nSE = \\frac{s}{\\sqrt{N}}\n$$\n\n## 由期望给出的置信区间\n\n置信区间反映了在某一置信水平下，统计假设不会被拒绝。所以由期望给出的置信区间反映了一系列可能的平均值，这些平均值作为对数据平均值的估计都不会被拒绝。\n$$\nCI = \\bar{x} \\pm t_{\\alpha/2} SE\n$$\n其中\n\n- $\\alpha$ 是显著性水平，一个典型的选择是 5% ，（ 1 减去置信水平）\n- $t_{\\alpha/2}$ 是自由度为 $N-1$ 的 t 分布的分位点\n\n## 两样本 t 检验\n\n两样本的 t 检验可以告诉你两组样本的平均数是否一样。\n\n检验统计量由下式给出\n$$\nt = \\frac{\\bar{x_{1}} - \\bar{x_{2}}}{\\sqrt{s_{1}^{2}/n_{1}+s_{2}^{2}/n_{2}}}\n$$\n平均数相同的假设将在 $\\lvert t \\rvert$ 大于自由度为\n$$\ndf = \\frac{(s_{1}^{2}/n_{1}+s_{2}^{2}/n_{2})^2}{(s_{1}^{2}/n_{1})^{2}/(n_{1}-1)+(s_{2}^{2}/n_{2})^{2}/(n_{2}-1)}\n$$\n的 t 分布的 $1-\\alpha /2$ 分位点时被拒绝。\n\n# 与比例有关的统计公式\n\n## 伯努利分布的参数的置信区间\n\n伯努利分布的参数是两分类结果中某个事件的比例。（比如抛硬币是出现正面的次数。）\n$$\nCI = \\left( p + \\frac{z_{\\alpha / 2}^{2}}{2N} \\pm z_{\\alpha / 2}\\sqrt{[p(1-p)+z_{\\alpha / 2}/4N] / N} \\right) / (1+z_{\\alpha / 2}^{2}/N)\n$$\n其中\n\n- $p$ 是你所感兴趣的事件被观察到的比例\n- $z_{\\alpha / 2}$ 是正态分布的 $1-\\alpha / 2$ 分位点\n\n## 多项分布的参数的置信区间\n\n$$\nCI = \\left( p_{j} + \\frac{z_{\\alpha / 2}^{2}}{2N} \\pm z_{\\alpha / 2}\\sqrt{[p_{j}(1-p_{j})+z_{\\alpha / 2}/4N] / N} \\right) / (1+z_{\\alpha / 2}^{2}/N)\n$$\n\n## 卡方检验\n\n皮尔逊卡方检验可以检测出在一个表中每一行的样本频数是不是随着列的不同而变得不同（是否存在统计相关性）。\n\n检验统计量\n$$\nX^{2} = \\sum_{i=1}^{n} \\sum_{j=1}^{m} \\frac{(O_{i,j}-E_{i,j})^{2}}{E_{i,j}}\n$$\n其中\n\n- $n$ 是行数\n- $m$ 是列数\n- $O_{i,j}$ 是第 $i$ 行第 $j$ 列的观测频数\n- $E_{i,j}$ 是第 $i$ 行第 $j$ 列的期望频数\n\n期望频数由下式给出\n$$\nE_{i,j} = \\frac{\\sum_{k=1}^{n} O_{k,j} \\sum_{l=1}^{m} O_{i,l}}{N}\n$$\n其中\n\n- $N$ 是表中所有计数的总和\n\n我们将在以下条件下认为存在统计相关性：$X^{2}$ 大于自由度为 $(m-1) \\times (n-1)$ 的 $\\chi^{2}$ 分布的 $1-\\alpha$ 分位点。\n\n# 与计数数据有关的统计公式\n\n## 泊松分布的标准差\n\n$$\n\\sigma = \\sqrt{\\lambda}\n$$\n\n## 泊松分布参数的置信区间\n\n$$\nCI = \\left( \\frac{\\gamma^{-1}(\\alpha / 2,c)}{t},\\frac{\\gamma^{-1}(1 - \\alpha / 2,c+1)}{t} \\right)\n$$\n\n其中\n\n- $c$ 是在经过 $t$ 个时间区段后被观测到的事件数\n- $\\gamma^{-1}(p, c)$ 是低阶不完全伽马函数的反函数\n\n## 两个泊松分布参数的条件检验\n\n不要这样做：观测到 5 个，变化是 -2 个，所以减少了 28.57%。\n\n从统计学的观点看，5 个与 7 个是没有明显区别的。在报告减少了很多之前，先做好两个泊松分布的平均值的条件检验。\n\np 值由下式给出\n$$\np = 2 \\times \\frac{c!}{t^{c}} \\times \\min \\left\\{ \\sum_{i=0}^{c_{1}}\\frac{t_{1}^{i}t_{2}^{c-i}}{i!(c-i!)}, \\sum_{i=c_{1}}^{c}\\frac{t_{1}^{i}t_{2}^{c-i}}{i!(c-i!)} \\right\\}\n$$\n其中\n\n- 观测结果 1 历经了 $t_{1}$ 个时间区段，由 $c_{1}$ 个事件组成\n- 观测结果 2 历经了 $t_{2}$ 个时间区段，由 $c_{2}$ 个事件组成\n- $c = c_{1} + c_{2}$ ，$t = t_{1}+t_{2}$ \n\n","source":"_posts/statistical-formulars-for-programmers.md","raw":"---\ntitle: 给程序员们看的统计公式\ndate: 2017-10-12 09:56:30\ncategories: Mathematics\ntags: \n     - Statistics\ndescription: 程序员用得到的一些统计公式的总结。\n---\n\n# 与平均数有关的公式\n\n## 修正后的标准差\n\n标准差是一个反映出数据分散的多散的数字。它往往和平均数一起给出。\n$$\ns = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^{N}(x_{i}-\\bar{x})^{2}}\n$$\n其中\n\n- $N$ 是样本数\n- $x_{i}$ 是第 $i$ 个样本的值\n- $\\bar{x}$ 是样本的平均值\n\n## 标准误差\n\n从统计学的角度讲，“平均”只是一个对平均值的估计，这个估计的不确定性由标准误差来衡量。\n$$\nSE = \\frac{s}{\\sqrt{N}}\n$$\n\n## 由期望给出的置信区间\n\n置信区间反映了在某一置信水平下，统计假设不会被拒绝。所以由期望给出的置信区间反映了一系列可能的平均值，这些平均值作为对数据平均值的估计都不会被拒绝。\n$$\nCI = \\bar{x} \\pm t_{\\alpha/2} SE\n$$\n其中\n\n- $\\alpha$ 是显著性水平，一个典型的选择是 5% ，（ 1 减去置信水平）\n- $t_{\\alpha/2}$ 是自由度为 $N-1$ 的 t 分布的分位点\n\n## 两样本 t 检验\n\n两样本的 t 检验可以告诉你两组样本的平均数是否一样。\n\n检验统计量由下式给出\n$$\nt = \\frac{\\bar{x_{1}} - \\bar{x_{2}}}{\\sqrt{s_{1}^{2}/n_{1}+s_{2}^{2}/n_{2}}}\n$$\n平均数相同的假设将在 $\\lvert t \\rvert$ 大于自由度为\n$$\ndf = \\frac{(s_{1}^{2}/n_{1}+s_{2}^{2}/n_{2})^2}{(s_{1}^{2}/n_{1})^{2}/(n_{1}-1)+(s_{2}^{2}/n_{2})^{2}/(n_{2}-1)}\n$$\n的 t 分布的 $1-\\alpha /2$ 分位点时被拒绝。\n\n# 与比例有关的统计公式\n\n## 伯努利分布的参数的置信区间\n\n伯努利分布的参数是两分类结果中某个事件的比例。（比如抛硬币是出现正面的次数。）\n$$\nCI = \\left( p + \\frac{z_{\\alpha / 2}^{2}}{2N} \\pm z_{\\alpha / 2}\\sqrt{[p(1-p)+z_{\\alpha / 2}/4N] / N} \\right) / (1+z_{\\alpha / 2}^{2}/N)\n$$\n其中\n\n- $p$ 是你所感兴趣的事件被观察到的比例\n- $z_{\\alpha / 2}$ 是正态分布的 $1-\\alpha / 2$ 分位点\n\n## 多项分布的参数的置信区间\n\n$$\nCI = \\left( p_{j} + \\frac{z_{\\alpha / 2}^{2}}{2N} \\pm z_{\\alpha / 2}\\sqrt{[p_{j}(1-p_{j})+z_{\\alpha / 2}/4N] / N} \\right) / (1+z_{\\alpha / 2}^{2}/N)\n$$\n\n## 卡方检验\n\n皮尔逊卡方检验可以检测出在一个表中每一行的样本频数是不是随着列的不同而变得不同（是否存在统计相关性）。\n\n检验统计量\n$$\nX^{2} = \\sum_{i=1}^{n} \\sum_{j=1}^{m} \\frac{(O_{i,j}-E_{i,j})^{2}}{E_{i,j}}\n$$\n其中\n\n- $n$ 是行数\n- $m$ 是列数\n- $O_{i,j}$ 是第 $i$ 行第 $j$ 列的观测频数\n- $E_{i,j}$ 是第 $i$ 行第 $j$ 列的期望频数\n\n期望频数由下式给出\n$$\nE_{i,j} = \\frac{\\sum_{k=1}^{n} O_{k,j} \\sum_{l=1}^{m} O_{i,l}}{N}\n$$\n其中\n\n- $N$ 是表中所有计数的总和\n\n我们将在以下条件下认为存在统计相关性：$X^{2}$ 大于自由度为 $(m-1) \\times (n-1)$ 的 $\\chi^{2}$ 分布的 $1-\\alpha$ 分位点。\n\n# 与计数数据有关的统计公式\n\n## 泊松分布的标准差\n\n$$\n\\sigma = \\sqrt{\\lambda}\n$$\n\n## 泊松分布参数的置信区间\n\n$$\nCI = \\left( \\frac{\\gamma^{-1}(\\alpha / 2,c)}{t},\\frac{\\gamma^{-1}(1 - \\alpha / 2,c+1)}{t} \\right)\n$$\n\n其中\n\n- $c$ 是在经过 $t$ 个时间区段后被观测到的事件数\n- $\\gamma^{-1}(p, c)$ 是低阶不完全伽马函数的反函数\n\n## 两个泊松分布参数的条件检验\n\n不要这样做：观测到 5 个，变化是 -2 个，所以减少了 28.57%。\n\n从统计学的观点看，5 个与 7 个是没有明显区别的。在报告减少了很多之前，先做好两个泊松分布的平均值的条件检验。\n\np 值由下式给出\n$$\np = 2 \\times \\frac{c!}{t^{c}} \\times \\min \\left\\{ \\sum_{i=0}^{c_{1}}\\frac{t_{1}^{i}t_{2}^{c-i}}{i!(c-i!)}, \\sum_{i=c_{1}}^{c}\\frac{t_{1}^{i}t_{2}^{c-i}}{i!(c-i!)} \\right\\}\n$$\n其中\n\n- 观测结果 1 历经了 $t_{1}$ 个时间区段，由 $c_{1}$ 个事件组成\n- 观测结果 2 历经了 $t_{2}$ 个时间区段，由 $c_{2}$ 个事件组成\n- $c = c_{1} + c_{2}$ ，$t = t_{1}+t_{2}$ \n\n","slug":"statistical-formulars-for-programmers","published":1,"updated":"2021-07-19T13:03:31.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivi000kqxt6u0339qal","content":"<h1 id=\"与平均数有关的公式\"><a href=\"#与平均数有关的公式\" class=\"headerlink\" title=\"与平均数有关的公式\"></a>与平均数有关的公式</h1><h2 id=\"修正后的标准差\"><a href=\"#修正后的标准差\" class=\"headerlink\" title=\"修正后的标准差\"></a>修正后的标准差</h2><p>标准差是一个反映出数据分散的多散的数字。它往往和平均数一起给出。</p>\n<script type=\"math/tex; mode=display\">\ns = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^{N}(x_{i}-\\bar{x})^{2}}</script><p>其中</p>\n<ul>\n<li>$N$ 是样本数</li>\n<li>$x_{i}$ 是第 $i$ 个样本的值</li>\n<li>$\\bar{x}$ 是样本的平均值</li>\n</ul>\n<h2 id=\"标准误差\"><a href=\"#标准误差\" class=\"headerlink\" title=\"标准误差\"></a>标准误差</h2><p>从统计学的角度讲，“平均”只是一个对平均值的估计，这个估计的不确定性由标准误差来衡量。</p>\n<script type=\"math/tex; mode=display\">\nSE = \\frac{s}{\\sqrt{N}}</script><h2 id=\"由期望给出的置信区间\"><a href=\"#由期望给出的置信区间\" class=\"headerlink\" title=\"由期望给出的置信区间\"></a>由期望给出的置信区间</h2><p>置信区间反映了在某一置信水平下，统计假设不会被拒绝。所以由期望给出的置信区间反映了一系列可能的平均值，这些平均值作为对数据平均值的估计都不会被拒绝。</p>\n<script type=\"math/tex; mode=display\">\nCI = \\bar{x} \\pm t_{\\alpha/2} SE</script><p>其中</p>\n<ul>\n<li>$\\alpha$ 是显著性水平，一个典型的选择是 5% ，（ 1 减去置信水平）</li>\n<li>$t_{\\alpha/2}$ 是自由度为 $N-1$ 的 t 分布的分位点</li>\n</ul>\n<h2 id=\"两样本-t-检验\"><a href=\"#两样本-t-检验\" class=\"headerlink\" title=\"两样本 t 检验\"></a>两样本 t 检验</h2><p>两样本的 t 检验可以告诉你两组样本的平均数是否一样。</p>\n<p>检验统计量由下式给出</p>\n<script type=\"math/tex; mode=display\">\nt = \\frac{\\bar{x_{1}} - \\bar{x_{2}}}{\\sqrt{s_{1}^{2}/n_{1}+s_{2}^{2}/n_{2}}}</script><p>平均数相同的假设将在 $\\lvert t \\rvert$ 大于自由度为</p>\n<script type=\"math/tex; mode=display\">\ndf = \\frac{(s_{1}^{2}/n_{1}+s_{2}^{2}/n_{2})^2}{(s_{1}^{2}/n_{1})^{2}/(n_{1}-1)+(s_{2}^{2}/n_{2})^{2}/(n_{2}-1)}</script><p>的 t 分布的 $1-\\alpha /2$ 分位点时被拒绝。</p>\n<h1 id=\"与比例有关的统计公式\"><a href=\"#与比例有关的统计公式\" class=\"headerlink\" title=\"与比例有关的统计公式\"></a>与比例有关的统计公式</h1><h2 id=\"伯努利分布的参数的置信区间\"><a href=\"#伯努利分布的参数的置信区间\" class=\"headerlink\" title=\"伯努利分布的参数的置信区间\"></a>伯努利分布的参数的置信区间</h2><p>伯努利分布的参数是两分类结果中某个事件的比例。（比如抛硬币是出现正面的次数。）</p>\n<script type=\"math/tex; mode=display\">\nCI = \\left( p + \\frac{z_{\\alpha / 2}^{2}}{2N} \\pm z_{\\alpha / 2}\\sqrt{[p(1-p)+z_{\\alpha / 2}/4N] / N} \\right) / (1+z_{\\alpha / 2}^{2}/N)</script><p>其中</p>\n<ul>\n<li>$p$ 是你所感兴趣的事件被观察到的比例</li>\n<li>$z_{\\alpha / 2}$ 是正态分布的 $1-\\alpha / 2$ 分位点</li>\n</ul>\n<h2 id=\"多项分布的参数的置信区间\"><a href=\"#多项分布的参数的置信区间\" class=\"headerlink\" title=\"多项分布的参数的置信区间\"></a>多项分布的参数的置信区间</h2><script type=\"math/tex; mode=display\">\nCI = \\left( p_{j} + \\frac{z_{\\alpha / 2}^{2}}{2N} \\pm z_{\\alpha / 2}\\sqrt{[p_{j}(1-p_{j})+z_{\\alpha / 2}/4N] / N} \\right) / (1+z_{\\alpha / 2}^{2}/N)</script><h2 id=\"卡方检验\"><a href=\"#卡方检验\" class=\"headerlink\" title=\"卡方检验\"></a>卡方检验</h2><p>皮尔逊卡方检验可以检测出在一个表中每一行的样本频数是不是随着列的不同而变得不同（是否存在统计相关性）。</p>\n<p>检验统计量</p>\n<script type=\"math/tex; mode=display\">\nX^{2} = \\sum_{i=1}^{n} \\sum_{j=1}^{m} \\frac{(O_{i,j}-E_{i,j})^{2}}{E_{i,j}}</script><p>其中</p>\n<ul>\n<li>$n$ 是行数</li>\n<li>$m$ 是列数</li>\n<li>$O_{i,j}$ 是第 $i$ 行第 $j$ 列的观测频数</li>\n<li>$E_{i,j}$ 是第 $i$ 行第 $j$ 列的期望频数</li>\n</ul>\n<p>期望频数由下式给出</p>\n<script type=\"math/tex; mode=display\">\nE_{i,j} = \\frac{\\sum_{k=1}^{n} O_{k,j} \\sum_{l=1}^{m} O_{i,l}}{N}</script><p>其中</p>\n<ul>\n<li>$N$ 是表中所有计数的总和</li>\n</ul>\n<p>我们将在以下条件下认为存在统计相关性：$X^{2}$ 大于自由度为 $(m-1) \\times (n-1)$ 的 $\\chi^{2}$ 分布的 $1-\\alpha$ 分位点。</p>\n<h1 id=\"与计数数据有关的统计公式\"><a href=\"#与计数数据有关的统计公式\" class=\"headerlink\" title=\"与计数数据有关的统计公式\"></a>与计数数据有关的统计公式</h1><h2 id=\"泊松分布的标准差\"><a href=\"#泊松分布的标准差\" class=\"headerlink\" title=\"泊松分布的标准差\"></a>泊松分布的标准差</h2><script type=\"math/tex; mode=display\">\n\\sigma = \\sqrt{\\lambda}</script><h2 id=\"泊松分布参数的置信区间\"><a href=\"#泊松分布参数的置信区间\" class=\"headerlink\" title=\"泊松分布参数的置信区间\"></a>泊松分布参数的置信区间</h2><script type=\"math/tex; mode=display\">\nCI = \\left( \\frac{\\gamma^{-1}(\\alpha / 2,c)}{t},\\frac{\\gamma^{-1}(1 - \\alpha / 2,c+1)}{t} \\right)</script><p>其中</p>\n<ul>\n<li>$c$ 是在经过 $t$ 个时间区段后被观测到的事件数</li>\n<li>$\\gamma^{-1}(p, c)$ 是低阶不完全伽马函数的反函数</li>\n</ul>\n<h2 id=\"两个泊松分布参数的条件检验\"><a href=\"#两个泊松分布参数的条件检验\" class=\"headerlink\" title=\"两个泊松分布参数的条件检验\"></a>两个泊松分布参数的条件检验</h2><p>不要这样做：观测到 5 个，变化是 -2 个，所以减少了 28.57%。</p>\n<p>从统计学的观点看，5 个与 7 个是没有明显区别的。在报告减少了很多之前，先做好两个泊松分布的平均值的条件检验。</p>\n<p>p 值由下式给出</p>\n<script type=\"math/tex; mode=display\">\np = 2 \\times \\frac{c!}{t^{c}} \\times \\min \\left\\{ \\sum_{i=0}^{c_{1}}\\frac{t_{1}^{i}t_{2}^{c-i}}{i!(c-i!)}, \\sum_{i=c_{1}}^{c}\\frac{t_{1}^{i}t_{2}^{c-i}}{i!(c-i!)} \\right\\}</script><p>其中</p>\n<ul>\n<li>观测结果 1 历经了 $t_{1}$ 个时间区段，由 $c_{1}$ 个事件组成</li>\n<li>观测结果 2 历经了 $t_{2}$ 个时间区段，由 $c_{2}$ 个事件组成</li>\n<li>$c = c_{1} + c_{2}$ ，$t = t_{1}+t_{2}$ </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"与平均数有关的公式\"><a href=\"#与平均数有关的公式\" class=\"headerlink\" title=\"与平均数有关的公式\"></a>与平均数有关的公式</h1><h2 id=\"修正后的标准差\"><a href=\"#修正后的标准差\" class=\"headerlink\" title=\"修正后的标准差\"></a>修正后的标准差</h2><p>标准差是一个反映出数据分散的多散的数字。它往往和平均数一起给出。</p>\n<script type=\"math/tex; mode=display\">\ns = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^{N}(x_{i}-\\bar{x})^{2}}</script><p>其中</p>\n<ul>\n<li>$N$ 是样本数</li>\n<li>$x_{i}$ 是第 $i$ 个样本的值</li>\n<li>$\\bar{x}$ 是样本的平均值</li>\n</ul>\n<h2 id=\"标准误差\"><a href=\"#标准误差\" class=\"headerlink\" title=\"标准误差\"></a>标准误差</h2><p>从统计学的角度讲，“平均”只是一个对平均值的估计，这个估计的不确定性由标准误差来衡量。</p>\n<script type=\"math/tex; mode=display\">\nSE = \\frac{s}{\\sqrt{N}}</script><h2 id=\"由期望给出的置信区间\"><a href=\"#由期望给出的置信区间\" class=\"headerlink\" title=\"由期望给出的置信区间\"></a>由期望给出的置信区间</h2><p>置信区间反映了在某一置信水平下，统计假设不会被拒绝。所以由期望给出的置信区间反映了一系列可能的平均值，这些平均值作为对数据平均值的估计都不会被拒绝。</p>\n<script type=\"math/tex; mode=display\">\nCI = \\bar{x} \\pm t_{\\alpha/2} SE</script><p>其中</p>\n<ul>\n<li>$\\alpha$ 是显著性水平，一个典型的选择是 5% ，（ 1 减去置信水平）</li>\n<li>$t_{\\alpha/2}$ 是自由度为 $N-1$ 的 t 分布的分位点</li>\n</ul>\n<h2 id=\"两样本-t-检验\"><a href=\"#两样本-t-检验\" class=\"headerlink\" title=\"两样本 t 检验\"></a>两样本 t 检验</h2><p>两样本的 t 检验可以告诉你两组样本的平均数是否一样。</p>\n<p>检验统计量由下式给出</p>\n<script type=\"math/tex; mode=display\">\nt = \\frac{\\bar{x_{1}} - \\bar{x_{2}}}{\\sqrt{s_{1}^{2}/n_{1}+s_{2}^{2}/n_{2}}}</script><p>平均数相同的假设将在 $\\lvert t \\rvert$ 大于自由度为</p>\n<script type=\"math/tex; mode=display\">\ndf = \\frac{(s_{1}^{2}/n_{1}+s_{2}^{2}/n_{2})^2}{(s_{1}^{2}/n_{1})^{2}/(n_{1}-1)+(s_{2}^{2}/n_{2})^{2}/(n_{2}-1)}</script><p>的 t 分布的 $1-\\alpha /2$ 分位点时被拒绝。</p>\n<h1 id=\"与比例有关的统计公式\"><a href=\"#与比例有关的统计公式\" class=\"headerlink\" title=\"与比例有关的统计公式\"></a>与比例有关的统计公式</h1><h2 id=\"伯努利分布的参数的置信区间\"><a href=\"#伯努利分布的参数的置信区间\" class=\"headerlink\" title=\"伯努利分布的参数的置信区间\"></a>伯努利分布的参数的置信区间</h2><p>伯努利分布的参数是两分类结果中某个事件的比例。（比如抛硬币是出现正面的次数。）</p>\n<script type=\"math/tex; mode=display\">\nCI = \\left( p + \\frac{z_{\\alpha / 2}^{2}}{2N} \\pm z_{\\alpha / 2}\\sqrt{[p(1-p)+z_{\\alpha / 2}/4N] / N} \\right) / (1+z_{\\alpha / 2}^{2}/N)</script><p>其中</p>\n<ul>\n<li>$p$ 是你所感兴趣的事件被观察到的比例</li>\n<li>$z_{\\alpha / 2}$ 是正态分布的 $1-\\alpha / 2$ 分位点</li>\n</ul>\n<h2 id=\"多项分布的参数的置信区间\"><a href=\"#多项分布的参数的置信区间\" class=\"headerlink\" title=\"多项分布的参数的置信区间\"></a>多项分布的参数的置信区间</h2><script type=\"math/tex; mode=display\">\nCI = \\left( p_{j} + \\frac{z_{\\alpha / 2}^{2}}{2N} \\pm z_{\\alpha / 2}\\sqrt{[p_{j}(1-p_{j})+z_{\\alpha / 2}/4N] / N} \\right) / (1+z_{\\alpha / 2}^{2}/N)</script><h2 id=\"卡方检验\"><a href=\"#卡方检验\" class=\"headerlink\" title=\"卡方检验\"></a>卡方检验</h2><p>皮尔逊卡方检验可以检测出在一个表中每一行的样本频数是不是随着列的不同而变得不同（是否存在统计相关性）。</p>\n<p>检验统计量</p>\n<script type=\"math/tex; mode=display\">\nX^{2} = \\sum_{i=1}^{n} \\sum_{j=1}^{m} \\frac{(O_{i,j}-E_{i,j})^{2}}{E_{i,j}}</script><p>其中</p>\n<ul>\n<li>$n$ 是行数</li>\n<li>$m$ 是列数</li>\n<li>$O_{i,j}$ 是第 $i$ 行第 $j$ 列的观测频数</li>\n<li>$E_{i,j}$ 是第 $i$ 行第 $j$ 列的期望频数</li>\n</ul>\n<p>期望频数由下式给出</p>\n<script type=\"math/tex; mode=display\">\nE_{i,j} = \\frac{\\sum_{k=1}^{n} O_{k,j} \\sum_{l=1}^{m} O_{i,l}}{N}</script><p>其中</p>\n<ul>\n<li>$N$ 是表中所有计数的总和</li>\n</ul>\n<p>我们将在以下条件下认为存在统计相关性：$X^{2}$ 大于自由度为 $(m-1) \\times (n-1)$ 的 $\\chi^{2}$ 分布的 $1-\\alpha$ 分位点。</p>\n<h1 id=\"与计数数据有关的统计公式\"><a href=\"#与计数数据有关的统计公式\" class=\"headerlink\" title=\"与计数数据有关的统计公式\"></a>与计数数据有关的统计公式</h1><h2 id=\"泊松分布的标准差\"><a href=\"#泊松分布的标准差\" class=\"headerlink\" title=\"泊松分布的标准差\"></a>泊松分布的标准差</h2><script type=\"math/tex; mode=display\">\n\\sigma = \\sqrt{\\lambda}</script><h2 id=\"泊松分布参数的置信区间\"><a href=\"#泊松分布参数的置信区间\" class=\"headerlink\" title=\"泊松分布参数的置信区间\"></a>泊松分布参数的置信区间</h2><script type=\"math/tex; mode=display\">\nCI = \\left( \\frac{\\gamma^{-1}(\\alpha / 2,c)}{t},\\frac{\\gamma^{-1}(1 - \\alpha / 2,c+1)}{t} \\right)</script><p>其中</p>\n<ul>\n<li>$c$ 是在经过 $t$ 个时间区段后被观测到的事件数</li>\n<li>$\\gamma^{-1}(p, c)$ 是低阶不完全伽马函数的反函数</li>\n</ul>\n<h2 id=\"两个泊松分布参数的条件检验\"><a href=\"#两个泊松分布参数的条件检验\" class=\"headerlink\" title=\"两个泊松分布参数的条件检验\"></a>两个泊松分布参数的条件检验</h2><p>不要这样做：观测到 5 个，变化是 -2 个，所以减少了 28.57%。</p>\n<p>从统计学的观点看，5 个与 7 个是没有明显区别的。在报告减少了很多之前，先做好两个泊松分布的平均值的条件检验。</p>\n<p>p 值由下式给出</p>\n<script type=\"math/tex; mode=display\">\np = 2 \\times \\frac{c!}{t^{c}} \\times \\min \\left\\{ \\sum_{i=0}^{c_{1}}\\frac{t_{1}^{i}t_{2}^{c-i}}{i!(c-i!)}, \\sum_{i=c_{1}}^{c}\\frac{t_{1}^{i}t_{2}^{c-i}}{i!(c-i!)} \\right\\}</script><p>其中</p>\n<ul>\n<li>观测结果 1 历经了 $t_{1}$ 个时间区段，由 $c_{1}$ 个事件组成</li>\n<li>观测结果 2 历经了 $t_{2}$ 个时间区段，由 $c_{2}$ 个事件组成</li>\n<li>$c = c_{1} + c_{2}$ ，$t = t_{1}+t_{2}$ </li>\n</ul>\n"},{"title":"浅说范数规范化（二）—— 核范数","date":"2017-09-09T01:42:10.000Z","description":"浅说机器学习问题中出现的范数规则化问题，本篇着重讲核范数。","_content":"\n# 矩阵补全（matrix completion）问题\n\n这个问题最早火起来是因为 Netflix 公司悬赏 100 万美金的公开挑战，奖励给能够改进公司现行矩阵补全算法 10% 以上最优胜的队伍。最后的结果是 2009 年 9 月 BellKors Pragmatic 拿走了奖金。\n\n什么是矩阵补全问题呢？用 Netflix 的数据集来作说明。\n简单的来说就是一个电影评分系统要根据非常稀疏的现有数据集（一个用户可能只 rate 了几十部电影）来推断整个用户群对不同电影的评分。\n\n这个问题在推荐系统、图像处理等方面都有广泛的应用。\n接着，这类问题一般都有隐含的假设，即最终的矩阵应该是低秩（low rank）的。\n这其实也很好理解，因为我们一般会觉得：1、不同用户对于电影的偏好可以分成聚落（cliques），比如按照观众的年龄来分，年龄相仿的观众口味往往相近；2、电影也可以分成大致几种不同的题材（genres），如：爱情片、动作片、科幻片等。所以会有低秩的特性。\n简单来说，这个矩阵的行和列会有“协同”的特性，这也是这个问题的别名协同过滤（collaborative filtering）的得名原因。\n另外，低秩限制会比较实用，人们都比较喜欢得到稀疏解，使得整个问题更有可诠释性。\n\n所以这个问题的目标函数被定义成下面的样子：\n$$\n\\begin{aligned}\n&\\mathrm{minimize} \\quad  \\mathrm{rank}(Z) \\\\\n&\\text{subject to} \\quad  \\sum_{(i,j):\\text{Observed}} (Z_{ij} - X_{ij})^{2} \\le \\delta\n\\end{aligned} \\\\\n\\text{Impute missing } X_{ij} \\text{ with } Z_{ij}\n$$\n然而问题来了，这个问题是非凸的，而且这种问题的规模都非常大，没办法在如此庞大的 NP-hard 问题中找到全局最优解。\n\n早先时候，人们使用了一些启发式算法。\n后来人们发现，核范数是矩阵秩的一个很好的凸近似。\n（原因有点类似与 L1 范数是 L0 范数的一个凸近似。）\n下面就介绍一下核范数的一些性质。\n\n# 核范数\n\n## 定义\n\n矩阵 $X$ 的核范数定义为：\n$$\n\\lVert X \\rVert _{\\ast} = \\mathrm{tr}\\left( \\sqrt{X^{\\mathsf{T}}X} \\right)\n$$\n显而易见，核范数也可以等价地定义为矩阵特征值的和，考虑 $X$ 的特征值分解 $X=U \\Sigma V^{\\mathsf{T}}$ 显然有：\n$$\n\\begin{aligned}\n\\mathrm{tr}\\left( \\sqrt{X^{\\mathsf{T}}X} \\right) & =  \\mathrm{tr} \\left( \\sqrt{(U \\Sigma V^{\\mathsf{T}})^{\\mathsf{T}}U \\Sigma V^{\\mathsf{T}}} \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V \\Sigma^{\\mathsf{T}} U^{\\mathsf{T}} U \\Sigma V^{\\mathsf{T}}} \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V \\Sigma^{2} V^{\\mathsf{T}}} \\right)  \\quad \\left( \\Sigma^{\\mathsf{T}} = \\Sigma \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V^{\\mathsf{T}} V \\Sigma^{2}} \\right) \\\\\n& = \\mathrm{tr} (\\Sigma)\n\\end{aligned}\n$$\n\n## 凸性的证明\n\n首先，矩阵诱导范数是凸的，即：令 $ f_x (A) = \\lVert Ax \\rVert _{p} \\quad (p \\ge 1) $ ，则 $f_x$ 凸，故 $\\lVert A \\rVert _{p} = \\sup\\limits_{\\Vert x \\rVert _{p}=1} f_x (A)$ 凸。特别的，$\\lVert A \\rVert_{2}$ 凸。\n因为 $\\lVert A \\rVert_{\\ast}$ 和 $\\lVert A \\rVert_{2}$ 是对偶范数，所以 $\\lVert A \\rVert_{\\ast}$ 凸。（$\\lVert A \\rVert_{\\ast}=\\sup \\limits_{\\lVert X \\rVert_{2}=1} \\mathrm{tr} \\left( A^{\\mathsf{T}}X \\right)$）\n\n## 梯度的求解\n\n基于上述 S.V.D 的假设，我们可以轻易地得到，\n$$\n\\frac{\\partial \\lVert X \\rVert_{\\ast}}{\\partial X} = \\frac{\\partial \\mathrm{tr} (\\Sigma)}{\\partial X} = \\frac{\\mathrm{tr} (\\partial \\Sigma)}{\\partial X}\n$$\n所以我们需要解出 $\\partial \\Sigma$ ，\n考虑 $X=U \\Sigma V^{\\mathsf{T}}$ ，因此：\n$$\n\\begin{aligned}\n& & \\partial X & = (\\partial U )\\Sigma V^{\\mathsf{T}} + U (\\partial \\Sigma) V^{\\mathsf{T}} + U \\Sigma (\\partial V^{\\mathsf{T}}) \\\\\n&\\Rightarrow \\, & \\partial \\Sigma & = U^{\\mathsf{T}} (\\partial X) V - U^{\\mathsf{T}} (\\partial U) \\Sigma - \\Sigma (\\partial V^{\\mathsf{T}}) V \\\\\n& & & = U^{\\mathsf{T}} (\\partial X) V \\qquad (- U^{\\mathsf{T}} (\\partial U) \\Sigma - \\Sigma (\\partial V^{\\mathsf{T}}) V = 0)\n\\end{aligned}\n$$\n所以：\n$$\n\\frac{\\partial \\lVert X \\rVert_{\\ast}}{\\partial X} = \\frac{\\mathrm{tr} (\\partial \\Sigma)}{\\partial X} = \\frac{\\mathrm{tr} (U^{\\mathsf{T}} (\\partial X)V)}{\\partial X} = \\frac{\\mathrm{tr} (V U^{\\mathsf{T}} (\\partial X))}{\\partial X} = (V U^{\\mathsf{T}})^{\\mathsf{T}} = U V^{\\mathsf{T}}\n$$\n\n# 低秩问题的近似\n\n定义了核范数以后，我们就可以将低秩优化问题近似成相应的核范数优化问题了。\n即：\n$$\n\\begin{aligned}\n&\\mathrm{minimize} \\quad  \\lVert Z \\rVert_{\\ast} \\\\\n&\\text{subject to} \\quad  \\sum_{(i,j):\\text{Observed}} (Z_{ij} - X_{ij})^{2} \\le \\delta\n\\end{aligned} \\\\\n\\text{Impute missing } X_{ij} \\text{ with } Z_{ij}\n$$\n","source":"_posts/norm-regularization-02.md","raw":"---\ntitle: 浅说范数规范化（二）—— 核范数\ndate: 2017-09-09 09:42:10\ncategories: ML\ntags:\n      - Norm regularization\n      - Convex optimization\n      - Matrix theory\ndescription: 浅说机器学习问题中出现的范数规则化问题，本篇着重讲核范数。\n---\n\n# 矩阵补全（matrix completion）问题\n\n这个问题最早火起来是因为 Netflix 公司悬赏 100 万美金的公开挑战，奖励给能够改进公司现行矩阵补全算法 10% 以上最优胜的队伍。最后的结果是 2009 年 9 月 BellKors Pragmatic 拿走了奖金。\n\n什么是矩阵补全问题呢？用 Netflix 的数据集来作说明。\n简单的来说就是一个电影评分系统要根据非常稀疏的现有数据集（一个用户可能只 rate 了几十部电影）来推断整个用户群对不同电影的评分。\n\n这个问题在推荐系统、图像处理等方面都有广泛的应用。\n接着，这类问题一般都有隐含的假设，即最终的矩阵应该是低秩（low rank）的。\n这其实也很好理解，因为我们一般会觉得：1、不同用户对于电影的偏好可以分成聚落（cliques），比如按照观众的年龄来分，年龄相仿的观众口味往往相近；2、电影也可以分成大致几种不同的题材（genres），如：爱情片、动作片、科幻片等。所以会有低秩的特性。\n简单来说，这个矩阵的行和列会有“协同”的特性，这也是这个问题的别名协同过滤（collaborative filtering）的得名原因。\n另外，低秩限制会比较实用，人们都比较喜欢得到稀疏解，使得整个问题更有可诠释性。\n\n所以这个问题的目标函数被定义成下面的样子：\n$$\n\\begin{aligned}\n&\\mathrm{minimize} \\quad  \\mathrm{rank}(Z) \\\\\n&\\text{subject to} \\quad  \\sum_{(i,j):\\text{Observed}} (Z_{ij} - X_{ij})^{2} \\le \\delta\n\\end{aligned} \\\\\n\\text{Impute missing } X_{ij} \\text{ with } Z_{ij}\n$$\n然而问题来了，这个问题是非凸的，而且这种问题的规模都非常大，没办法在如此庞大的 NP-hard 问题中找到全局最优解。\n\n早先时候，人们使用了一些启发式算法。\n后来人们发现，核范数是矩阵秩的一个很好的凸近似。\n（原因有点类似与 L1 范数是 L0 范数的一个凸近似。）\n下面就介绍一下核范数的一些性质。\n\n# 核范数\n\n## 定义\n\n矩阵 $X$ 的核范数定义为：\n$$\n\\lVert X \\rVert _{\\ast} = \\mathrm{tr}\\left( \\sqrt{X^{\\mathsf{T}}X} \\right)\n$$\n显而易见，核范数也可以等价地定义为矩阵特征值的和，考虑 $X$ 的特征值分解 $X=U \\Sigma V^{\\mathsf{T}}$ 显然有：\n$$\n\\begin{aligned}\n\\mathrm{tr}\\left( \\sqrt{X^{\\mathsf{T}}X} \\right) & =  \\mathrm{tr} \\left( \\sqrt{(U \\Sigma V^{\\mathsf{T}})^{\\mathsf{T}}U \\Sigma V^{\\mathsf{T}}} \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V \\Sigma^{\\mathsf{T}} U^{\\mathsf{T}} U \\Sigma V^{\\mathsf{T}}} \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V \\Sigma^{2} V^{\\mathsf{T}}} \\right)  \\quad \\left( \\Sigma^{\\mathsf{T}} = \\Sigma \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V^{\\mathsf{T}} V \\Sigma^{2}} \\right) \\\\\n& = \\mathrm{tr} (\\Sigma)\n\\end{aligned}\n$$\n\n## 凸性的证明\n\n首先，矩阵诱导范数是凸的，即：令 $ f_x (A) = \\lVert Ax \\rVert _{p} \\quad (p \\ge 1) $ ，则 $f_x$ 凸，故 $\\lVert A \\rVert _{p} = \\sup\\limits_{\\Vert x \\rVert _{p}=1} f_x (A)$ 凸。特别的，$\\lVert A \\rVert_{2}$ 凸。\n因为 $\\lVert A \\rVert_{\\ast}$ 和 $\\lVert A \\rVert_{2}$ 是对偶范数，所以 $\\lVert A \\rVert_{\\ast}$ 凸。（$\\lVert A \\rVert_{\\ast}=\\sup \\limits_{\\lVert X \\rVert_{2}=1} \\mathrm{tr} \\left( A^{\\mathsf{T}}X \\right)$）\n\n## 梯度的求解\n\n基于上述 S.V.D 的假设，我们可以轻易地得到，\n$$\n\\frac{\\partial \\lVert X \\rVert_{\\ast}}{\\partial X} = \\frac{\\partial \\mathrm{tr} (\\Sigma)}{\\partial X} = \\frac{\\mathrm{tr} (\\partial \\Sigma)}{\\partial X}\n$$\n所以我们需要解出 $\\partial \\Sigma$ ，\n考虑 $X=U \\Sigma V^{\\mathsf{T}}$ ，因此：\n$$\n\\begin{aligned}\n& & \\partial X & = (\\partial U )\\Sigma V^{\\mathsf{T}} + U (\\partial \\Sigma) V^{\\mathsf{T}} + U \\Sigma (\\partial V^{\\mathsf{T}}) \\\\\n&\\Rightarrow \\, & \\partial \\Sigma & = U^{\\mathsf{T}} (\\partial X) V - U^{\\mathsf{T}} (\\partial U) \\Sigma - \\Sigma (\\partial V^{\\mathsf{T}}) V \\\\\n& & & = U^{\\mathsf{T}} (\\partial X) V \\qquad (- U^{\\mathsf{T}} (\\partial U) \\Sigma - \\Sigma (\\partial V^{\\mathsf{T}}) V = 0)\n\\end{aligned}\n$$\n所以：\n$$\n\\frac{\\partial \\lVert X \\rVert_{\\ast}}{\\partial X} = \\frac{\\mathrm{tr} (\\partial \\Sigma)}{\\partial X} = \\frac{\\mathrm{tr} (U^{\\mathsf{T}} (\\partial X)V)}{\\partial X} = \\frac{\\mathrm{tr} (V U^{\\mathsf{T}} (\\partial X))}{\\partial X} = (V U^{\\mathsf{T}})^{\\mathsf{T}} = U V^{\\mathsf{T}}\n$$\n\n# 低秩问题的近似\n\n定义了核范数以后，我们就可以将低秩优化问题近似成相应的核范数优化问题了。\n即：\n$$\n\\begin{aligned}\n&\\mathrm{minimize} \\quad  \\lVert Z \\rVert_{\\ast} \\\\\n&\\text{subject to} \\quad  \\sum_{(i,j):\\text{Observed}} (Z_{ij} - X_{ij})^{2} \\le \\delta\n\\end{aligned} \\\\\n\\text{Impute missing } X_{ij} \\text{ with } Z_{ij}\n$$\n","slug":"norm-regularization-02","published":1,"updated":"2021-07-20T15:07:34.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivi000lqxt60e8fbxb4","content":"<h1 id=\"矩阵补全（matrix-completion）问题\"><a href=\"#矩阵补全（matrix-completion）问题\" class=\"headerlink\" title=\"矩阵补全（matrix completion）问题\"></a>矩阵补全（matrix completion）问题</h1><p>这个问题最早火起来是因为 Netflix 公司悬赏 100 万美金的公开挑战，奖励给能够改进公司现行矩阵补全算法 10% 以上最优胜的队伍。最后的结果是 2009 年 9 月 BellKors Pragmatic 拿走了奖金。</p>\n<p>什么是矩阵补全问题呢？用 Netflix 的数据集来作说明。<br>简单的来说就是一个电影评分系统要根据非常稀疏的现有数据集（一个用户可能只 rate 了几十部电影）来推断整个用户群对不同电影的评分。</p>\n<p>这个问题在推荐系统、图像处理等方面都有广泛的应用。<br>接着，这类问题一般都有隐含的假设，即最终的矩阵应该是低秩（low rank）的。<br>这其实也很好理解，因为我们一般会觉得：1、不同用户对于电影的偏好可以分成聚落（cliques），比如按照观众的年龄来分，年龄相仿的观众口味往往相近；2、电影也可以分成大致几种不同的题材（genres），如：爱情片、动作片、科幻片等。所以会有低秩的特性。<br>简单来说，这个矩阵的行和列会有“协同”的特性，这也是这个问题的别名协同过滤（collaborative filtering）的得名原因。<br>另外，低秩限制会比较实用，人们都比较喜欢得到稀疏解，使得整个问题更有可诠释性。</p>\n<p>所以这个问题的目标函数被定义成下面的样子：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n&\\mathrm{minimize} \\quad  \\mathrm{rank}(Z) \\\\\n&\\text{subject to} \\quad  \\sum_{(i,j):\\text{Observed}} (Z_{ij} - X_{ij})^{2} \\le \\delta\n\\end{aligned} \\\\\n\\text{Impute missing } X_{ij} \\text{ with } Z_{ij}</script><p>然而问题来了，这个问题是非凸的，而且这种问题的规模都非常大，没办法在如此庞大的 NP-hard 问题中找到全局最优解。</p>\n<p>早先时候，人们使用了一些启发式算法。<br>后来人们发现，核范数是矩阵秩的一个很好的凸近似。<br>（原因有点类似与 L1 范数是 L0 范数的一个凸近似。）<br>下面就介绍一下核范数的一些性质。</p>\n<h1 id=\"核范数\"><a href=\"#核范数\" class=\"headerlink\" title=\"核范数\"></a>核范数</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>矩阵 $X$ 的核范数定义为：</p>\n<script type=\"math/tex; mode=display\">\n\\lVert X \\rVert _{\\ast} = \\mathrm{tr}\\left( \\sqrt{X^{\\mathsf{T}}X} \\right)</script><p>显而易见，核范数也可以等价地定义为矩阵特征值的和，考虑 $X$ 的特征值分解 $X=U \\Sigma V^{\\mathsf{T}}$ 显然有：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\mathrm{tr}\\left( \\sqrt{X^{\\mathsf{T}}X} \\right) & =  \\mathrm{tr} \\left( \\sqrt{(U \\Sigma V^{\\mathsf{T}})^{\\mathsf{T}}U \\Sigma V^{\\mathsf{T}}} \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V \\Sigma^{\\mathsf{T}} U^{\\mathsf{T}} U \\Sigma V^{\\mathsf{T}}} \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V \\Sigma^{2} V^{\\mathsf{T}}} \\right)  \\quad \\left( \\Sigma^{\\mathsf{T}} = \\Sigma \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V^{\\mathsf{T}} V \\Sigma^{2}} \\right) \\\\\n& = \\mathrm{tr} (\\Sigma)\n\\end{aligned}</script><h2 id=\"凸性的证明\"><a href=\"#凸性的证明\" class=\"headerlink\" title=\"凸性的证明\"></a>凸性的证明</h2><p>首先，矩阵诱导范数是凸的，即：令 $ f_x (A) = \\lVert Ax \\rVert _{p} \\quad (p \\ge 1) $ ，则 $f_x$ 凸，故 $\\lVert A \\rVert _{p} = \\sup\\limits_{\\Vert x \\rVert _{p}=1} f_x (A)$ 凸。特别的，$\\lVert A \\rVert_{2}$ 凸。<br>因为 $\\lVert A \\rVert_{\\ast}$ 和 $\\lVert A \\rVert_{2}$ 是对偶范数，所以 $\\lVert A \\rVert_{\\ast}$ 凸。（$\\lVert A \\rVert_{\\ast}=\\sup \\limits_{\\lVert X \\rVert_{2}=1} \\mathrm{tr} \\left( A^{\\mathsf{T}}X \\right)$）</p>\n<h2 id=\"梯度的求解\"><a href=\"#梯度的求解\" class=\"headerlink\" title=\"梯度的求解\"></a>梯度的求解</h2><p>基于上述 S.V.D 的假设，我们可以轻易地得到，</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\partial \\lVert X \\rVert_{\\ast}}{\\partial X} = \\frac{\\partial \\mathrm{tr} (\\Sigma)}{\\partial X} = \\frac{\\mathrm{tr} (\\partial \\Sigma)}{\\partial X}</script><p>所以我们需要解出 $\\partial \\Sigma$ ，<br>考虑 $X=U \\Sigma V^{\\mathsf{T}}$ ，因此：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n& & \\partial X & = (\\partial U )\\Sigma V^{\\mathsf{T}} + U (\\partial \\Sigma) V^{\\mathsf{T}} + U \\Sigma (\\partial V^{\\mathsf{T}}) \\\\\n&\\Rightarrow \\, & \\partial \\Sigma & = U^{\\mathsf{T}} (\\partial X) V - U^{\\mathsf{T}} (\\partial U) \\Sigma - \\Sigma (\\partial V^{\\mathsf{T}}) V \\\\\n& & & = U^{\\mathsf{T}} (\\partial X) V \\qquad (- U^{\\mathsf{T}} (\\partial U) \\Sigma - \\Sigma (\\partial V^{\\mathsf{T}}) V = 0)\n\\end{aligned}</script><p>所以：</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\partial \\lVert X \\rVert_{\\ast}}{\\partial X} = \\frac{\\mathrm{tr} (\\partial \\Sigma)}{\\partial X} = \\frac{\\mathrm{tr} (U^{\\mathsf{T}} (\\partial X)V)}{\\partial X} = \\frac{\\mathrm{tr} (V U^{\\mathsf{T}} (\\partial X))}{\\partial X} = (V U^{\\mathsf{T}})^{\\mathsf{T}} = U V^{\\mathsf{T}}</script><h1 id=\"低秩问题的近似\"><a href=\"#低秩问题的近似\" class=\"headerlink\" title=\"低秩问题的近似\"></a>低秩问题的近似</h1><p>定义了核范数以后，我们就可以将低秩优化问题近似成相应的核范数优化问题了。<br>即：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n&\\mathrm{minimize} \\quad  \\lVert Z \\rVert_{\\ast} \\\\\n&\\text{subject to} \\quad  \\sum_{(i,j):\\text{Observed}} (Z_{ij} - X_{ij})^{2} \\le \\delta\n\\end{aligned} \\\\\n\\text{Impute missing } X_{ij} \\text{ with } Z_{ij}</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"矩阵补全（matrix-completion）问题\"><a href=\"#矩阵补全（matrix-completion）问题\" class=\"headerlink\" title=\"矩阵补全（matrix completion）问题\"></a>矩阵补全（matrix completion）问题</h1><p>这个问题最早火起来是因为 Netflix 公司悬赏 100 万美金的公开挑战，奖励给能够改进公司现行矩阵补全算法 10% 以上最优胜的队伍。最后的结果是 2009 年 9 月 BellKors Pragmatic 拿走了奖金。</p>\n<p>什么是矩阵补全问题呢？用 Netflix 的数据集来作说明。<br>简单的来说就是一个电影评分系统要根据非常稀疏的现有数据集（一个用户可能只 rate 了几十部电影）来推断整个用户群对不同电影的评分。</p>\n<p>这个问题在推荐系统、图像处理等方面都有广泛的应用。<br>接着，这类问题一般都有隐含的假设，即最终的矩阵应该是低秩（low rank）的。<br>这其实也很好理解，因为我们一般会觉得：1、不同用户对于电影的偏好可以分成聚落（cliques），比如按照观众的年龄来分，年龄相仿的观众口味往往相近；2、电影也可以分成大致几种不同的题材（genres），如：爱情片、动作片、科幻片等。所以会有低秩的特性。<br>简单来说，这个矩阵的行和列会有“协同”的特性，这也是这个问题的别名协同过滤（collaborative filtering）的得名原因。<br>另外，低秩限制会比较实用，人们都比较喜欢得到稀疏解，使得整个问题更有可诠释性。</p>\n<p>所以这个问题的目标函数被定义成下面的样子：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n&\\mathrm{minimize} \\quad  \\mathrm{rank}(Z) \\\\\n&\\text{subject to} \\quad  \\sum_{(i,j):\\text{Observed}} (Z_{ij} - X_{ij})^{2} \\le \\delta\n\\end{aligned} \\\\\n\\text{Impute missing } X_{ij} \\text{ with } Z_{ij}</script><p>然而问题来了，这个问题是非凸的，而且这种问题的规模都非常大，没办法在如此庞大的 NP-hard 问题中找到全局最优解。</p>\n<p>早先时候，人们使用了一些启发式算法。<br>后来人们发现，核范数是矩阵秩的一个很好的凸近似。<br>（原因有点类似与 L1 范数是 L0 范数的一个凸近似。）<br>下面就介绍一下核范数的一些性质。</p>\n<h1 id=\"核范数\"><a href=\"#核范数\" class=\"headerlink\" title=\"核范数\"></a>核范数</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>矩阵 $X$ 的核范数定义为：</p>\n<script type=\"math/tex; mode=display\">\n\\lVert X \\rVert _{\\ast} = \\mathrm{tr}\\left( \\sqrt{X^{\\mathsf{T}}X} \\right)</script><p>显而易见，核范数也可以等价地定义为矩阵特征值的和，考虑 $X$ 的特征值分解 $X=U \\Sigma V^{\\mathsf{T}}$ 显然有：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\mathrm{tr}\\left( \\sqrt{X^{\\mathsf{T}}X} \\right) & =  \\mathrm{tr} \\left( \\sqrt{(U \\Sigma V^{\\mathsf{T}})^{\\mathsf{T}}U \\Sigma V^{\\mathsf{T}}} \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V \\Sigma^{\\mathsf{T}} U^{\\mathsf{T}} U \\Sigma V^{\\mathsf{T}}} \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V \\Sigma^{2} V^{\\mathsf{T}}} \\right)  \\quad \\left( \\Sigma^{\\mathsf{T}} = \\Sigma \\right) \\\\\n& = \\mathrm{tr} \\left( \\sqrt{V^{\\mathsf{T}} V \\Sigma^{2}} \\right) \\\\\n& = \\mathrm{tr} (\\Sigma)\n\\end{aligned}</script><h2 id=\"凸性的证明\"><a href=\"#凸性的证明\" class=\"headerlink\" title=\"凸性的证明\"></a>凸性的证明</h2><p>首先，矩阵诱导范数是凸的，即：令 $ f_x (A) = \\lVert Ax \\rVert _{p} \\quad (p \\ge 1) $ ，则 $f_x$ 凸，故 $\\lVert A \\rVert _{p} = \\sup\\limits_{\\Vert x \\rVert _{p}=1} f_x (A)$ 凸。特别的，$\\lVert A \\rVert_{2}$ 凸。<br>因为 $\\lVert A \\rVert_{\\ast}$ 和 $\\lVert A \\rVert_{2}$ 是对偶范数，所以 $\\lVert A \\rVert_{\\ast}$ 凸。（$\\lVert A \\rVert_{\\ast}=\\sup \\limits_{\\lVert X \\rVert_{2}=1} \\mathrm{tr} \\left( A^{\\mathsf{T}}X \\right)$）</p>\n<h2 id=\"梯度的求解\"><a href=\"#梯度的求解\" class=\"headerlink\" title=\"梯度的求解\"></a>梯度的求解</h2><p>基于上述 S.V.D 的假设，我们可以轻易地得到，</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\partial \\lVert X \\rVert_{\\ast}}{\\partial X} = \\frac{\\partial \\mathrm{tr} (\\Sigma)}{\\partial X} = \\frac{\\mathrm{tr} (\\partial \\Sigma)}{\\partial X}</script><p>所以我们需要解出 $\\partial \\Sigma$ ，<br>考虑 $X=U \\Sigma V^{\\mathsf{T}}$ ，因此：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n& & \\partial X & = (\\partial U )\\Sigma V^{\\mathsf{T}} + U (\\partial \\Sigma) V^{\\mathsf{T}} + U \\Sigma (\\partial V^{\\mathsf{T}}) \\\\\n&\\Rightarrow \\, & \\partial \\Sigma & = U^{\\mathsf{T}} (\\partial X) V - U^{\\mathsf{T}} (\\partial U) \\Sigma - \\Sigma (\\partial V^{\\mathsf{T}}) V \\\\\n& & & = U^{\\mathsf{T}} (\\partial X) V \\qquad (- U^{\\mathsf{T}} (\\partial U) \\Sigma - \\Sigma (\\partial V^{\\mathsf{T}}) V = 0)\n\\end{aligned}</script><p>所以：</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\partial \\lVert X \\rVert_{\\ast}}{\\partial X} = \\frac{\\mathrm{tr} (\\partial \\Sigma)}{\\partial X} = \\frac{\\mathrm{tr} (U^{\\mathsf{T}} (\\partial X)V)}{\\partial X} = \\frac{\\mathrm{tr} (V U^{\\mathsf{T}} (\\partial X))}{\\partial X} = (V U^{\\mathsf{T}})^{\\mathsf{T}} = U V^{\\mathsf{T}}</script><h1 id=\"低秩问题的近似\"><a href=\"#低秩问题的近似\" class=\"headerlink\" title=\"低秩问题的近似\"></a>低秩问题的近似</h1><p>定义了核范数以后，我们就可以将低秩优化问题近似成相应的核范数优化问题了。<br>即：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n&\\mathrm{minimize} \\quad  \\lVert Z \\rVert_{\\ast} \\\\\n&\\text{subject to} \\quad  \\sum_{(i,j):\\text{Observed}} (Z_{ij} - X_{ij})^{2} \\le \\delta\n\\end{aligned} \\\\\n\\text{Impute missing } X_{ij} \\text{ with } Z_{ij}</script>"},{"title":"由 Softmax 想到的（三）—— 从 Sigmoid 到 ReLU，一些常见的激活函数","date":"2017-08-11T11:40:01.000Z","description":"由好友 史博士 关于 Softmax 的问题而想到的一些脑洞。本文讲解了神经网络中引进激活函数的意图，并举例了一些常见的激活函数。","_content":"\n承接上文，提到 Logistic 模型，就会想到那个典型的 Sigmoid 函数。\n其实 Sigmoid 本来就是“ S 形”的意思，不过似乎大家一说到 Sigmoid 函数就想起 Logistic 模型的那个函数。\n该函数一般被记做 $\\sigma(x)$ ：\n$$\n\\sigma(x) = \\frac{1}{1+e^{-x}}\n$$\n这个函数有一些很好的性质，比如：\n\n- 它是连续并且光滑的，因此是可导的。这意味它在每一个点都可以求梯度。\n- 它的定义域是 $[-\\infty, +\\infty]$ 。\n- 它的值域是 $(0, 1)$ ，虽然取不到两边的端点，但是可以在无穷远处无限趋近。把实数集映射到 $(0, 1)$ ，刚好满足概率的定义。\n\n“完美”的函数。\n\n但在被引入神经网络中担负起激活函数的职责后，似乎出了一些问题。\n\n# 为什么需要激活函数？\n\n非常遗憾的是并不是所有的优化问题都是凸优化问题，乃至于是否是线性问题就更谈不上了。\n相反，人类所遇到的大部分优化问题都是非线性、非凸的。\n于是人们模拟神经元的样子发明了神经网络（neural nets）。\n而在神经网络的各个隐藏层间担任粘合作用的就是激活函数（activation function）。\n\n究竟激活函数要设计成什么样子呢？\n\n- 可微性。因为我们想要求导、想要梯度。特别是在向后传播神经网络中一定是要可导的。\n- 单调性。激活函数如果是单调的，就能保证单层网络是凸的。凸的很好，有全局最值。\n- 输出值范围有限。基于梯度的优化方法会更加稳定。当激活函数的输出是无限的时候，模型的训练会更加高效，但是一般需要小心翼翼地设定合适的更小的学习率（learning rate）。\n\n如果不考虑输出值范围。满足这些条件的一个平凡例子是 $f(x) = x$ ，但是这样不能让两层网络逼近非线性函数。于是人们想到了 Sigmoid 函数。\n\n# Sigmoid 函数的问题\n\n最近几年，使用 Sigmoid 函数的人越来越少了，是因为它有一个致命的缺点，即当输入非常大或者非常小的时候（也称达到饱和，saturation），这些神经元的梯度是接近 0 的。所以这需要尤其注意参数的初始值设定，因为如果初始值很大，大部分神经元可能都会处在饱和的状态，从而“杀死”梯度（kill gradient）。这会导致神经网络变得很难学习。\n事实上，由于：\n$$\n\\sigma(x)' = \\sigma(x)(1 - \\sigma(x))\n$$\n我们可以了解到，Sigmoid 函数的梯度的最大值也才是 $1/4$ 。如果放在向后传导网络中，运用链式法则多乘几层隐藏层，那么得到的偏导数大概要趋近于 0 了。\n\n另外一个小问题是，Sigmoid 函数并不是 0 均值的，所以正输入所计算出的的梯度也一定是正的（就是 1）。\n当然，如果使用批训练（batch），能缓解一下这个问题。比 kill gradient 要好对付一点。\n\n不很科学的说，我们似乎也不需要在神经网络的每一层都产生一个类似于概率的东西。\n神经网络的每一层应该起到为下一层提供新的抽象特征（feature）的作用，特别是这些特征如果能有一定的稀疏性就好了。\n（这里稍微啰嗦一句，神经网络本身就是一个交织在一起的结构，再加入 Dropout ，其实是采用了随机森林（random forest）的 Bagging 思想的优点。）\n\n# 其它的激活函数呢？\n\n- tanh\n\n  这个函数解决了 0 均值的问题。不过看图像就知道了，它是 Sigmoid 函数的变体。\n\n- ReLU\n\n  数学表达式：$f(x) = \\max(0, x)$ 。\n\n  近几年，ReLU作为激活函数越来越火，因为：\n\n  1. 它是线性的，而且是不饱和的。\n  2. 运算简单，计算一个阈值即可。\n  3. 梯度形式简单，0 或者 1。原点处的话定义一个次梯度就好。\n  4. 虽然训练时很脆弱，非常大的梯度流过一个 ReLU 单元后很轻易就会“die”掉。但是反过来想，这个问题只要设定一个合适的比较小的学习率就可以让它发生的不太频繁。同时它还可以为每一层的特征提供一定的稀疏性（负输入将得到 0）。\n\n- Leaky-ReLU、P-ReLU、R-ReLU、Maxout\n\n  请自行 wiki。这些函数其实都是 ReLU 的变体，看名字就知道。\n  它们被设计出来解决“dying ReLU”的问题。但具体效果却未有定论。\n  总之，都是一些实验表明它们表现的很好，一些实验又不是这样。\n  大概是天下没有免费的午餐（No free lunch theoren）吧。\n\n  **毕竟神经网络就是炼丹。**大家都懂的。\n\n  这里要提一句，Maxout 函数的拟合能力还是很强的，两个 Maxout 节点就可以拟合任意的凸函数了（相减），前提是“隐”隐藏层的节点个数可以任意多。所以 Maxout 函数是又有 ReLU 的优点，又没有 ReLU 的缺点。如果你没有见过别人用这个大概是因为它唯一的缺点：它会把参数个数翻倍。（所以一般在使用的时候，都和 Dropout 结合。）\n\n还有很多的激活函数可供选择就不一一赘述了。\n\n# 怎么选择激活函数呢？\n\n首先说这种问题不可能有标答的，我的实战经验也不是很多，算是说一点个人看法。\n\n如果使用 ReLU ，那么一定要小心设置学习率。\n如果“dying ReLU”的问题不好解决，试一试 Leaky ReLU、PReLU 或者 Maxout。\n\n另外，个人认为：最好不要用 Sigmoid，但可以试试 tanh。\n\n还有，很少有把各种激活函数串起来放在同一个网络中的，那其实并没有多大意义。","source":"_posts/thinking-from-softmax-03.md","raw":"---\ntitle: 由 Softmax 想到的（三）—— 从 Sigmoid 到 ReLU，一些常见的激活函数\ndate: 2017-08-11 19:40:01\ncategories: ML\ntags:\n     - Deep learning\n     - Activation function\ndescription: 由好友 史博士 关于 Softmax 的问题而想到的一些脑洞。本文讲解了神经网络中引进激活函数的意图，并举例了一些常见的激活函数。\n---\n\n承接上文，提到 Logistic 模型，就会想到那个典型的 Sigmoid 函数。\n其实 Sigmoid 本来就是“ S 形”的意思，不过似乎大家一说到 Sigmoid 函数就想起 Logistic 模型的那个函数。\n该函数一般被记做 $\\sigma(x)$ ：\n$$\n\\sigma(x) = \\frac{1}{1+e^{-x}}\n$$\n这个函数有一些很好的性质，比如：\n\n- 它是连续并且光滑的，因此是可导的。这意味它在每一个点都可以求梯度。\n- 它的定义域是 $[-\\infty, +\\infty]$ 。\n- 它的值域是 $(0, 1)$ ，虽然取不到两边的端点，但是可以在无穷远处无限趋近。把实数集映射到 $(0, 1)$ ，刚好满足概率的定义。\n\n“完美”的函数。\n\n但在被引入神经网络中担负起激活函数的职责后，似乎出了一些问题。\n\n# 为什么需要激活函数？\n\n非常遗憾的是并不是所有的优化问题都是凸优化问题，乃至于是否是线性问题就更谈不上了。\n相反，人类所遇到的大部分优化问题都是非线性、非凸的。\n于是人们模拟神经元的样子发明了神经网络（neural nets）。\n而在神经网络的各个隐藏层间担任粘合作用的就是激活函数（activation function）。\n\n究竟激活函数要设计成什么样子呢？\n\n- 可微性。因为我们想要求导、想要梯度。特别是在向后传播神经网络中一定是要可导的。\n- 单调性。激活函数如果是单调的，就能保证单层网络是凸的。凸的很好，有全局最值。\n- 输出值范围有限。基于梯度的优化方法会更加稳定。当激活函数的输出是无限的时候，模型的训练会更加高效，但是一般需要小心翼翼地设定合适的更小的学习率（learning rate）。\n\n如果不考虑输出值范围。满足这些条件的一个平凡例子是 $f(x) = x$ ，但是这样不能让两层网络逼近非线性函数。于是人们想到了 Sigmoid 函数。\n\n# Sigmoid 函数的问题\n\n最近几年，使用 Sigmoid 函数的人越来越少了，是因为它有一个致命的缺点，即当输入非常大或者非常小的时候（也称达到饱和，saturation），这些神经元的梯度是接近 0 的。所以这需要尤其注意参数的初始值设定，因为如果初始值很大，大部分神经元可能都会处在饱和的状态，从而“杀死”梯度（kill gradient）。这会导致神经网络变得很难学习。\n事实上，由于：\n$$\n\\sigma(x)' = \\sigma(x)(1 - \\sigma(x))\n$$\n我们可以了解到，Sigmoid 函数的梯度的最大值也才是 $1/4$ 。如果放在向后传导网络中，运用链式法则多乘几层隐藏层，那么得到的偏导数大概要趋近于 0 了。\n\n另外一个小问题是，Sigmoid 函数并不是 0 均值的，所以正输入所计算出的的梯度也一定是正的（就是 1）。\n当然，如果使用批训练（batch），能缓解一下这个问题。比 kill gradient 要好对付一点。\n\n不很科学的说，我们似乎也不需要在神经网络的每一层都产生一个类似于概率的东西。\n神经网络的每一层应该起到为下一层提供新的抽象特征（feature）的作用，特别是这些特征如果能有一定的稀疏性就好了。\n（这里稍微啰嗦一句，神经网络本身就是一个交织在一起的结构，再加入 Dropout ，其实是采用了随机森林（random forest）的 Bagging 思想的优点。）\n\n# 其它的激活函数呢？\n\n- tanh\n\n  这个函数解决了 0 均值的问题。不过看图像就知道了，它是 Sigmoid 函数的变体。\n\n- ReLU\n\n  数学表达式：$f(x) = \\max(0, x)$ 。\n\n  近几年，ReLU作为激活函数越来越火，因为：\n\n  1. 它是线性的，而且是不饱和的。\n  2. 运算简单，计算一个阈值即可。\n  3. 梯度形式简单，0 或者 1。原点处的话定义一个次梯度就好。\n  4. 虽然训练时很脆弱，非常大的梯度流过一个 ReLU 单元后很轻易就会“die”掉。但是反过来想，这个问题只要设定一个合适的比较小的学习率就可以让它发生的不太频繁。同时它还可以为每一层的特征提供一定的稀疏性（负输入将得到 0）。\n\n- Leaky-ReLU、P-ReLU、R-ReLU、Maxout\n\n  请自行 wiki。这些函数其实都是 ReLU 的变体，看名字就知道。\n  它们被设计出来解决“dying ReLU”的问题。但具体效果却未有定论。\n  总之，都是一些实验表明它们表现的很好，一些实验又不是这样。\n  大概是天下没有免费的午餐（No free lunch theoren）吧。\n\n  **毕竟神经网络就是炼丹。**大家都懂的。\n\n  这里要提一句，Maxout 函数的拟合能力还是很强的，两个 Maxout 节点就可以拟合任意的凸函数了（相减），前提是“隐”隐藏层的节点个数可以任意多。所以 Maxout 函数是又有 ReLU 的优点，又没有 ReLU 的缺点。如果你没有见过别人用这个大概是因为它唯一的缺点：它会把参数个数翻倍。（所以一般在使用的时候，都和 Dropout 结合。）\n\n还有很多的激活函数可供选择就不一一赘述了。\n\n# 怎么选择激活函数呢？\n\n首先说这种问题不可能有标答的，我的实战经验也不是很多，算是说一点个人看法。\n\n如果使用 ReLU ，那么一定要小心设置学习率。\n如果“dying ReLU”的问题不好解决，试一试 Leaky ReLU、PReLU 或者 Maxout。\n\n另外，个人认为：最好不要用 Sigmoid，但可以试试 tanh。\n\n还有，很少有把各种激活函数串起来放在同一个网络中的，那其实并没有多大意义。","slug":"thinking-from-softmax-03","published":1,"updated":"2021-07-19T13:03:31.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivi000mqxt6qboj1gfp","content":"<p>承接上文，提到 Logistic 模型，就会想到那个典型的 Sigmoid 函数。<br>其实 Sigmoid 本来就是“ S 形”的意思，不过似乎大家一说到 Sigmoid 函数就想起 Logistic 模型的那个函数。<br>该函数一般被记做 $\\sigma(x)$ ：</p>\n<script type=\"math/tex; mode=display\">\n\\sigma(x) = \\frac{1}{1+e^{-x}}</script><p>这个函数有一些很好的性质，比如：</p>\n<ul>\n<li>它是连续并且光滑的，因此是可导的。这意味它在每一个点都可以求梯度。</li>\n<li>它的定义域是 $[-\\infty, +\\infty]$ 。</li>\n<li>它的值域是 $(0, 1)$ ，虽然取不到两边的端点，但是可以在无穷远处无限趋近。把实数集映射到 $(0, 1)$ ，刚好满足概率的定义。</li>\n</ul>\n<p>“完美”的函数。</p>\n<p>但在被引入神经网络中担负起激活函数的职责后，似乎出了一些问题。</p>\n<h1 id=\"为什么需要激活函数？\"><a href=\"#为什么需要激活函数？\" class=\"headerlink\" title=\"为什么需要激活函数？\"></a>为什么需要激活函数？</h1><p>非常遗憾的是并不是所有的优化问题都是凸优化问题，乃至于是否是线性问题就更谈不上了。<br>相反，人类所遇到的大部分优化问题都是非线性、非凸的。<br>于是人们模拟神经元的样子发明了神经网络（neural nets）。<br>而在神经网络的各个隐藏层间担任粘合作用的就是激活函数（activation function）。</p>\n<p>究竟激活函数要设计成什么样子呢？</p>\n<ul>\n<li>可微性。因为我们想要求导、想要梯度。特别是在向后传播神经网络中一定是要可导的。</li>\n<li>单调性。激活函数如果是单调的，就能保证单层网络是凸的。凸的很好，有全局最值。</li>\n<li>输出值范围有限。基于梯度的优化方法会更加稳定。当激活函数的输出是无限的时候，模型的训练会更加高效，但是一般需要小心翼翼地设定合适的更小的学习率（learning rate）。</li>\n</ul>\n<p>如果不考虑输出值范围。满足这些条件的一个平凡例子是 $f(x) = x$ ，但是这样不能让两层网络逼近非线性函数。于是人们想到了 Sigmoid 函数。</p>\n<h1 id=\"Sigmoid-函数的问题\"><a href=\"#Sigmoid-函数的问题\" class=\"headerlink\" title=\"Sigmoid 函数的问题\"></a>Sigmoid 函数的问题</h1><p>最近几年，使用 Sigmoid 函数的人越来越少了，是因为它有一个致命的缺点，即当输入非常大或者非常小的时候（也称达到饱和，saturation），这些神经元的梯度是接近 0 的。所以这需要尤其注意参数的初始值设定，因为如果初始值很大，大部分神经元可能都会处在饱和的状态，从而“杀死”梯度（kill gradient）。这会导致神经网络变得很难学习。<br>事实上，由于：</p>\n<script type=\"math/tex; mode=display\">\n\\sigma(x)' = \\sigma(x)(1 - \\sigma(x))</script><p>我们可以了解到，Sigmoid 函数的梯度的最大值也才是 $1/4$ 。如果放在向后传导网络中，运用链式法则多乘几层隐藏层，那么得到的偏导数大概要趋近于 0 了。</p>\n<p>另外一个小问题是，Sigmoid 函数并不是 0 均值的，所以正输入所计算出的的梯度也一定是正的（就是 1）。<br>当然，如果使用批训练（batch），能缓解一下这个问题。比 kill gradient 要好对付一点。</p>\n<p>不很科学的说，我们似乎也不需要在神经网络的每一层都产生一个类似于概率的东西。<br>神经网络的每一层应该起到为下一层提供新的抽象特征（feature）的作用，特别是这些特征如果能有一定的稀疏性就好了。<br>（这里稍微啰嗦一句，神经网络本身就是一个交织在一起的结构，再加入 Dropout ，其实是采用了随机森林（random forest）的 Bagging 思想的优点。）</p>\n<h1 id=\"其它的激活函数呢？\"><a href=\"#其它的激活函数呢？\" class=\"headerlink\" title=\"其它的激活函数呢？\"></a>其它的激活函数呢？</h1><ul>\n<li><p>tanh</p>\n<p>这个函数解决了 0 均值的问题。不过看图像就知道了，它是 Sigmoid 函数的变体。</p>\n</li>\n<li><p>ReLU</p>\n<p>数学表达式：$f(x) = \\max(0, x)$ 。</p>\n<p>近几年，ReLU作为激活函数越来越火，因为：</p>\n<ol>\n<li>它是线性的，而且是不饱和的。</li>\n<li>运算简单，计算一个阈值即可。</li>\n<li>梯度形式简单，0 或者 1。原点处的话定义一个次梯度就好。</li>\n<li>虽然训练时很脆弱，非常大的梯度流过一个 ReLU 单元后很轻易就会“die”掉。但是反过来想，这个问题只要设定一个合适的比较小的学习率就可以让它发生的不太频繁。同时它还可以为每一层的特征提供一定的稀疏性（负输入将得到 0）。</li>\n</ol>\n</li>\n<li><p>Leaky-ReLU、P-ReLU、R-ReLU、Maxout</p>\n<p>请自行 wiki。这些函数其实都是 ReLU 的变体，看名字就知道。<br>它们被设计出来解决“dying ReLU”的问题。但具体效果却未有定论。<br>总之，都是一些实验表明它们表现的很好，一些实验又不是这样。<br>大概是天下没有免费的午餐（No free lunch theoren）吧。</p>\n<p><strong>毕竟神经网络就是炼丹。</strong>大家都懂的。</p>\n<p>这里要提一句，Maxout 函数的拟合能力还是很强的，两个 Maxout 节点就可以拟合任意的凸函数了（相减），前提是“隐”隐藏层的节点个数可以任意多。所以 Maxout 函数是又有 ReLU 的优点，又没有 ReLU 的缺点。如果你没有见过别人用这个大概是因为它唯一的缺点：它会把参数个数翻倍。（所以一般在使用的时候，都和 Dropout 结合。）</p>\n</li>\n</ul>\n<p>还有很多的激活函数可供选择就不一一赘述了。</p>\n<h1 id=\"怎么选择激活函数呢？\"><a href=\"#怎么选择激活函数呢？\" class=\"headerlink\" title=\"怎么选择激活函数呢？\"></a>怎么选择激活函数呢？</h1><p>首先说这种问题不可能有标答的，我的实战经验也不是很多，算是说一点个人看法。</p>\n<p>如果使用 ReLU ，那么一定要小心设置学习率。<br>如果“dying ReLU”的问题不好解决，试一试 Leaky ReLU、PReLU 或者 Maxout。</p>\n<p>另外，个人认为：最好不要用 Sigmoid，但可以试试 tanh。</p>\n<p>还有，很少有把各种激活函数串起来放在同一个网络中的，那其实并没有多大意义。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>承接上文，提到 Logistic 模型，就会想到那个典型的 Sigmoid 函数。<br>其实 Sigmoid 本来就是“ S 形”的意思，不过似乎大家一说到 Sigmoid 函数就想起 Logistic 模型的那个函数。<br>该函数一般被记做 $\\sigma(x)$ ：</p>\n<script type=\"math/tex; mode=display\">\n\\sigma(x) = \\frac{1}{1+e^{-x}}</script><p>这个函数有一些很好的性质，比如：</p>\n<ul>\n<li>它是连续并且光滑的，因此是可导的。这意味它在每一个点都可以求梯度。</li>\n<li>它的定义域是 $[-\\infty, +\\infty]$ 。</li>\n<li>它的值域是 $(0, 1)$ ，虽然取不到两边的端点，但是可以在无穷远处无限趋近。把实数集映射到 $(0, 1)$ ，刚好满足概率的定义。</li>\n</ul>\n<p>“完美”的函数。</p>\n<p>但在被引入神经网络中担负起激活函数的职责后，似乎出了一些问题。</p>\n<h1 id=\"为什么需要激活函数？\"><a href=\"#为什么需要激活函数？\" class=\"headerlink\" title=\"为什么需要激活函数？\"></a>为什么需要激活函数？</h1><p>非常遗憾的是并不是所有的优化问题都是凸优化问题，乃至于是否是线性问题就更谈不上了。<br>相反，人类所遇到的大部分优化问题都是非线性、非凸的。<br>于是人们模拟神经元的样子发明了神经网络（neural nets）。<br>而在神经网络的各个隐藏层间担任粘合作用的就是激活函数（activation function）。</p>\n<p>究竟激活函数要设计成什么样子呢？</p>\n<ul>\n<li>可微性。因为我们想要求导、想要梯度。特别是在向后传播神经网络中一定是要可导的。</li>\n<li>单调性。激活函数如果是单调的，就能保证单层网络是凸的。凸的很好，有全局最值。</li>\n<li>输出值范围有限。基于梯度的优化方法会更加稳定。当激活函数的输出是无限的时候，模型的训练会更加高效，但是一般需要小心翼翼地设定合适的更小的学习率（learning rate）。</li>\n</ul>\n<p>如果不考虑输出值范围。满足这些条件的一个平凡例子是 $f(x) = x$ ，但是这样不能让两层网络逼近非线性函数。于是人们想到了 Sigmoid 函数。</p>\n<h1 id=\"Sigmoid-函数的问题\"><a href=\"#Sigmoid-函数的问题\" class=\"headerlink\" title=\"Sigmoid 函数的问题\"></a>Sigmoid 函数的问题</h1><p>最近几年，使用 Sigmoid 函数的人越来越少了，是因为它有一个致命的缺点，即当输入非常大或者非常小的时候（也称达到饱和，saturation），这些神经元的梯度是接近 0 的。所以这需要尤其注意参数的初始值设定，因为如果初始值很大，大部分神经元可能都会处在饱和的状态，从而“杀死”梯度（kill gradient）。这会导致神经网络变得很难学习。<br>事实上，由于：</p>\n<script type=\"math/tex; mode=display\">\n\\sigma(x)' = \\sigma(x)(1 - \\sigma(x))</script><p>我们可以了解到，Sigmoid 函数的梯度的最大值也才是 $1/4$ 。如果放在向后传导网络中，运用链式法则多乘几层隐藏层，那么得到的偏导数大概要趋近于 0 了。</p>\n<p>另外一个小问题是，Sigmoid 函数并不是 0 均值的，所以正输入所计算出的的梯度也一定是正的（就是 1）。<br>当然，如果使用批训练（batch），能缓解一下这个问题。比 kill gradient 要好对付一点。</p>\n<p>不很科学的说，我们似乎也不需要在神经网络的每一层都产生一个类似于概率的东西。<br>神经网络的每一层应该起到为下一层提供新的抽象特征（feature）的作用，特别是这些特征如果能有一定的稀疏性就好了。<br>（这里稍微啰嗦一句，神经网络本身就是一个交织在一起的结构，再加入 Dropout ，其实是采用了随机森林（random forest）的 Bagging 思想的优点。）</p>\n<h1 id=\"其它的激活函数呢？\"><a href=\"#其它的激活函数呢？\" class=\"headerlink\" title=\"其它的激活函数呢？\"></a>其它的激活函数呢？</h1><ul>\n<li><p>tanh</p>\n<p>这个函数解决了 0 均值的问题。不过看图像就知道了，它是 Sigmoid 函数的变体。</p>\n</li>\n<li><p>ReLU</p>\n<p>数学表达式：$f(x) = \\max(0, x)$ 。</p>\n<p>近几年，ReLU作为激活函数越来越火，因为：</p>\n<ol>\n<li>它是线性的，而且是不饱和的。</li>\n<li>运算简单，计算一个阈值即可。</li>\n<li>梯度形式简单，0 或者 1。原点处的话定义一个次梯度就好。</li>\n<li>虽然训练时很脆弱，非常大的梯度流过一个 ReLU 单元后很轻易就会“die”掉。但是反过来想，这个问题只要设定一个合适的比较小的学习率就可以让它发生的不太频繁。同时它还可以为每一层的特征提供一定的稀疏性（负输入将得到 0）。</li>\n</ol>\n</li>\n<li><p>Leaky-ReLU、P-ReLU、R-ReLU、Maxout</p>\n<p>请自行 wiki。这些函数其实都是 ReLU 的变体，看名字就知道。<br>它们被设计出来解决“dying ReLU”的问题。但具体效果却未有定论。<br>总之，都是一些实验表明它们表现的很好，一些实验又不是这样。<br>大概是天下没有免费的午餐（No free lunch theoren）吧。</p>\n<p><strong>毕竟神经网络就是炼丹。</strong>大家都懂的。</p>\n<p>这里要提一句，Maxout 函数的拟合能力还是很强的，两个 Maxout 节点就可以拟合任意的凸函数了（相减），前提是“隐”隐藏层的节点个数可以任意多。所以 Maxout 函数是又有 ReLU 的优点，又没有 ReLU 的缺点。如果你没有见过别人用这个大概是因为它唯一的缺点：它会把参数个数翻倍。（所以一般在使用的时候，都和 Dropout 结合。）</p>\n</li>\n</ul>\n<p>还有很多的激活函数可供选择就不一一赘述了。</p>\n<h1 id=\"怎么选择激活函数呢？\"><a href=\"#怎么选择激活函数呢？\" class=\"headerlink\" title=\"怎么选择激活函数呢？\"></a>怎么选择激活函数呢？</h1><p>首先说这种问题不可能有标答的，我的实战经验也不是很多，算是说一点个人看法。</p>\n<p>如果使用 ReLU ，那么一定要小心设置学习率。<br>如果“dying ReLU”的问题不好解决，试一试 Leaky ReLU、PReLU 或者 Maxout。</p>\n<p>另外，个人认为：最好不要用 Sigmoid，但可以试试 tanh。</p>\n<p>还有，很少有把各种激活函数串起来放在同一个网络中的，那其实并没有多大意义。</p>\n"},{"title":"由 Softmax 想到的（二）—— Logistic 回归的 Loss 函数为什么长成那个样子？","date":"2017-08-10T14:18:09.000Z","description":"由好友 史博士 关于 Softmax 的问题而想到的一些脑洞。本文讲解了 Logistic 模型的 Loss 函数的来源。以及想到的一些凸优化的知识。","_content":"\n# Logistic 回归的 Loss 函数为什么长成那个样子？\n\n一般人大概都能想得到，Logistic 回归的 Loss 函数应该是下面的样子。\n（以下是正常的版本。）\n$$\n\\begin{aligned}\nLoss(h_{\\theta}, \\, y) &=\\frac{1}{n} \\sum_{i=1}^{n} \\frac{1}{2}[h_{\\theta}(x_{i})-y_{i}]^{2} \\\\\n& =\\frac{1}{2}\\left(\\frac{1}{1+e^{-\\theta^{\\mathsf{T}}x}}-y\\right)^{2}\n\\end{aligned}\n$$\n这里 $1/2$ 是为了求导后方便计算的系数，不重要。\n$n$ 是样本数量。\n括号里面就是分错的部分了，很容易理解。\n\n但实际上，它的 Loss 函数长成了这个样子：\n$$\nLoss = \n\\left \\{ \\begin{aligned}\n& -\\log (h_{\\theta}(x)) & \\qquad \\text{if }y=1 \\\\\n& -\\log (1-h_{\\theta}(x)) & \\qquad \\text{if }y=0\n\\end{aligned} \\right.\n$$\n为什么呢？\n\n答案是：**保证凸性**。\n第一个 Loss 函数不是凸函数，而取过了 $-\\log$ 并且分段以后就变成凸函数了。\n\n# 凸优化 及 梯度下降法\n\n几乎每一个机器学习问题都是一个优化问题。\n而在所有优化问题当中，有一类优化问题是人们非常关心的，并希望每一个优化问题都能转化为这样的优化问题的，那就是凸优化问题（convex optimization）。\n\n一类常见的凸优化问题就是目标函数是凸函数，并且边界条件是仿射集的优化问题。如：支持向量机（SVM） 、 感知机（Perceptron）等等。\n为什么要研究凸优化呢？因为凸函数有一个优点——全局最小值。\n它可以让人们明确一个信念，即：所研究的问题一定是可学习的，而且一定在全局有一个固定结果，并不会踩到某个局部极值从而达不到最优。\n\n那么如何求得这个最值呢，一般的方法是利用梯度下降法（gradient descent，GD）。\n由于凸函数有一个一阶条件：$f(y) \\ge f(x) + \\nabla f(x)^{\\mathsf{T}}(y-x)$ ，所以我们很容易看到，沿着目标函数 $f$ 的梯度方向一直下降的话（其实是梯度方向的反向，因为要下降），终究会像从沙滩上滑下一般到达最小值。\n（顺便一说凸函数还有一个二阶条件：$\\nabla^{2}f(x) \\ge 0$ 。）\n\n那么，问题来了，如果目标函数不是光滑的怎么办？\n比如 $y=|x|$ ，这很明显是一个凸锥。\n再比如，神经网络（neural net，NN）中最常见的激活函数（activation Function）：ReLU，这也是一个凸锥。\n\n解决方法是提出次梯度（subgradient）的概念。\n所谓次梯度，是一个很像梯度的，但是是个常量的 $g$ ，它满足：$f(y) \\ge f(x) + g^{\\mathsf{T}}(y-x)$ 。\n形式上是不是和凸函数的一阶条件很像？因此我们实际上是找了一个很像梯度的替代品。\n例如：在 $y=|x|$ 的条件下，我们可以把原点的次梯度定义为 0。在ReLU的条件下，我们把原点的次梯度定义为 $1/2$​​ 等等。\n样子如下图中的红线的斜率：\n\n{% asset_img subgradient.png Subgradient %}\n\n（原图来自 [百度百科：次导数](https://baike.baidu.com/item/次导数/13882223?fr=aladdin)）\n\n# 扩展：Softmax 模型的 Loss 函数—— Log-Sum-Exp 函数\n\n这里就不给出函数的形式了，大家请自行 wiki。\n总之来说，是 Logistic 模型的 Loss 函数的高阶扩展。也是一个带有一堆 $\\log$ 、$\\exp$ 还要求加和的式子。\n\n它的凸性可以证明如下：\n\n首先，我们考虑函数 $f(x) = \\log (\\sum \\alpha_{i} e^{x_{i}})$ ，我们证明它是凸的。然后根据凸函数的性质 Affine composition 来导出 Log-Sum-Exp 函数是凸的。\n（Affine composition 指的是：$f(x)$ 是凸的 $\\Leftrightarrow f(Ax+b)$ 也是凸的，即对自变量做仿射变换不影响凸性。）\n\n考虑：\n$$\n\\begin{aligned}\n\\nabla_{i} f & = e^{x_{i}}\\Big/\\sum_{k} e^{x_{k}}  & \\\\\n\\nabla_{i}^{2} f & = \\mathrm{diag}(z)-zz^{\\mathsf{T}}, \\, z_{i} = e^{x_{i}}\\Big/\\sum_{k} e^{x_{k}}\n\\end{aligned}\n$$\n显而易见，$\\nabla_{i}^{2} f$ 是对角优势矩阵（diagonally dominant matrix）。\n（对角优势矩阵：对矩阵 $A$ 的所有对角元，有 $A_{ii} \\ge \\sum_{i \\ne j} |A_{ij}|$ 。）\n因此，$\\nabla_{i}^{2} f$ 是半正定的（positive semidefinite matrix，p.s.d）。\n所以得到 Log-Sum-Exp 函数是凸的。","source":"_posts/thinking-from-softmax-02.md","raw":"---\ntitle: 由 Softmax 想到的（二）—— Logistic 回归的 Loss 函数为什么长成那个样子？\ndate: 2017-08-10 22:18:09\ncategories: ML\ntags: \n     - Logistic\n     - Softmax\n     - Convex optimization\n     - Gradient\n     - Subgradient\ndescription: 由好友 史博士 关于 Softmax 的问题而想到的一些脑洞。本文讲解了 Logistic 模型的 Loss 函数的来源。以及想到的一些凸优化的知识。\n---\n\n# Logistic 回归的 Loss 函数为什么长成那个样子？\n\n一般人大概都能想得到，Logistic 回归的 Loss 函数应该是下面的样子。\n（以下是正常的版本。）\n$$\n\\begin{aligned}\nLoss(h_{\\theta}, \\, y) &=\\frac{1}{n} \\sum_{i=1}^{n} \\frac{1}{2}[h_{\\theta}(x_{i})-y_{i}]^{2} \\\\\n& =\\frac{1}{2}\\left(\\frac{1}{1+e^{-\\theta^{\\mathsf{T}}x}}-y\\right)^{2}\n\\end{aligned}\n$$\n这里 $1/2$ 是为了求导后方便计算的系数，不重要。\n$n$ 是样本数量。\n括号里面就是分错的部分了，很容易理解。\n\n但实际上，它的 Loss 函数长成了这个样子：\n$$\nLoss = \n\\left \\{ \\begin{aligned}\n& -\\log (h_{\\theta}(x)) & \\qquad \\text{if }y=1 \\\\\n& -\\log (1-h_{\\theta}(x)) & \\qquad \\text{if }y=0\n\\end{aligned} \\right.\n$$\n为什么呢？\n\n答案是：**保证凸性**。\n第一个 Loss 函数不是凸函数，而取过了 $-\\log$ 并且分段以后就变成凸函数了。\n\n# 凸优化 及 梯度下降法\n\n几乎每一个机器学习问题都是一个优化问题。\n而在所有优化问题当中，有一类优化问题是人们非常关心的，并希望每一个优化问题都能转化为这样的优化问题的，那就是凸优化问题（convex optimization）。\n\n一类常见的凸优化问题就是目标函数是凸函数，并且边界条件是仿射集的优化问题。如：支持向量机（SVM） 、 感知机（Perceptron）等等。\n为什么要研究凸优化呢？因为凸函数有一个优点——全局最小值。\n它可以让人们明确一个信念，即：所研究的问题一定是可学习的，而且一定在全局有一个固定结果，并不会踩到某个局部极值从而达不到最优。\n\n那么如何求得这个最值呢，一般的方法是利用梯度下降法（gradient descent，GD）。\n由于凸函数有一个一阶条件：$f(y) \\ge f(x) + \\nabla f(x)^{\\mathsf{T}}(y-x)$ ，所以我们很容易看到，沿着目标函数 $f$ 的梯度方向一直下降的话（其实是梯度方向的反向，因为要下降），终究会像从沙滩上滑下一般到达最小值。\n（顺便一说凸函数还有一个二阶条件：$\\nabla^{2}f(x) \\ge 0$ 。）\n\n那么，问题来了，如果目标函数不是光滑的怎么办？\n比如 $y=|x|$ ，这很明显是一个凸锥。\n再比如，神经网络（neural net，NN）中最常见的激活函数（activation Function）：ReLU，这也是一个凸锥。\n\n解决方法是提出次梯度（subgradient）的概念。\n所谓次梯度，是一个很像梯度的，但是是个常量的 $g$ ，它满足：$f(y) \\ge f(x) + g^{\\mathsf{T}}(y-x)$ 。\n形式上是不是和凸函数的一阶条件很像？因此我们实际上是找了一个很像梯度的替代品。\n例如：在 $y=|x|$ 的条件下，我们可以把原点的次梯度定义为 0。在ReLU的条件下，我们把原点的次梯度定义为 $1/2$​​ 等等。\n样子如下图中的红线的斜率：\n\n{% asset_img subgradient.png Subgradient %}\n\n（原图来自 [百度百科：次导数](https://baike.baidu.com/item/次导数/13882223?fr=aladdin)）\n\n# 扩展：Softmax 模型的 Loss 函数—— Log-Sum-Exp 函数\n\n这里就不给出函数的形式了，大家请自行 wiki。\n总之来说，是 Logistic 模型的 Loss 函数的高阶扩展。也是一个带有一堆 $\\log$ 、$\\exp$ 还要求加和的式子。\n\n它的凸性可以证明如下：\n\n首先，我们考虑函数 $f(x) = \\log (\\sum \\alpha_{i} e^{x_{i}})$ ，我们证明它是凸的。然后根据凸函数的性质 Affine composition 来导出 Log-Sum-Exp 函数是凸的。\n（Affine composition 指的是：$f(x)$ 是凸的 $\\Leftrightarrow f(Ax+b)$ 也是凸的，即对自变量做仿射变换不影响凸性。）\n\n考虑：\n$$\n\\begin{aligned}\n\\nabla_{i} f & = e^{x_{i}}\\Big/\\sum_{k} e^{x_{k}}  & \\\\\n\\nabla_{i}^{2} f & = \\mathrm{diag}(z)-zz^{\\mathsf{T}}, \\, z_{i} = e^{x_{i}}\\Big/\\sum_{k} e^{x_{k}}\n\\end{aligned}\n$$\n显而易见，$\\nabla_{i}^{2} f$ 是对角优势矩阵（diagonally dominant matrix）。\n（对角优势矩阵：对矩阵 $A$ 的所有对角元，有 $A_{ii} \\ge \\sum_{i \\ne j} |A_{ij}|$ 。）\n因此，$\\nabla_{i}^{2} f$ 是半正定的（positive semidefinite matrix，p.s.d）。\n所以得到 Log-Sum-Exp 函数是凸的。","slug":"thinking-from-softmax-02","published":1,"updated":"2021-07-21T12:39:17.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwrktivj000nqxt6n4qyrcij","content":"<h1 id=\"Logistic-回归的-Loss-函数为什么长成那个样子？\"><a href=\"#Logistic-回归的-Loss-函数为什么长成那个样子？\" class=\"headerlink\" title=\"Logistic 回归的 Loss 函数为什么长成那个样子？\"></a>Logistic 回归的 Loss 函数为什么长成那个样子？</h1><p>一般人大概都能想得到，Logistic 回归的 Loss 函数应该是下面的样子。<br>（以下是正常的版本。）</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nLoss(h_{\\theta}, \\, y) &=\\frac{1}{n} \\sum_{i=1}^{n} \\frac{1}{2}[h_{\\theta}(x_{i})-y_{i}]^{2} \\\\\n& =\\frac{1}{2}\\left(\\frac{1}{1+e^{-\\theta^{\\mathsf{T}}x}}-y\\right)^{2}\n\\end{aligned}</script><p>这里 $1/2$ 是为了求导后方便计算的系数，不重要。<br>$n$ 是样本数量。<br>括号里面就是分错的部分了，很容易理解。</p>\n<p>但实际上，它的 Loss 函数长成了这个样子：</p>\n<script type=\"math/tex; mode=display\">\nLoss = \n\\left \\{ \\begin{aligned}\n& -\\log (h_{\\theta}(x)) & \\qquad \\text{if }y=1 \\\\\n& -\\log (1-h_{\\theta}(x)) & \\qquad \\text{if }y=0\n\\end{aligned} \\right.</script><p>为什么呢？</p>\n<p>答案是：<strong>保证凸性</strong>。<br>第一个 Loss 函数不是凸函数，而取过了 $-\\log$ 并且分段以后就变成凸函数了。</p>\n<h1 id=\"凸优化-及-梯度下降法\"><a href=\"#凸优化-及-梯度下降法\" class=\"headerlink\" title=\"凸优化 及 梯度下降法\"></a>凸优化 及 梯度下降法</h1><p>几乎每一个机器学习问题都是一个优化问题。<br>而在所有优化问题当中，有一类优化问题是人们非常关心的，并希望每一个优化问题都能转化为这样的优化问题的，那就是凸优化问题（convex optimization）。</p>\n<p>一类常见的凸优化问题就是目标函数是凸函数，并且边界条件是仿射集的优化问题。如：支持向量机（SVM） 、 感知机（Perceptron）等等。<br>为什么要研究凸优化呢？因为凸函数有一个优点——全局最小值。<br>它可以让人们明确一个信念，即：所研究的问题一定是可学习的，而且一定在全局有一个固定结果，并不会踩到某个局部极值从而达不到最优。</p>\n<p>那么如何求得这个最值呢，一般的方法是利用梯度下降法（gradient descent，GD）。<br>由于凸函数有一个一阶条件：$f(y) \\ge f(x) + \\nabla f(x)^{\\mathsf{T}}(y-x)$ ，所以我们很容易看到，沿着目标函数 $f$ 的梯度方向一直下降的话（其实是梯度方向的反向，因为要下降），终究会像从沙滩上滑下一般到达最小值。<br>（顺便一说凸函数还有一个二阶条件：$\\nabla^{2}f(x) \\ge 0$ 。）</p>\n<p>那么，问题来了，如果目标函数不是光滑的怎么办？<br>比如 $y=|x|$ ，这很明显是一个凸锥。<br>再比如，神经网络（neural net，NN）中最常见的激活函数（activation Function）：ReLU，这也是一个凸锥。</p>\n<p>解决方法是提出次梯度（subgradient）的概念。<br>所谓次梯度，是一个很像梯度的，但是是个常量的 $g$ ，它满足：$f(y) \\ge f(x) + g^{\\mathsf{T}}(y-x)$ 。<br>形式上是不是和凸函数的一阶条件很像？因此我们实际上是找了一个很像梯度的替代品。<br>例如：在 $y=|x|$ 的条件下，我们可以把原点的次梯度定义为 0。在ReLU的条件下，我们把原点的次梯度定义为 $1/2$​​ 等等。<br>样子如下图中的红线的斜率：</p>\n<img src=\"/2017/08/10/thinking-from-softmax-02/subgradient.png\" title=\"Subgradient\">\n<p>（原图来自 <a href=\"https://baike.baidu.com/item/次导数/13882223?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科：次导数</a>）</p>\n<h1 id=\"扩展：Softmax-模型的-Loss-函数——-Log-Sum-Exp-函数\"><a href=\"#扩展：Softmax-模型的-Loss-函数——-Log-Sum-Exp-函数\" class=\"headerlink\" title=\"扩展：Softmax 模型的 Loss 函数—— Log-Sum-Exp 函数\"></a>扩展：Softmax 模型的 Loss 函数—— Log-Sum-Exp 函数</h1><p>这里就不给出函数的形式了，大家请自行 wiki。<br>总之来说，是 Logistic 模型的 Loss 函数的高阶扩展。也是一个带有一堆 $\\log$ 、$\\exp$ 还要求加和的式子。</p>\n<p>它的凸性可以证明如下：</p>\n<p>首先，我们考虑函数 $f(x) = \\log (\\sum \\alpha_{i} e^{x_{i}})$ ，我们证明它是凸的。然后根据凸函数的性质 Affine composition 来导出 Log-Sum-Exp 函数是凸的。<br>（Affine composition 指的是：$f(x)$ 是凸的 $\\Leftrightarrow f(Ax+b)$ 也是凸的，即对自变量做仿射变换不影响凸性。）</p>\n<p>考虑：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\nabla_{i} f & = e^{x_{i}}\\Big/\\sum_{k} e^{x_{k}}  & \\\\\n\\nabla_{i}^{2} f & = \\mathrm{diag}(z)-zz^{\\mathsf{T}}, \\, z_{i} = e^{x_{i}}\\Big/\\sum_{k} e^{x_{k}}\n\\end{aligned}</script><p>显而易见，$\\nabla_{i}^{2} f$ 是对角优势矩阵（diagonally dominant matrix）。<br>（对角优势矩阵：对矩阵 $A$ 的所有对角元，有 $A_{ii} \\ge \\sum_{i \\ne j} |A_{ij}|$ 。）<br>因此，$\\nabla_{i}^{2} f$ 是半正定的（positive semidefinite matrix，p.s.d）。<br>所以得到 Log-Sum-Exp 函数是凸的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Logistic-回归的-Loss-函数为什么长成那个样子？\"><a href=\"#Logistic-回归的-Loss-函数为什么长成那个样子？\" class=\"headerlink\" title=\"Logistic 回归的 Loss 函数为什么长成那个样子？\"></a>Logistic 回归的 Loss 函数为什么长成那个样子？</h1><p>一般人大概都能想得到，Logistic 回归的 Loss 函数应该是下面的样子。<br>（以下是正常的版本。）</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\nLoss(h_{\\theta}, \\, y) &=\\frac{1}{n} \\sum_{i=1}^{n} \\frac{1}{2}[h_{\\theta}(x_{i})-y_{i}]^{2} \\\\\n& =\\frac{1}{2}\\left(\\frac{1}{1+e^{-\\theta^{\\mathsf{T}}x}}-y\\right)^{2}\n\\end{aligned}</script><p>这里 $1/2$ 是为了求导后方便计算的系数，不重要。<br>$n$ 是样本数量。<br>括号里面就是分错的部分了，很容易理解。</p>\n<p>但实际上，它的 Loss 函数长成了这个样子：</p>\n<script type=\"math/tex; mode=display\">\nLoss = \n\\left \\{ \\begin{aligned}\n& -\\log (h_{\\theta}(x)) & \\qquad \\text{if }y=1 \\\\\n& -\\log (1-h_{\\theta}(x)) & \\qquad \\text{if }y=0\n\\end{aligned} \\right.</script><p>为什么呢？</p>\n<p>答案是：<strong>保证凸性</strong>。<br>第一个 Loss 函数不是凸函数，而取过了 $-\\log$ 并且分段以后就变成凸函数了。</p>\n<h1 id=\"凸优化-及-梯度下降法\"><a href=\"#凸优化-及-梯度下降法\" class=\"headerlink\" title=\"凸优化 及 梯度下降法\"></a>凸优化 及 梯度下降法</h1><p>几乎每一个机器学习问题都是一个优化问题。<br>而在所有优化问题当中，有一类优化问题是人们非常关心的，并希望每一个优化问题都能转化为这样的优化问题的，那就是凸优化问题（convex optimization）。</p>\n<p>一类常见的凸优化问题就是目标函数是凸函数，并且边界条件是仿射集的优化问题。如：支持向量机（SVM） 、 感知机（Perceptron）等等。<br>为什么要研究凸优化呢？因为凸函数有一个优点——全局最小值。<br>它可以让人们明确一个信念，即：所研究的问题一定是可学习的，而且一定在全局有一个固定结果，并不会踩到某个局部极值从而达不到最优。</p>\n<p>那么如何求得这个最值呢，一般的方法是利用梯度下降法（gradient descent，GD）。<br>由于凸函数有一个一阶条件：$f(y) \\ge f(x) + \\nabla f(x)^{\\mathsf{T}}(y-x)$ ，所以我们很容易看到，沿着目标函数 $f$ 的梯度方向一直下降的话（其实是梯度方向的反向，因为要下降），终究会像从沙滩上滑下一般到达最小值。<br>（顺便一说凸函数还有一个二阶条件：$\\nabla^{2}f(x) \\ge 0$ 。）</p>\n<p>那么，问题来了，如果目标函数不是光滑的怎么办？<br>比如 $y=|x|$ ，这很明显是一个凸锥。<br>再比如，神经网络（neural net，NN）中最常见的激活函数（activation Function）：ReLU，这也是一个凸锥。</p>\n<p>解决方法是提出次梯度（subgradient）的概念。<br>所谓次梯度，是一个很像梯度的，但是是个常量的 $g$ ，它满足：$f(y) \\ge f(x) + g^{\\mathsf{T}}(y-x)$ 。<br>形式上是不是和凸函数的一阶条件很像？因此我们实际上是找了一个很像梯度的替代品。<br>例如：在 $y=|x|$ 的条件下，我们可以把原点的次梯度定义为 0。在ReLU的条件下，我们把原点的次梯度定义为 $1/2$​​ 等等。<br>样子如下图中的红线的斜率：</p>\n<img src=\"/2017/08/10/thinking-from-softmax-02/subgradient.png\" title=\"Subgradient\">\n<p>（原图来自 <a href=\"https://baike.baidu.com/item/次导数/13882223?fr=aladdin\" target=\"_blank\" rel=\"noopener\">百度百科：次导数</a>）</p>\n<h1 id=\"扩展：Softmax-模型的-Loss-函数——-Log-Sum-Exp-函数\"><a href=\"#扩展：Softmax-模型的-Loss-函数——-Log-Sum-Exp-函数\" class=\"headerlink\" title=\"扩展：Softmax 模型的 Loss 函数—— Log-Sum-Exp 函数\"></a>扩展：Softmax 模型的 Loss 函数—— Log-Sum-Exp 函数</h1><p>这里就不给出函数的形式了，大家请自行 wiki。<br>总之来说，是 Logistic 模型的 Loss 函数的高阶扩展。也是一个带有一堆 $\\log$ 、$\\exp$ 还要求加和的式子。</p>\n<p>它的凸性可以证明如下：</p>\n<p>首先，我们考虑函数 $f(x) = \\log (\\sum \\alpha_{i} e^{x_{i}})$ ，我们证明它是凸的。然后根据凸函数的性质 Affine composition 来导出 Log-Sum-Exp 函数是凸的。<br>（Affine composition 指的是：$f(x)$ 是凸的 $\\Leftrightarrow f(Ax+b)$ 也是凸的，即对自变量做仿射变换不影响凸性。）</p>\n<p>考虑：</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\nabla_{i} f & = e^{x_{i}}\\Big/\\sum_{k} e^{x_{k}}  & \\\\\n\\nabla_{i}^{2} f & = \\mathrm{diag}(z)-zz^{\\mathsf{T}}, \\, z_{i} = e^{x_{i}}\\Big/\\sum_{k} e^{x_{k}}\n\\end{aligned}</script><p>显而易见，$\\nabla_{i}^{2} f$ 是对角优势矩阵（diagonally dominant matrix）。<br>（对角优势矩阵：对矩阵 $A$ 的所有对角元，有 $A_{ii} \\ge \\sum_{i \\ne j} |A_{ij}|$ 。）<br>因此，$\\nabla_{i}^{2} f$ 是半正定的（positive semidefinite matrix，p.s.d）。<br>所以得到 Log-Sum-Exp 函数是凸的。</p>\n"}],"PostAsset":[{"_id":"source/_posts/about-kernel-02/linear_space.png","slug":"linear_space.png","post":"ckwrktivg000hqxt6ns6fqudw","modified":0,"renderable":0},{"_id":"source/_posts/thinking-from-softmax-02/subgradient.png","slug":"subgradient.png","post":"ckwrktivj000nqxt6n4qyrcij","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckwrktiv30001qxt6wl19k31f","category_id":"ckwrktiyx000oqxt67y30h1ok","_id":"ckwrktj0f002mqxt6kulcj146"},{"post_id":"ckwrktiv60003qxt6hkkafdl8","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0g002oqxt6q60nihf8"},{"post_id":"ckwrktiv70004qxt6ceoapanx","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0g002qqxt6n8spepox"},{"post_id":"ckwrktiv80005qxt6q11ojijw","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0g002sqxt6z41pmz26"},{"post_id":"ckwrktiv80006qxt6bf7p7wb0","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0g002uqxt6jmqbuzti"},{"post_id":"ckwrktiv90007qxt6yf4w573m","category_id":"ckwrktiyx000oqxt67y30h1ok","_id":"ckwrktj0g002wqxt6kjg4cg4x"},{"post_id":"ckwrktiva0008qxt6d5wsigmj","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0g002yqxt6ft2cbmre"},{"post_id":"ckwrktiva0009qxt6bpod90eh","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0h0030qxt6ld18wgb0"},{"post_id":"ckwrktivb000aqxt6iflya024","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0h0032qxt6xg6a1kpk"},{"post_id":"ckwrktivc000bqxt6rmriycof","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0h0034qxt64o2o2c92"},{"post_id":"ckwrktivd000cqxt6tjtqoylw","category_id":"ckwrktiyx000oqxt67y30h1ok","_id":"ckwrktj0h0036qxt6a0ci1q7p"},{"post_id":"ckwrktive000dqxt6y2wq3vso","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0h0038qxt6t4b9ifzp"},{"post_id":"ckwrktivf000eqxt6fxi9az8z","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0h003aqxt6culsrugf"},{"post_id":"ckwrktivf000fqxt6livwxo6n","category_id":"ckwrktizc001eqxt6kmyi94x1","_id":"ckwrktj0h003cqxt6ajoihq9m"},{"post_id":"ckwrktivg000gqxt66mnw2k4u","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0i003eqxt6w07b0dun"},{"post_id":"ckwrktivg000hqxt6ns6fqudw","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0i003gqxt616pw3i1p"},{"post_id":"ckwrktivh000iqxt6qn87def1","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0i003iqxt6vfjwcbxi"},{"post_id":"ckwrktivh000jqxt6azgq5ni1","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0i003kqxt6ngonobq6"},{"post_id":"ckwrktivi000kqxt6u0339qal","category_id":"ckwrktize001nqxt6j88gtts3","_id":"ckwrktj0i003mqxt67nniz0l4"},{"post_id":"ckwrktivi000lqxt60e8fbxb4","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0i003oqxt6d02sgqjy"},{"post_id":"ckwrktivi000mqxt6qboj1gfp","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0i003qqxt68nri4oky"},{"post_id":"ckwrktivj000nqxt6n4qyrcij","category_id":"ckwrktiz4000qqxt6lt5mcuhc","_id":"ckwrktj0j003sqxt6y4bt1c3e"}],"PostTag":[{"post_id":"ckwrktiv30001qxt6wl19k31f","tag_id":"ckwrktiz3000pqxt63c5uah7z","_id":"ckwrktj0f002lqxt6p2r3cscm"},{"post_id":"ckwrktiv60003qxt6hkkafdl8","tag_id":"ckwrktiz4000rqxt6lxuj61wa","_id":"ckwrktj0g002nqxt6mvudkqy6"},{"post_id":"ckwrktiv60003qxt6hkkafdl8","tag_id":"ckwrktiz4000tqxt6aiwqca4q","_id":"ckwrktj0g002pqxt6l8r34gwq"},{"post_id":"ckwrktiv70004qxt6ceoapanx","tag_id":"ckwrktiz4000rqxt6lxuj61wa","_id":"ckwrktj0g002rqxt61hyl6rr5"},{"post_id":"ckwrktiv70004qxt6ceoapanx","tag_id":"ckwrktiz4000tqxt6aiwqca4q","_id":"ckwrktj0g002tqxt6xkab4oms"},{"post_id":"ckwrktiv80005qxt6q11ojijw","tag_id":"ckwrktiz7000zqxt65cqh7kpt","_id":"ckwrktj0g002vqxt6y5h4sdbp"},{"post_id":"ckwrktiv80005qxt6q11ojijw","tag_id":"ckwrktiz80011qxt6dgazljpq","_id":"ckwrktj0g002xqxt6l1cb9qtr"},{"post_id":"ckwrktiv80006qxt6bf7p7wb0","tag_id":"ckwrktiz90013qxt6w7jtjv5n","_id":"ckwrktj0h002zqxt6kdbgghva"},{"post_id":"ckwrktiv80006qxt6bf7p7wb0","tag_id":"ckwrktiz90015qxt67lfh5zuy","_id":"ckwrktj0h0031qxt6xo2k77q2"},{"post_id":"ckwrktiv80006qxt6bf7p7wb0","tag_id":"ckwrktiza0017qxt60y75snzu","_id":"ckwrktj0h0033qxt61eidjqhj"},{"post_id":"ckwrktiv90007qxt6yf4w573m","tag_id":"ckwrktiz3000pqxt63c5uah7z","_id":"ckwrktj0h0035qxt6f0853xqm"},{"post_id":"ckwrktiva0008qxt6d5wsigmj","tag_id":"ckwrktiz4000rqxt6lxuj61wa","_id":"ckwrktj0h0037qxt6iumln12e"},{"post_id":"ckwrktiva0008qxt6d5wsigmj","tag_id":"ckwrktizc001dqxt6yd7l7qon","_id":"ckwrktj0h0039qxt6c1m85098"},{"post_id":"ckwrktiva0009qxt6bpod90eh","tag_id":"ckwrktizc001fqxt6s8qmnm9e","_id":"ckwrktj0h003bqxt62qbs05h7"},{"post_id":"ckwrktiva0009qxt6bpod90eh","tag_id":"ckwrktizd001hqxt68k0s9xbf","_id":"ckwrktj0i003dqxt6pe4jii4e"},{"post_id":"ckwrktivb000aqxt6iflya024","tag_id":"ckwrktizd001kqxt6jgq8xvl9","_id":"ckwrktj0i003fqxt6s3bk3bpj"},{"post_id":"ckwrktivb000aqxt6iflya024","tag_id":"ckwrktize001mqxt6ajbyk5mi","_id":"ckwrktj0i003hqxt62yr1f9bi"},{"post_id":"ckwrktivc000bqxt6rmriycof","tag_id":"ckwrktizf001oqxt6uc8bsut3","_id":"ckwrktj0i003jqxt6ly8d9ogd"},{"post_id":"ckwrktivc000bqxt6rmriycof","tag_id":"ckwrktizf001qqxt6a5oymae8","_id":"ckwrktj0i003lqxt64trdwwlh"},{"post_id":"ckwrktivc000bqxt6rmriycof","tag_id":"ckwrktizg001sqxt67cn35n1s","_id":"ckwrktj0i003nqxt6kwp8beyn"},{"post_id":"ckwrktive000dqxt6y2wq3vso","tag_id":"ckwrktizg001uqxt6lrqcwr7d","_id":"ckwrktj0i003pqxt67i0kxrv2"},{"post_id":"ckwrktive000dqxt6y2wq3vso","tag_id":"ckwrktizh001vqxt6tzke8zwc","_id":"ckwrktj0j003rqxt6wsnc3smq"},{"post_id":"ckwrktive000dqxt6y2wq3vso","tag_id":"ckwrktizh001wqxt66gok9sen","_id":"ckwrktj0k003tqxt63wgppan3"},{"post_id":"ckwrktivf000eqxt6fxi9az8z","tag_id":"ckwrktizh001xqxt65416tcg4","_id":"ckwrktj0k003uqxt6k8yupve8"},{"post_id":"ckwrktivf000eqxt6fxi9az8z","tag_id":"ckwrktizh001yqxt685mz31w1","_id":"ckwrktj0k003vqxt6jtt203pp"},{"post_id":"ckwrktivf000fqxt6livwxo6n","tag_id":"ckwrktizi001zqxt6e5lzwq03","_id":"ckwrktj0k003wqxt6hy5bwvzd"},{"post_id":"ckwrktivg000gqxt66mnw2k4u","tag_id":"ckwrktizh001xqxt65416tcg4","_id":"ckwrktj0k003xqxt60vdkrvp0"},{"post_id":"ckwrktivg000gqxt66mnw2k4u","tag_id":"ckwrktizi0021qxt6eh5tez5x","_id":"ckwrktj0k003yqxt60i5bc2j8"},{"post_id":"ckwrktivg000hqxt6ns6fqudw","tag_id":"ckwrktiz90013qxt6w7jtjv5n","_id":"ckwrktj0k003zqxt64swbb2ip"},{"post_id":"ckwrktivg000hqxt6ns6fqudw","tag_id":"ckwrktiza0017qxt60y75snzu","_id":"ckwrktj0k0040qxt6orczmsxg"},{"post_id":"ckwrktivg000hqxt6ns6fqudw","tag_id":"ckwrktizk0024qxt6saswmsz8","_id":"ckwrktj0k0041qxt6mufd3oh2"},{"post_id":"ckwrktivh000iqxt6qn87def1","tag_id":"ckwrktizk0025qxt6zscreet0","_id":"ckwrktj0k0042qxt65olz7ejy"},{"post_id":"ckwrktivh000jqxt6azgq5ni1","tag_id":"ckwrktizk0026qxt6gmpbr7dm","_id":"ckwrktj0l0043qxt60ld3ueen"},{"post_id":"ckwrktivh000jqxt6azgq5ni1","tag_id":"ckwrktizk0027qxt6hjcrosdc","_id":"ckwrktj0l0044qxt6s6z2oya8"},{"post_id":"ckwrktivh000jqxt6azgq5ni1","tag_id":"ckwrktizl0028qxt60n2hc2ut","_id":"ckwrktj0l0045qxt6ahtiv24u"},{"post_id":"ckwrktivh000jqxt6azgq5ni1","tag_id":"ckwrktizl0029qxt6ex7iizex","_id":"ckwrktj0l0046qxt66ydq17b8"},{"post_id":"ckwrktivi000kqxt6u0339qal","tag_id":"ckwrktizl002aqxt6q7bscsy7","_id":"ckwrktj0l0047qxt6hyetkk5l"},{"post_id":"ckwrktivi000lqxt60e8fbxb4","tag_id":"ckwrktizh001xqxt65416tcg4","_id":"ckwrktj0l0048qxt6r5q54jyf"},{"post_id":"ckwrktivi000lqxt60e8fbxb4","tag_id":"ckwrktizh001yqxt685mz31w1","_id":"ckwrktj0l0049qxt6q38k8jom"},{"post_id":"ckwrktivi000lqxt60e8fbxb4","tag_id":"ckwrktizi0021qxt6eh5tez5x","_id":"ckwrktj0l004aqxt617avtjij"},{"post_id":"ckwrktivi000mqxt6qboj1gfp","tag_id":"ckwrktiz4000rqxt6lxuj61wa","_id":"ckwrktj0l004bqxt6pzhulbip"},{"post_id":"ckwrktivi000mqxt6qboj1gfp","tag_id":"ckwrktizn002fqxt6lgbihn0v","_id":"ckwrktj0m004cqxt6mjs2ofod"},{"post_id":"ckwrktivj000nqxt6n4qyrcij","tag_id":"ckwrktizl0028qxt60n2hc2ut","_id":"ckwrktj0m004dqxt6wlkg5swk"},{"post_id":"ckwrktivj000nqxt6n4qyrcij","tag_id":"ckwrktizl0029qxt6ex7iizex","_id":"ckwrktj0m004eqxt6ubz5ssas"},{"post_id":"ckwrktivj000nqxt6n4qyrcij","tag_id":"ckwrktizh001yqxt685mz31w1","_id":"ckwrktj0m004fqxt6lp4ayu8a"},{"post_id":"ckwrktivj000nqxt6n4qyrcij","tag_id":"ckwrktizo002jqxt6gbvfjvjz","_id":"ckwrktj0m004gqxt6fptyidux"},{"post_id":"ckwrktivj000nqxt6n4qyrcij","tag_id":"ckwrktizq002kqxt6z2rqjs8t","_id":"ckwrktj0m004hqxt6zu29w0z1"}],"Tag":[{"name":"Tips","_id":"ckwrktiz3000pqxt63c5uah7z"},{"name":"Deep learning","_id":"ckwrktiz4000rqxt6lxuj61wa"},{"name":"GAN","_id":"ckwrktiz4000tqxt6aiwqca4q"},{"name":"GD","_id":"ckwrktiz7000zqxt65cqh7kpt"},{"name":"Momentum","_id":"ckwrktiz80011qxt6dgazljpq"},{"name":"Kernel","_id":"ckwrktiz90013qxt6w7jtjv5n"},{"name":"SVM","_id":"ckwrktiz90015qxt67lfh5zuy"},{"name":"RKHS","_id":"ckwrktiza0017qxt60y75snzu"},{"name":"Loss function","_id":"ckwrktizc001dqxt6yd7l7qon"},{"name":"PCA","_id":"ckwrktizc001fqxt6s8qmnm9e"},{"name":"LFM","_id":"ckwrktizd001hqxt68k0s9xbf"},{"name":"Discriminative model","_id":"ckwrktizd001kqxt6jgq8xvl9"},{"name":"Generative model","_id":"ckwrktize001mqxt6ajbyk5mi"},{"name":"Ensemble","_id":"ckwrktizf001oqxt6uc8bsut3"},{"name":"Boost","_id":"ckwrktizf001qqxt6a5oymae8"},{"name":"GBDT/GBRT","_id":"ckwrktizg001sqxt67cn35n1s"},{"name":"K-means","_id":"ckwrktizg001uqxt6lrqcwr7d"},{"name":"GMM","_id":"ckwrktizh001vqxt6tzke8zwc"},{"name":"EM Algorithm","_id":"ckwrktizh001wqxt66gok9sen"},{"name":"Norm regularization","_id":"ckwrktizh001xqxt65416tcg4"},{"name":"Convex optimization","_id":"ckwrktizh001yqxt685mz31w1"},{"name":"GC","_id":"ckwrktizi001zqxt6e5lzwq03"},{"name":"Matrix theory","_id":"ckwrktizi0021qxt6eh5tez5x"},{"name":"Functional analysis","_id":"ckwrktizk0024qxt6saswmsz8"},{"name":"Rating","_id":"ckwrktizk0025qxt6zscreet0"},{"name":"Generalized Linear Model","_id":"ckwrktizk0026qxt6gmpbr7dm"},{"name":"Exponential family distribution","_id":"ckwrktizk0027qxt6hjcrosdc"},{"name":"Logistic","_id":"ckwrktizl0028qxt60n2hc2ut"},{"name":"Softmax","_id":"ckwrktizl0029qxt6ex7iizex"},{"name":"Statistics","_id":"ckwrktizl002aqxt6q7bscsy7"},{"name":"Activation function","_id":"ckwrktizn002fqxt6lgbihn0v"},{"name":"Gradient","_id":"ckwrktizo002jqxt6gbvfjvjz"},{"name":"Subgradient","_id":"ckwrktizq002kqxt6z2rqjs8t"}]}}